import { useEffect, useReducer } from "react";
import { ZEPLIN_APP_BASE, ZEPLIN_WEB_BASE } from "../../constants";
import { useStorybookState } from "@storybook/api";
import { getZeplinLinksFromConnectedComponents } from "../../utils/api";
const getProjectIdFromProjectLink = (link) => {
    if (link.startsWith(`${ZEPLIN_APP_BASE}//project?`)) {
        const [, searchParams] = link.split("?");
        const result = /^pid=([\da-f]{24})$/.exec(searchParams);
        return result === null || result === void 0 ? void 0 : result[1];
    }
    if (link.startsWith(`${ZEPLIN_WEB_BASE}/project`)) {
        const result = /\/project\/([\da-f]{24})$/i.exec(link);
        return result === null || result === void 0 ? void 0 : result[1];
    }
    return null;
};
const getStyleguideIdFromStyleguideLink = (link) => {
    if (link.startsWith(`${ZEPLIN_APP_BASE}//styleguide?`)) {
        const [, searchParams] = link.split("?");
        const result = /^stid=([\da-f]{24})$/.exec(searchParams);
        return result === null || result === void 0 ? void 0 : result[1];
    }
    if (link.startsWith(`${ZEPLIN_WEB_BASE}/styleguide`)) {
        const result = /\/styleguide\/([\da-f]{24})$/i.exec(link);
        return result === null || result === void 0 ? void 0 : result[1];
    }
    return null;
};
const isZeplinLinkValid = (link) => {
    var _a, _b;
    return typeof ((_a = link) === null || _a === void 0 ? void 0 : _a.name) === "string" && typeof ((_b = link) === null || _b === void 0 ? void 0 : _b.link) === "string";
};
export const useLinks = (zeplinLink) => {
    const [state, setState] = useReducer((state, newState) => ({ ...state, ...newState }), {
        links: [],
        error: null,
        loading: true,
    }, undefined);
    const { storyId } = useStorybookState();
    useEffect(() => {
        if (!zeplinLink) {
            setState({ links: [], error: null, loading: false });
        }
        else if (Array.isArray(zeplinLink) && zeplinLink.every(isZeplinLinkValid)) {
            setState({ links: zeplinLink, error: null, loading: false });
        }
        else if (Array.isArray(zeplinLink) || typeof zeplinLink !== "string") {
            const formattedValue = JSON.stringify(zeplinLink, null, 2);
            setState({ links: [], error: `Zeplin link is malformed. Received: ${formattedValue}`, loading: false });
        }
        else {
            const projectId = getProjectIdFromProjectLink(zeplinLink);
            const styleguideId = getStyleguideIdFromStyleguideLink(zeplinLink);
            if (projectId || styleguideId) {
                setState({ links: [], error: null, loading: true });
                getZeplinLinksFromConnectedComponents(storyId, projectId ? { projectId } : { styleguideId }).then(links => {
                    const mappedLinks = links.map((link, i) => ({
                        name: `Component ${i + 1}`,
                        link
                    }));
                    setState({ links: mappedLinks, error: null, loading: false });
                }).catch(error => {
                    var _a;
                    setState({ links: [], error: (_a = error === null || error === void 0 ? void 0 : error.message) !== null && _a !== void 0 ? _a : String(error), loading: false });
                });
            }
            else {
                setState({ links: [{ link: zeplinLink, name: "Component" }], error: null, loading: false });
            }
        }
    }, [zeplinLink]);
    return state;
};
