import React, { useEffect, useCallback, useReducer } from "react";
import { Form, Link } from "@storybook/components";
import { styled } from "@storybook/theming";
import HeaderButtons from "./HeaderButtons";
import { getUser, getZeplinResource } from "../utils/api";
import { relativeDate } from "../utils/date";
import OverlayPanel from "./OverlayPanel";
import { useLinks } from "./hooks";
const initialState = {
    selectedLink: "",
    zeplinData: null,
    user: null,
    zoomLevel: 1,
    loading: true,
    error: null,
    linksFromConnectedComponents: null
};
const ZeplinPanel = ({ zeplinLink, onLogout }) => {
    var _a;
    const [state, setState] = useReducer((state, newState) => ({
        ...state,
        ...newState,
    }), initialState, undefined);
    const { links, loading: linksLoading, error: LinksError } = useLinks(zeplinLink);
    const { selectedLink, zeplinData, zoomLevel, loading, error, user } = state;
    let shouldUseMultiLink = false;
    if (selectedLink) {
        shouldUseMultiLink = !!links.find(({ link }) => link === selectedLink);
    }
    const designLink = shouldUseMultiLink ? selectedLink : (_a = links[0]) === null || _a === void 0 ? void 0 : _a.link;
    const fetchZeplinResource = async () => {
        if (linksLoading) {
            return;
        }
        if (!designLink) {
            setState({ loading: false });
            return;
        }
        setState({ loading: true });
        const data = await getZeplinResource(designLink);
        setState({
            loading: false,
            error: 'error' in data ? data.error : undefined,
            zeplinData: 'error' in data ? undefined : data,
        });
    };
    const fetchUser = async () => {
        const data = await getUser();
        setState({
            user: 'error' in data ? undefined : data,
        });
    };
    useEffect(() => {
        fetchZeplinResource();
    }, [designLink, linksLoading]);
    useEffect(() => {
        fetchUser();
    }, []);
    const selectZeplinLink = useCallback((event) => {
        setState({ selectedLink: event.target.value });
    }, []);
    const handleZoomIn = () => {
        setState({ zoomLevel: zoomLevel * 1.25 });
    };
    const handleZoomOut = () => {
        setState({ zoomLevel: zoomLevel * 0.75 });
    };
    const handleZoomReset = () => {
        setState({ zoomLevel: 1 });
    };
    if (loading || linksLoading) {
        return React.createElement(Message, null, "Loading\u2026");
    }
    if (!designLink && !LinksError) {
        if (zeplinLink) {
            return (React.createElement(Message, null, "There is no connected component for this story."));
        }
        return (React.createElement(Message, null,
            React.createElement("strong", null, "zeplinLink"),
            " is not provided for this story."));
    }
    if (error || LinksError) {
        return (React.createElement(Rows, null,
            React.createElement("p", null, error || LinksError),
            React.createElement("p", null,
                (user === null || user === void 0 ? void 0 : user.username) && React.createElement(React.Fragment, null,
                    "You are currently logged in as ",
                    React.createElement("strong", null, user === null || user === void 0 ? void 0 : user.username),
                    ". "),
                "If you prefer using another account, you can ",
                React.createElement(Link, { onClick: onLogout }, "log out"),
                " first.")));
    }
    if (!zeplinData) {
        return (React.createElement(Message, null,
            React.createElement("strong", null, "zeplinData"),
            " is not provided for this story."));
    }
    const { name, image: { originalUrl, width, height }, description, updated, } = zeplinData;
    const LinksSection = links.length > 1 && (React.createElement(Select, { onChange: selectZeplinLink, value: designLink }, links.map(({ name, link }) => (React.createElement("option", { key: name, value: link }, name)))));
    return (React.createElement(Container, null,
        React.createElement(Header, null,
            LinksSection,
            React.createElement(ResourceName, { title: name }, name),
            updated && React.createElement("i", null,
                "Updated ",
                relativeDate(updated * 1000)),
            React.createElement(HeaderButtons, { username: user === null || user === void 0 ? void 0 : user.username, onLogout: onLogout, onZoomIn: handleZoomIn, onZoomOut: handleZoomOut, onZoomReset: handleZoomReset })),
        React.createElement(Divider, null),
        React.createElement(Header, null,
            React.createElement(OverlayPanel, { imageUrl: originalUrl })),
        React.createElement(Divider, null),
        React.createElement(ImageContainer, null,
            React.createElement("a", { href: designLink, rel: "noopener noreferrer", target: "_blank", title: name },
                React.createElement("img", { style: { transform: `scale(${zoomLevel})` }, src: originalUrl, alt: name, width: width, height: height }))),
        description && React.createElement(Footer, null, description)));
};
export default ZeplinPanel;
const Container = styled.div `
    display: flex;
    flex-direction: column;
    height: 100%;
`;
const Header = styled.div `
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0 15px;
`;
const ResourceName = styled.strong `
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
    flex: 1;
    margin-right: 15px;
`;
const ImageContainer = styled.div `
    overflow: auto;
    flex: 1;
    padding: 0 15px 15px;
    img {
        transform-origin: left top 0px;
    }
`;
const Divider = styled.hr `
    margin: 0 0 1px 0;
    &:last-of-type {
        margin-bottom: 15px;
    }
`;
const Message = styled.p `
    margin: 15px;
`;
const Rows = styled.div `
    margin: 15px;
    display: flex;
    flex-direction: column;
    gap: 12px;
    p {
        margin: 0;
    }
    p:first-of-type {
        color: red;
    }
`;
const Select = styled(Form.Select) `
    margin-right: 15px;
`;
const Footer = styled.footer `
    padding: 12px 15px;
    background-color: #f6f9fc;
`;
