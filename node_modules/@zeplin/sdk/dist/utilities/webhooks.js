"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Webhooks = void 0;

require("core-js/modules/es.array.concat.js");

require("core-js/modules/es.object.define-property.js");

var _crypto = require("crypto");

var _models = require("../models");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Webhooks = /*#__PURE__*/function () {
  function Webhooks() {
    _classCallCheck(this, Webhooks);
  }

  _createClass(Webhooks, null, [{
    key: "verifyEvent",
    value: function verifyEvent(_ref) {
      var payload = _ref.payload,
          signature = _ref.signature,
          deliveryTimestamp = _ref.deliveryTimestamp,
          secret = _ref.secret;
      var generatedSignature = (0, _crypto.createHmac)("sha256", secret).update("".concat(deliveryTimestamp, ".").concat(JSON.stringify(payload))).digest("hex");
      return signature === generatedSignature;
    }
  }, {
    key: "transformPayloadToWebhookEvent",
    value: function transformPayloadToWebhookEvent(payload) {
      return (0, _models.transformJSONToWebhookEvent)(payload);
    }
  }, {
    key: "isPingEvent",
    value: function isPingEvent(data) {
      return data.event === "ping";
    }
  }, {
    key: "isWorkspaceNotificationEvent",
    value: function isWorkspaceNotificationEvent(data) {
      return data.event === "workspace.notification";
    }
  }, {
    key: "isWorkspaceNotificationCreatedEvent",
    value: function isWorkspaceNotificationCreatedEvent(data) {
      return Webhooks.isWorkspaceNotificationEvent(data) && data.action === "created";
    }
  }, {
    key: "isWorkspaceNotificationUpdatedEvent",
    value: function isWorkspaceNotificationUpdatedEvent(data) {
      return Webhooks.isWorkspaceNotificationEvent(data) && data.action === "updated";
    }
  }, {
    key: "isWorkspaceProjectEvent",
    value: function isWorkspaceProjectEvent(data) {
      return data.event === "workspace.project";
    }
  }, {
    key: "isWorkspaceProjectCreatedEvent",
    value: function isWorkspaceProjectCreatedEvent(data) {
      return Webhooks.isWorkspaceProjectEvent(data) && data.action === "created";
    }
  }, {
    key: "isWorkspaceProjectUpdatedEvent",
    value: function isWorkspaceProjectUpdatedEvent(data) {
      return Webhooks.isWorkspaceProjectEvent(data) && data.action === "updated";
    }
  }, {
    key: "isWorkspaceProjectDeletedEvent",
    value: function isWorkspaceProjectDeletedEvent(data) {
      return Webhooks.isWorkspaceProjectEvent(data) && data.action === "deleted";
    }
  }, {
    key: "isWorkspaceProjectActivatedEvent",
    value: function isWorkspaceProjectActivatedEvent(data) {
      return Webhooks.isWorkspaceProjectEvent(data) && data.action === "activated";
    }
  }, {
    key: "isWorkspaceProjectArchivedEvent",
    value: function isWorkspaceProjectArchivedEvent(data) {
      return Webhooks.isWorkspaceProjectEvent(data) && data.action === "archived";
    }
  }, {
    key: "isWorkspaceProjectStyleguideLinkedEvent",
    value: function isWorkspaceProjectStyleguideLinkedEvent(data) {
      return Webhooks.isWorkspaceProjectEvent(data) && data.action === "styleguide_linked";
    }
  }, {
    key: "isWorkspaceProjectStyleguideUnlinkedEvent",
    value: function isWorkspaceProjectStyleguideUnlinkedEvent(data) {
      return Webhooks.isWorkspaceProjectEvent(data) && data.action === "styleguide_unlinked";
    }
  }, {
    key: "isWorkspaceStyleguideEvent",
    value: function isWorkspaceStyleguideEvent(data) {
      return data.event === "workspace.styleguide";
    }
  }, {
    key: "isWorkspaceStyleguideCreatedEvent",
    value: function isWorkspaceStyleguideCreatedEvent(data) {
      return Webhooks.isWorkspaceStyleguideEvent(data) && data.action === "created";
    }
  }, {
    key: "isWorkspaceStyleguideUpdatedEvent",
    value: function isWorkspaceStyleguideUpdatedEvent(data) {
      return Webhooks.isWorkspaceStyleguideEvent(data) && data.action === "updated";
    }
  }, {
    key: "isWorkspaceStyleguideDeletedEvent",
    value: function isWorkspaceStyleguideDeletedEvent(data) {
      return Webhooks.isWorkspaceStyleguideEvent(data) && data.action === "deleted";
    }
  }, {
    key: "isWorkspaceStyleguideActivatedEvent",
    value: function isWorkspaceStyleguideActivatedEvent(data) {
      return Webhooks.isWorkspaceStyleguideEvent(data) && data.action === "activated";
    }
  }, {
    key: "isWorkspaceStyleguideArchivedEvent",
    value: function isWorkspaceStyleguideArchivedEvent(data) {
      return Webhooks.isWorkspaceStyleguideEvent(data) && data.action === "archived";
    }
  }, {
    key: "isWorkspaceStyleguideStyleguideLinkedEvent",
    value: function isWorkspaceStyleguideStyleguideLinkedEvent(data) {
      return Webhooks.isWorkspaceStyleguideEvent(data) && data.action === "styleguide_linked";
    }
  }, {
    key: "isWorkspaceStyleguideStyleguideUnlinkedEvent",
    value: function isWorkspaceStyleguideStyleguideUnlinkedEvent(data) {
      return Webhooks.isWorkspaceStyleguideEvent(data) && data.action === "styleguide_unlinked";
    }
  }, {
    key: "isWorkspaceOrganizationEvent",
    value: function isWorkspaceOrganizationEvent(data) {
      return data.event === "workspace.organization";
    }
  }, {
    key: "isWorkspaceOrganizationUpdatedEvent",
    value: function isWorkspaceOrganizationUpdatedEvent(data) {
      return Webhooks.isWorkspaceOrganizationEvent(data) && data.action === "updated";
    }
  }, {
    key: "isWorkspaceOrganizationJoinRequestedEvent",
    value: function isWorkspaceOrganizationJoinRequestedEvent(data) {
      return Webhooks.isWorkspaceOrganizationEvent(data) && data.action === "join_requested";
    }
  }, {
    key: "isWorkspaceOrganizationMemberEvent",
    value: function isWorkspaceOrganizationMemberEvent(data) {
      return data.event === "workspace.organization.member";
    }
  }, {
    key: "isWorkspaceOrganizationMemberInvitedEvent",
    value: function isWorkspaceOrganizationMemberInvitedEvent(data) {
      return Webhooks.isWorkspaceOrganizationMemberEvent(data) && data.action === "invited";
    }
  }, {
    key: "isWorkspaceOrganizationMemberRemovedEvent",
    value: function isWorkspaceOrganizationMemberRemovedEvent(data) {
      return Webhooks.isWorkspaceOrganizationMemberEvent(data) && data.action === "removed";
    }
  }, {
    key: "isWorkspaceOrganizationMemberRoleUpdatedEvent",
    value: function isWorkspaceOrganizationMemberRoleUpdatedEvent(data) {
      return Webhooks.isWorkspaceOrganizationMemberEvent(data) && data.action === "role_updated";
    }
  }, {
    key: "isWorkspaceOrganizationMemberTagUpdatedEvent",
    value: function isWorkspaceOrganizationMemberTagUpdatedEvent(data) {
      return Webhooks.isWorkspaceOrganizationMemberEvent(data) && data.action === "tag_updated";
    }
  }, {
    key: "isProjectMemberEvent",
    value: function isProjectMemberEvent(data) {
      return data.event === "project.member";
    }
  }, {
    key: "isProjectMemberInvitedEvent",
    value: function isProjectMemberInvitedEvent(data) {
      return Webhooks.isProjectMemberEvent(data) && data.action === "invited";
    }
  }, {
    key: "isProjectMemberRemovedEvent",
    value: function isProjectMemberRemovedEvent(data) {
      return Webhooks.isProjectMemberEvent(data) && data.action === "removed";
    }
  }, {
    key: "isProjectMemberRoleUpdatedEvent",
    value: function isProjectMemberRoleUpdatedEvent(data) {
      return Webhooks.isProjectMemberEvent(data) && data.action === "role_updated";
    }
  }, {
    key: "isProjectScreenEvent",
    value: function isProjectScreenEvent(data) {
      return data.event === "project.screen";
    }
  }, {
    key: "isProjectScreenCreatedEvent",
    value: function isProjectScreenCreatedEvent(data) {
      return Webhooks.isProjectScreenEvent(data) && data.action === "created";
    }
  }, {
    key: "isProjectScreenDeletedEvent",
    value: function isProjectScreenDeletedEvent(data) {
      return Webhooks.isProjectScreenEvent(data) && data.action === "deleted";
    }
  }, {
    key: "isProjectScreenUpdatedEvent",
    value: function isProjectScreenUpdatedEvent(data) {
      return Webhooks.isProjectScreenEvent(data) && data.action === "updated";
    }
  }, {
    key: "isProjectScreenVersionEvent",
    value: function isProjectScreenVersionEvent(data) {
      return data.event === "project.screen.version";
    }
  }, {
    key: "isProjectScreenVersionCreatedEvent",
    value: function isProjectScreenVersionCreatedEvent(data) {
      return Webhooks.isProjectScreenVersionEvent(data) && data.action === "created";
    }
  }, {
    key: "isProjectScreenVersionDeletedEvent",
    value: function isProjectScreenVersionDeletedEvent(data) {
      return Webhooks.isProjectScreenVersionEvent(data) && data.action === "deleted";
    }
  }, {
    key: "isProjectScreenVersionUpdatedEvent",
    value: function isProjectScreenVersionUpdatedEvent(data) {
      return Webhooks.isProjectScreenVersionEvent(data) && data.action === "updated";
    }
  }, {
    key: "isProjectNoteEvent",
    value: function isProjectNoteEvent(data) {
      return data.event === "project.note";
    }
  }, {
    key: "isProjectNoteCreatedEvent",
    value: function isProjectNoteCreatedEvent(data) {
      return Webhooks.isProjectNoteEvent(data) && data.action === "created";
    }
  }, {
    key: "isProjectNoteDeletedEvent",
    value: function isProjectNoteDeletedEvent(data) {
      return Webhooks.isProjectNoteEvent(data) && data.action === "deleted";
    }
  }, {
    key: "isProjectNoteUpdatedEvent",
    value: function isProjectNoteUpdatedEvent(data) {
      return Webhooks.isProjectNoteEvent(data) && data.action === "updated";
    }
  }, {
    key: "isProjectNoteCommentEvent",
    value: function isProjectNoteCommentEvent(data) {
      return data.event === "project.note.comment";
    }
  }, {
    key: "isProjectNoteCommentCreatedEvent",
    value: function isProjectNoteCommentCreatedEvent(data) {
      return Webhooks.isProjectNoteCommentEvent(data) && data.action === "created";
    }
  }, {
    key: "isProjectNoteCommentDeletedEvent",
    value: function isProjectNoteCommentDeletedEvent(data) {
      return Webhooks.isProjectNoteCommentEvent(data) && data.action === "deleted";
    }
  }, {
    key: "isProjectNoteCommentUpdatedEvent",
    value: function isProjectNoteCommentUpdatedEvent(data) {
      return Webhooks.isProjectNoteCommentEvent(data) && data.action === "updated";
    }
  }, {
    key: "isProjectColorEvent",
    value: function isProjectColorEvent(data) {
      return data.event === "project.color";
    }
  }, {
    key: "isProjectColorCreatedEvent",
    value: function isProjectColorCreatedEvent(data) {
      return Webhooks.isProjectColorEvent(data) && data.action === "created";
    }
  }, {
    key: "isProjectColorDeletedEvent",
    value: function isProjectColorDeletedEvent(data) {
      return Webhooks.isProjectColorEvent(data) && data.action === "deleted";
    }
  }, {
    key: "isProjectColorUpdatedEvent",
    value: function isProjectColorUpdatedEvent(data) {
      return Webhooks.isProjectColorEvent(data) && data.action === "updated";
    }
  }, {
    key: "isProjectFlowBoardEvent",
    value: function isProjectFlowBoardEvent(data) {
      return data.event === "project.flow_board";
    }
  }, {
    key: "isProjectFlowBoardBuiltEvent",
    value: function isProjectFlowBoardBuiltEvent(data) {
      return Webhooks.isProjectFlowBoardEvent(data) && data.action === "built";
    }
  }, {
    key: "isProjectTextStyleEvent",
    value: function isProjectTextStyleEvent(data) {
      return data.event === "project.text_style";
    }
  }, {
    key: "isProjectTextStyleCreatedEvent",
    value: function isProjectTextStyleCreatedEvent(data) {
      return Webhooks.isProjectTextStyleEvent(data) && data.action === "created";
    }
  }, {
    key: "isProjectTextStyleDeletedEvent",
    value: function isProjectTextStyleDeletedEvent(data) {
      return Webhooks.isProjectTextStyleEvent(data) && data.action === "deleted";
    }
  }, {
    key: "isProjectTextStyleUpdatedEvent",
    value: function isProjectTextStyleUpdatedEvent(data) {
      return Webhooks.isProjectTextStyleEvent(data) && data.action === "updated";
    }
  }, {
    key: "isProjectComponentEvent",
    value: function isProjectComponentEvent(data) {
      return data.event === "project.component";
    }
  }, {
    key: "isProjectComponentCreatedEvent",
    value: function isProjectComponentCreatedEvent(data) {
      return Webhooks.isProjectComponentEvent(data) && data.action === "created";
    }
  }, {
    key: "isProjectComponentDeletedEvent",
    value: function isProjectComponentDeletedEvent(data) {
      return Webhooks.isProjectComponentEvent(data) && data.action === "deleted";
    }
  }, {
    key: "isProjectComponentUpdatedEvent",
    value: function isProjectComponentUpdatedEvent(data) {
      return Webhooks.isProjectComponentEvent(data) && data.action === "updated";
    }
  }, {
    key: "isProjectComponentVersionCreatedEvent",
    value: function isProjectComponentVersionCreatedEvent(data) {
      return Webhooks.isProjectComponentEvent(data) && data.action === "version_created";
    }
  }, {
    key: "isProjectSpacingTokenEvent",
    value: function isProjectSpacingTokenEvent(data) {
      return data.event === "project.spacing_token";
    }
  }, {
    key: "isProjectSpacingTokenCreatedEvent",
    value: function isProjectSpacingTokenCreatedEvent(data) {
      return Webhooks.isProjectSpacingTokenEvent(data) && data.action === "created";
    }
  }, {
    key: "isProjectSpacingTokenDeletedEvent",
    value: function isProjectSpacingTokenDeletedEvent(data) {
      return Webhooks.isProjectSpacingTokenEvent(data) && data.action === "deleted";
    }
  }, {
    key: "isProjectSpacingTokenUpdatedEvent",
    value: function isProjectSpacingTokenUpdatedEvent(data) {
      return Webhooks.isProjectSpacingTokenEvent(data) && data.action === "updated";
    }
  }, {
    key: "isStyleguideMemberEvent",
    value: function isStyleguideMemberEvent(data) {
      return data.event === "styleguide.member";
    }
  }, {
    key: "isStyleguideMemberInvitedEvent",
    value: function isStyleguideMemberInvitedEvent(data) {
      return Webhooks.isStyleguideMemberEvent(data) && data.action === "invited";
    }
  }, {
    key: "isStyleguideMemberRemovedEvent",
    value: function isStyleguideMemberRemovedEvent(data) {
      return Webhooks.isStyleguideMemberEvent(data) && data.action === "removed";
    }
  }, {
    key: "isStyleguideMemberRoleUpdatedEvent",
    value: function isStyleguideMemberRoleUpdatedEvent(data) {
      return Webhooks.isStyleguideMemberEvent(data) && data.action === "role_updated";
    }
  }, {
    key: "isStyleguideColorEvent",
    value: function isStyleguideColorEvent(data) {
      return data.event === "styleguide.color";
    }
  }, {
    key: "isStyleguideColorCreatedEvent",
    value: function isStyleguideColorCreatedEvent(data) {
      return Webhooks.isStyleguideColorEvent(data) && data.action === "created";
    }
  }, {
    key: "isStyleguideColorDeletedEvent",
    value: function isStyleguideColorDeletedEvent(data) {
      return Webhooks.isStyleguideColorEvent(data) && data.action === "deleted";
    }
  }, {
    key: "isStyleguideColorUpdatedEvent",
    value: function isStyleguideColorUpdatedEvent(data) {
      return Webhooks.isStyleguideColorEvent(data) && data.action === "updated";
    }
  }, {
    key: "isStyleguideTextStyleEvent",
    value: function isStyleguideTextStyleEvent(data) {
      return data.event === "styleguide.text_style";
    }
  }, {
    key: "isStyleguideTextStyleCreatedEvent",
    value: function isStyleguideTextStyleCreatedEvent(data) {
      return Webhooks.isStyleguideTextStyleEvent(data) && data.action === "created";
    }
  }, {
    key: "isStyleguideTextStyleDeletedEvent",
    value: function isStyleguideTextStyleDeletedEvent(data) {
      return Webhooks.isStyleguideTextStyleEvent(data) && data.action === "deleted";
    }
  }, {
    key: "isStyleguideTextStyleUpdatedEvent",
    value: function isStyleguideTextStyleUpdatedEvent(data) {
      return Webhooks.isStyleguideTextStyleEvent(data) && data.action === "updated";
    }
  }, {
    key: "isStyleguideComponentEvent",
    value: function isStyleguideComponentEvent(data) {
      return data.event === "styleguide.component";
    }
  }, {
    key: "isStyleguideComponentCreatedEvent",
    value: function isStyleguideComponentCreatedEvent(data) {
      return Webhooks.isStyleguideComponentEvent(data) && data.action === "created";
    }
  }, {
    key: "isStyleguideComponentDeletedEvent",
    value: function isStyleguideComponentDeletedEvent(data) {
      return Webhooks.isStyleguideComponentEvent(data) && data.action === "deleted";
    }
  }, {
    key: "isStyleguideComponentUpdatedEvent",
    value: function isStyleguideComponentUpdatedEvent(data) {
      return Webhooks.isStyleguideComponentEvent(data) && data.action === "updated";
    }
  }, {
    key: "isStyleguideComponentVersionCreatedEvent",
    value: function isStyleguideComponentVersionCreatedEvent(data) {
      return Webhooks.isStyleguideComponentEvent(data) && data.action === "version_created";
    }
  }, {
    key: "isStyleguideSpacingTokenEvent",
    value: function isStyleguideSpacingTokenEvent(data) {
      return data.event === "styleguide.spacing_token";
    }
  }, {
    key: "isStyleguideSpacingTokenCreatedEvent",
    value: function isStyleguideSpacingTokenCreatedEvent(data) {
      return Webhooks.isStyleguideSpacingTokenEvent(data) && data.action === "created";
    }
  }, {
    key: "isStyleguideSpacingTokenDeletedEvent",
    value: function isStyleguideSpacingTokenDeletedEvent(data) {
      return Webhooks.isStyleguideSpacingTokenEvent(data) && data.action === "deleted";
    }
  }, {
    key: "isStyleguideSpacingTokenUpdatedEvent",
    value: function isStyleguideSpacingTokenUpdatedEvent(data) {
      return Webhooks.isStyleguideSpacingTokenEvent(data) && data.action === "updated";
    }
  }]);

  return Webhooks;
}();

exports.Webhooks = Webhooks;