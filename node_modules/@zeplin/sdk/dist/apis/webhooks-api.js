"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

require("core-js/modules/es.object.define-property.js");

require("core-js/modules/es.object.keys.js");

require("core-js/modules/es.symbol.js");

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptor.js");

require("core-js/modules/es.array.for-each.js");

require("core-js/modules/web.dom-collections.for-each.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

require("core-js/modules/es.object.define-properties.js");

require("core-js/modules/es.object.set-prototype-of.js");

require("core-js/modules/es.object.get-prototype-of.js");

require("core-js/modules/es.reflect.construct.js");

require("core-js/modules/es.object.create.js");

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.symbol.iterator.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WebhooksApiFp = exports.WebhooksApiAxiosParamCreator = exports.WebhooksApi = void 0;

require("regenerator-runtime/runtime.js");

require("core-js/modules/es.regexp.exec.js");

require("core-js/modules/es.string.replace.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.object.to-string.js");

require("core-js/modules/es.string.iterator.js");

require("core-js/modules/web.dom-collections.iterator.js");

require("core-js/modules/web.url.js");

require("core-js/modules/es.array.map.js");

require("core-js/modules/es.promise.js");

var _axios = _interopRequireDefault(require("axios"));

var _common = require("../common");

var _base = require("../base");

var _models = require("../models");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/**
 * WebhooksApi - axios parameter creator
 * @export
 */
var WebhooksApiAxiosParamCreator = function WebhooksApiAxiosParamCreator(configuration) {
  return {
    /**
     * Create a webhook for the organization  Wildcard `\"*\"` can be used for `project_ids` and `styleguide_ids` to receive events for all projects and styleguides that you own. You\'ll also automatically subscribe to the new ones you create in the future.  Note: Users that have authorized the app before webhooks release must re-authorize the app to create webhooks. 
     * @summary Create organization webhooks
     * @param {string} organizationId Organization id
     * @param {OrganizationWebhookCreateBody} organizationWebhookCreateBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrganizationWebhooks: function () {
      var _createOrganizationWebhooks = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(organizationId, organizationWebhookCreateBody) {
        var options,
            localVarPath,
            localVarUrlObj,
            baseOptions,
            localVarRequestOptions,
            localVarHeaderParameter,
            localVarQueryParameter,
            headersFromBaseOptions,
            _args = arguments;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};
                // verify required parameter 'organizationId' is not null or undefined
                (0, _common.assertParamExists)('createOrganizationWebhooks', 'organizationId', organizationId); // verify required parameter 'organizationWebhookCreateBody' is not null or undefined

                (0, _common.assertParamExists)('createOrganizationWebhooks', 'organizationWebhookCreateBody', organizationWebhookCreateBody);
                localVarPath = "/v1/organizations/{organization_id}/webhooks".replace("{".concat("organization_id", "}"), encodeURIComponent(String(organizationId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

                localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);

                if (configuration) {
                  baseOptions = configuration.baseOptions;
                }

                localVarRequestOptions = _objectSpread(_objectSpread({
                  method: 'POST'
                }, baseOptions), options);
                localVarHeaderParameter = {};
                localVarQueryParameter = {}; // authentication OAuth2 required
                // oauth required

                _context.next = 11;
                return (0, _common.setOAuthToObject)(localVarHeaderParameter, "OAuth2", [], configuration);

              case 11:
                _context.next = 13;
                return (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);

              case 13:
                localVarHeaderParameter['Content-Type'] = 'application/json';
                (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                localVarRequestOptions.data = (0, _common.serializeDataIfNeeded)((0, _models.transformOrganizationWebhookCreateBodyToJSON)(organizationWebhookCreateBody), localVarRequestOptions, configuration);
                return _context.abrupt("return", {
                  url: (0, _common.toPathString)(localVarUrlObj),
                  options: localVarRequestOptions
                });

              case 19:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function createOrganizationWebhooks(_x, _x2) {
        return _createOrganizationWebhooks.apply(this, arguments);
      }

      return createOrganizationWebhooks;
    }(),

    /**
     * Create a webhook for the project  Note: Users that have authorized the app before webhooks release must re-authorize the app to create webhooks. 
     * @summary Create project webhooks
     * @param {string} projectId Project id
     * @param {ProjectWebhookCreateBody} projectWebhookCreateBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProjectWebhooks: function () {
      var _createProjectWebhooks = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(projectId, projectWebhookCreateBody) {
        var options,
            localVarPath,
            localVarUrlObj,
            baseOptions,
            localVarRequestOptions,
            localVarHeaderParameter,
            localVarQueryParameter,
            headersFromBaseOptions,
            _args2 = arguments;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                options = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : {};
                // verify required parameter 'projectId' is not null or undefined
                (0, _common.assertParamExists)('createProjectWebhooks', 'projectId', projectId); // verify required parameter 'projectWebhookCreateBody' is not null or undefined

                (0, _common.assertParamExists)('createProjectWebhooks', 'projectWebhookCreateBody', projectWebhookCreateBody);
                localVarPath = "/v1/projects/{project_id}/webhooks".replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

                localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);

                if (configuration) {
                  baseOptions = configuration.baseOptions;
                }

                localVarRequestOptions = _objectSpread(_objectSpread({
                  method: 'POST'
                }, baseOptions), options);
                localVarHeaderParameter = {};
                localVarQueryParameter = {}; // authentication OAuth2 required
                // oauth required

                _context2.next = 11;
                return (0, _common.setOAuthToObject)(localVarHeaderParameter, "OAuth2", [], configuration);

              case 11:
                _context2.next = 13;
                return (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);

              case 13:
                localVarHeaderParameter['Content-Type'] = 'application/json';
                (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                localVarRequestOptions.data = (0, _common.serializeDataIfNeeded)((0, _models.transformProjectWebhookCreateBodyToJSON)(projectWebhookCreateBody), localVarRequestOptions, configuration);
                return _context2.abrupt("return", {
                  url: (0, _common.toPathString)(localVarUrlObj),
                  options: localVarRequestOptions
                });

              case 19:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      function createProjectWebhooks(_x3, _x4) {
        return _createProjectWebhooks.apply(this, arguments);
      }

      return createProjectWebhooks;
    }(),

    /**
     * Create a webhook for the styleguide  Note: Users that have authorized the app before webhooks release must re-authorize the app to create webhooks. 
     * @summary Create styleguide webhooks
     * @param {string} styleguideId Styleguide id
     * @param {StyleguideWebhookCreateBody} styleguideWebhookCreateBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createStyleguideWebhooks: function () {
      var _createStyleguideWebhooks = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(styleguideId, styleguideWebhookCreateBody) {
        var options,
            localVarPath,
            localVarUrlObj,
            baseOptions,
            localVarRequestOptions,
            localVarHeaderParameter,
            localVarQueryParameter,
            headersFromBaseOptions,
            _args3 = arguments;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                options = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : {};
                // verify required parameter 'styleguideId' is not null or undefined
                (0, _common.assertParamExists)('createStyleguideWebhooks', 'styleguideId', styleguideId); // verify required parameter 'styleguideWebhookCreateBody' is not null or undefined

                (0, _common.assertParamExists)('createStyleguideWebhooks', 'styleguideWebhookCreateBody', styleguideWebhookCreateBody);
                localVarPath = "/v1/styleguides/{styleguide_id}/webhooks".replace("{".concat("styleguide_id", "}"), encodeURIComponent(String(styleguideId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

                localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);

                if (configuration) {
                  baseOptions = configuration.baseOptions;
                }

                localVarRequestOptions = _objectSpread(_objectSpread({
                  method: 'POST'
                }, baseOptions), options);
                localVarHeaderParameter = {};
                localVarQueryParameter = {}; // authentication OAuth2 required
                // oauth required

                _context3.next = 11;
                return (0, _common.setOAuthToObject)(localVarHeaderParameter, "OAuth2", [], configuration);

              case 11:
                _context3.next = 13;
                return (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);

              case 13:
                localVarHeaderParameter['Content-Type'] = 'application/json';
                (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                localVarRequestOptions.data = (0, _common.serializeDataIfNeeded)((0, _models.transformStyleguideWebhookCreateBodyToJSON)(styleguideWebhookCreateBody), localVarRequestOptions, configuration);
                return _context3.abrupt("return", {
                  url: (0, _common.toPathString)(localVarUrlObj),
                  options: localVarRequestOptions
                });

              case 19:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      function createStyleguideWebhooks(_x5, _x6) {
        return _createStyleguideWebhooks.apply(this, arguments);
      }

      return createStyleguideWebhooks;
    }(),

    /**
     * Create a webhook for the user  Wildcard `\"*\"` can be used for `project_ids` and `styleguide_ids` to receive events for all projects and styleguides that you own. You\'ll also automatically subscribe to the new ones you create in the future.  Note: Users that have authorized the app before webhooks release must re-authorize the app to create webhooks. 
     * @summary Create user webhooks
     * @param {UserWebhookCreateBody} userWebhookCreateBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserWebhooks: function () {
      var _createUserWebhooks = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(userWebhookCreateBody) {
        var options,
            localVarPath,
            localVarUrlObj,
            baseOptions,
            localVarRequestOptions,
            localVarHeaderParameter,
            localVarQueryParameter,
            headersFromBaseOptions,
            _args4 = arguments;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                options = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {};
                // verify required parameter 'userWebhookCreateBody' is not null or undefined
                (0, _common.assertParamExists)('createUserWebhooks', 'userWebhookCreateBody', userWebhookCreateBody);
                localVarPath = "/v1/users/me/webhooks"; // use dummy base URL string because the URL constructor only accepts absolute URLs.

                localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);

                if (configuration) {
                  baseOptions = configuration.baseOptions;
                }

                localVarRequestOptions = _objectSpread(_objectSpread({
                  method: 'POST'
                }, baseOptions), options);
                localVarHeaderParameter = {};
                localVarQueryParameter = {}; // authentication OAuth2 required
                // oauth required

                _context4.next = 10;
                return (0, _common.setOAuthToObject)(localVarHeaderParameter, "OAuth2", [], configuration);

              case 10:
                _context4.next = 12;
                return (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);

              case 12:
                localVarHeaderParameter['Content-Type'] = 'application/json';
                (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                localVarRequestOptions.data = (0, _common.serializeDataIfNeeded)((0, _models.transformUserWebhookCreateBodyToJSON)(userWebhookCreateBody), localVarRequestOptions, configuration);
                return _context4.abrupt("return", {
                  url: (0, _common.toPathString)(localVarUrlObj),
                  options: localVarRequestOptions
                });

              case 18:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      function createUserWebhooks(_x7) {
        return _createUserWebhooks.apply(this, arguments);
      }

      return createUserWebhooks;
    }(),

    /**
     * Delete a webhook by id
     * @summary Delete a webhook of an organization
     * @param {string} organizationId Organization id
     * @param {string} webhookId Webhook id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrganizationWebhook: function () {
      var _deleteOrganizationWebhook = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(organizationId, webhookId) {
        var options,
            localVarPath,
            localVarUrlObj,
            baseOptions,
            localVarRequestOptions,
            localVarHeaderParameter,
            localVarQueryParameter,
            headersFromBaseOptions,
            _args5 = arguments;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                options = _args5.length > 2 && _args5[2] !== undefined ? _args5[2] : {};
                // verify required parameter 'organizationId' is not null or undefined
                (0, _common.assertParamExists)('deleteOrganizationWebhook', 'organizationId', organizationId); // verify required parameter 'webhookId' is not null or undefined

                (0, _common.assertParamExists)('deleteOrganizationWebhook', 'webhookId', webhookId);
                localVarPath = "/v1/organizations/{organization_id}/webhooks/{webhook_id}".replace("{".concat("organization_id", "}"), encodeURIComponent(String(organizationId))).replace("{".concat("webhook_id", "}"), encodeURIComponent(String(webhookId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

                localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);

                if (configuration) {
                  baseOptions = configuration.baseOptions;
                }

                localVarRequestOptions = _objectSpread(_objectSpread({
                  method: 'DELETE'
                }, baseOptions), options);
                localVarHeaderParameter = {};
                localVarQueryParameter = {}; // authentication OAuth2 required
                // oauth required

                _context5.next = 11;
                return (0, _common.setOAuthToObject)(localVarHeaderParameter, "OAuth2", [], configuration);

              case 11:
                _context5.next = 13;
                return (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);

              case 13:
                (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                return _context5.abrupt("return", {
                  url: (0, _common.toPathString)(localVarUrlObj),
                  options: localVarRequestOptions
                });

              case 17:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }));

      function deleteOrganizationWebhook(_x8, _x9) {
        return _deleteOrganizationWebhook.apply(this, arguments);
      }

      return deleteOrganizationWebhook;
    }(),

    /**
     * Delete a webhook by id
     * @summary Delete a webhook of a project
     * @param {string} projectId Project id
     * @param {string} webhookId Webhook id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProjectWebhook: function () {
      var _deleteProjectWebhook = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(projectId, webhookId) {
        var options,
            localVarPath,
            localVarUrlObj,
            baseOptions,
            localVarRequestOptions,
            localVarHeaderParameter,
            localVarQueryParameter,
            headersFromBaseOptions,
            _args6 = arguments;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                options = _args6.length > 2 && _args6[2] !== undefined ? _args6[2] : {};
                // verify required parameter 'projectId' is not null or undefined
                (0, _common.assertParamExists)('deleteProjectWebhook', 'projectId', projectId); // verify required parameter 'webhookId' is not null or undefined

                (0, _common.assertParamExists)('deleteProjectWebhook', 'webhookId', webhookId);
                localVarPath = "/v1/projects/{project_id}/webhooks/{webhook_id}".replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId))).replace("{".concat("webhook_id", "}"), encodeURIComponent(String(webhookId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

                localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);

                if (configuration) {
                  baseOptions = configuration.baseOptions;
                }

                localVarRequestOptions = _objectSpread(_objectSpread({
                  method: 'DELETE'
                }, baseOptions), options);
                localVarHeaderParameter = {};
                localVarQueryParameter = {}; // authentication OAuth2 required
                // oauth required

                _context6.next = 11;
                return (0, _common.setOAuthToObject)(localVarHeaderParameter, "OAuth2", [], configuration);

              case 11:
                _context6.next = 13;
                return (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);

              case 13:
                (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                return _context6.abrupt("return", {
                  url: (0, _common.toPathString)(localVarUrlObj),
                  options: localVarRequestOptions
                });

              case 17:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }));

      function deleteProjectWebhook(_x10, _x11) {
        return _deleteProjectWebhook.apply(this, arguments);
      }

      return deleteProjectWebhook;
    }(),

    /**
     * Delete a webhook by id
     * @summary Delete a webhook of a styleguide
     * @param {string} styleguideId Styleguide id
     * @param {string} webhookId Webhook id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteStyleguideWebhook: function () {
      var _deleteStyleguideWebhook = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(styleguideId, webhookId) {
        var options,
            localVarPath,
            localVarUrlObj,
            baseOptions,
            localVarRequestOptions,
            localVarHeaderParameter,
            localVarQueryParameter,
            headersFromBaseOptions,
            _args7 = arguments;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                options = _args7.length > 2 && _args7[2] !== undefined ? _args7[2] : {};
                // verify required parameter 'styleguideId' is not null or undefined
                (0, _common.assertParamExists)('deleteStyleguideWebhook', 'styleguideId', styleguideId); // verify required parameter 'webhookId' is not null or undefined

                (0, _common.assertParamExists)('deleteStyleguideWebhook', 'webhookId', webhookId);
                localVarPath = "/v1/styleguides/{styleguide_id}/webhooks/{webhook_id}".replace("{".concat("styleguide_id", "}"), encodeURIComponent(String(styleguideId))).replace("{".concat("webhook_id", "}"), encodeURIComponent(String(webhookId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

                localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);

                if (configuration) {
                  baseOptions = configuration.baseOptions;
                }

                localVarRequestOptions = _objectSpread(_objectSpread({
                  method: 'DELETE'
                }, baseOptions), options);
                localVarHeaderParameter = {};
                localVarQueryParameter = {}; // authentication OAuth2 required
                // oauth required

                _context7.next = 11;
                return (0, _common.setOAuthToObject)(localVarHeaderParameter, "OAuth2", [], configuration);

              case 11:
                _context7.next = 13;
                return (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);

              case 13:
                (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                return _context7.abrupt("return", {
                  url: (0, _common.toPathString)(localVarUrlObj),
                  options: localVarRequestOptions
                });

              case 17:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7);
      }));

      function deleteStyleguideWebhook(_x12, _x13) {
        return _deleteStyleguideWebhook.apply(this, arguments);
      }

      return deleteStyleguideWebhook;
    }(),

    /**
     * Delete a webhook by id
     * @summary Delete a webhook of a user
     * @param {string} webhookId Webhook id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserWebhook: function () {
      var _deleteUserWebhook = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(webhookId) {
        var options,
            localVarPath,
            localVarUrlObj,
            baseOptions,
            localVarRequestOptions,
            localVarHeaderParameter,
            localVarQueryParameter,
            headersFromBaseOptions,
            _args8 = arguments;
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                options = _args8.length > 1 && _args8[1] !== undefined ? _args8[1] : {};
                // verify required parameter 'webhookId' is not null or undefined
                (0, _common.assertParamExists)('deleteUserWebhook', 'webhookId', webhookId);
                localVarPath = "/v1/users/me/webhooks/{webhook_id}".replace("{".concat("webhook_id", "}"), encodeURIComponent(String(webhookId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

                localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);

                if (configuration) {
                  baseOptions = configuration.baseOptions;
                }

                localVarRequestOptions = _objectSpread(_objectSpread({
                  method: 'DELETE'
                }, baseOptions), options);
                localVarHeaderParameter = {};
                localVarQueryParameter = {}; // authentication OAuth2 required
                // oauth required

                _context8.next = 10;
                return (0, _common.setOAuthToObject)(localVarHeaderParameter, "OAuth2", [], configuration);

              case 10:
                _context8.next = 12;
                return (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);

              case 12:
                (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                return _context8.abrupt("return", {
                  url: (0, _common.toPathString)(localVarUrlObj),
                  options: localVarRequestOptions
                });

              case 16:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8);
      }));

      function deleteUserWebhook(_x14) {
        return _deleteUserWebhook.apply(this, arguments);
      }

      return deleteUserWebhook;
    }(),

    /**
     * Get a webhook by id
     * @summary Get a webhook of organization
     * @param {string} organizationId Organization id
     * @param {string} webhookId Webhook id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationWebhook: function () {
      var _getOrganizationWebhook = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(organizationId, webhookId) {
        var options,
            localVarPath,
            localVarUrlObj,
            baseOptions,
            localVarRequestOptions,
            localVarHeaderParameter,
            localVarQueryParameter,
            headersFromBaseOptions,
            _args9 = arguments;
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                options = _args9.length > 2 && _args9[2] !== undefined ? _args9[2] : {};
                // verify required parameter 'organizationId' is not null or undefined
                (0, _common.assertParamExists)('getOrganizationWebhook', 'organizationId', organizationId); // verify required parameter 'webhookId' is not null or undefined

                (0, _common.assertParamExists)('getOrganizationWebhook', 'webhookId', webhookId);
                localVarPath = "/v1/organizations/{organization_id}/webhooks/{webhook_id}".replace("{".concat("organization_id", "}"), encodeURIComponent(String(organizationId))).replace("{".concat("webhook_id", "}"), encodeURIComponent(String(webhookId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

                localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);

                if (configuration) {
                  baseOptions = configuration.baseOptions;
                }

                localVarRequestOptions = _objectSpread(_objectSpread({
                  method: 'GET'
                }, baseOptions), options);
                localVarHeaderParameter = {};
                localVarQueryParameter = {}; // authentication OAuth2 required
                // oauth required

                _context9.next = 11;
                return (0, _common.setOAuthToObject)(localVarHeaderParameter, "OAuth2", [], configuration);

              case 11:
                _context9.next = 13;
                return (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);

              case 13:
                (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                return _context9.abrupt("return", {
                  url: (0, _common.toPathString)(localVarUrlObj),
                  options: localVarRequestOptions
                });

              case 17:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9);
      }));

      function getOrganizationWebhook(_x15, _x16) {
        return _getOrganizationWebhook.apply(this, arguments);
      }

      return getOrganizationWebhook;
    }(),

    /**
     * List all webhooks of organization  Note: Zeplin apps can only list the webhook that are created by them. To list all webhooks created by any app or without app, personal access token is needed. 
     * @summary Get organization webhooks
     * @param {string} organizationId Organization id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {WebhookStatusEnum} [status] Filter by webhook status
     * @param {WebhookHealthEnum} [urlHealth] Filter by health of webhook\&#39;s URL
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationWebhooks: function () {
      var _getOrganizationWebhooks = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(organizationId, limit, offset, status, urlHealth) {
        var options,
            localVarPath,
            localVarUrlObj,
            baseOptions,
            localVarRequestOptions,
            localVarHeaderParameter,
            localVarQueryParameter,
            headersFromBaseOptions,
            _args10 = arguments;
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                options = _args10.length > 5 && _args10[5] !== undefined ? _args10[5] : {};
                // verify required parameter 'organizationId' is not null or undefined
                (0, _common.assertParamExists)('getOrganizationWebhooks', 'organizationId', organizationId);
                localVarPath = "/v1/organizations/{organization_id}/webhooks".replace("{".concat("organization_id", "}"), encodeURIComponent(String(organizationId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

                localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);

                if (configuration) {
                  baseOptions = configuration.baseOptions;
                }

                localVarRequestOptions = _objectSpread(_objectSpread({
                  method: 'GET'
                }, baseOptions), options);
                localVarHeaderParameter = {};
                localVarQueryParameter = {}; // authentication OAuth2 required
                // oauth required

                _context10.next = 10;
                return (0, _common.setOAuthToObject)(localVarHeaderParameter, "OAuth2", [], configuration);

              case 10:
                _context10.next = 12;
                return (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);

              case 12:
                if (limit !== undefined) {
                  localVarQueryParameter['limit'] = limit;
                }

                if (offset !== undefined) {
                  localVarQueryParameter['offset'] = offset;
                }

                if (status !== undefined) {
                  localVarQueryParameter['status'] = status;
                }

                if (urlHealth !== undefined) {
                  localVarQueryParameter['url_health'] = urlHealth;
                }

                (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                return _context10.abrupt("return", {
                  url: (0, _common.toPathString)(localVarUrlObj),
                  options: localVarRequestOptions
                });

              case 20:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10);
      }));

      function getOrganizationWebhooks(_x17, _x18, _x19, _x20, _x21) {
        return _getOrganizationWebhooks.apply(this, arguments);
      }

      return getOrganizationWebhooks;
    }(),

    /**
     * Get a webhook by id
     * @summary Get a webhook of project
     * @param {string} projectId Project id
     * @param {string} webhookId Webhook id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectWebhook: function () {
      var _getProjectWebhook = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(projectId, webhookId) {
        var options,
            localVarPath,
            localVarUrlObj,
            baseOptions,
            localVarRequestOptions,
            localVarHeaderParameter,
            localVarQueryParameter,
            headersFromBaseOptions,
            _args11 = arguments;
        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                options = _args11.length > 2 && _args11[2] !== undefined ? _args11[2] : {};
                // verify required parameter 'projectId' is not null or undefined
                (0, _common.assertParamExists)('getProjectWebhook', 'projectId', projectId); // verify required parameter 'webhookId' is not null or undefined

                (0, _common.assertParamExists)('getProjectWebhook', 'webhookId', webhookId);
                localVarPath = "/v1/projects/{project_id}/webhooks/{webhook_id}".replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId))).replace("{".concat("webhook_id", "}"), encodeURIComponent(String(webhookId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

                localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);

                if (configuration) {
                  baseOptions = configuration.baseOptions;
                }

                localVarRequestOptions = _objectSpread(_objectSpread({
                  method: 'GET'
                }, baseOptions), options);
                localVarHeaderParameter = {};
                localVarQueryParameter = {}; // authentication OAuth2 required
                // oauth required

                _context11.next = 11;
                return (0, _common.setOAuthToObject)(localVarHeaderParameter, "OAuth2", [], configuration);

              case 11:
                _context11.next = 13;
                return (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);

              case 13:
                (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                return _context11.abrupt("return", {
                  url: (0, _common.toPathString)(localVarUrlObj),
                  options: localVarRequestOptions
                });

              case 17:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11);
      }));

      function getProjectWebhook(_x22, _x23) {
        return _getProjectWebhook.apply(this, arguments);
      }

      return getProjectWebhook;
    }(),

    /**
     * List all webhooks of the project  Note: Zeplin apps can only list the webhook that are created by them. To list all webhooks created by any app or without app, personal access token is needed. 
     * @summary Get project webhooks
     * @param {string} projectId Project id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {WebhookStatusEnum} [status] Filter by webhook status
     * @param {WebhookHealthEnum} [urlHealth] Filter by health of webhook\&#39;s URL
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectWebhooks: function () {
      var _getProjectWebhooks = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(projectId, limit, offset, status, urlHealth) {
        var options,
            localVarPath,
            localVarUrlObj,
            baseOptions,
            localVarRequestOptions,
            localVarHeaderParameter,
            localVarQueryParameter,
            headersFromBaseOptions,
            _args12 = arguments;
        return regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                options = _args12.length > 5 && _args12[5] !== undefined ? _args12[5] : {};
                // verify required parameter 'projectId' is not null or undefined
                (0, _common.assertParamExists)('getProjectWebhooks', 'projectId', projectId);
                localVarPath = "/v1/projects/{project_id}/webhooks".replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

                localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);

                if (configuration) {
                  baseOptions = configuration.baseOptions;
                }

                localVarRequestOptions = _objectSpread(_objectSpread({
                  method: 'GET'
                }, baseOptions), options);
                localVarHeaderParameter = {};
                localVarQueryParameter = {}; // authentication OAuth2 required
                // oauth required

                _context12.next = 10;
                return (0, _common.setOAuthToObject)(localVarHeaderParameter, "OAuth2", [], configuration);

              case 10:
                _context12.next = 12;
                return (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);

              case 12:
                if (limit !== undefined) {
                  localVarQueryParameter['limit'] = limit;
                }

                if (offset !== undefined) {
                  localVarQueryParameter['offset'] = offset;
                }

                if (status !== undefined) {
                  localVarQueryParameter['status'] = status;
                }

                if (urlHealth !== undefined) {
                  localVarQueryParameter['url_health'] = urlHealth;
                }

                (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                return _context12.abrupt("return", {
                  url: (0, _common.toPathString)(localVarUrlObj),
                  options: localVarRequestOptions
                });

              case 20:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12);
      }));

      function getProjectWebhooks(_x24, _x25, _x26, _x27, _x28) {
        return _getProjectWebhooks.apply(this, arguments);
      }

      return getProjectWebhooks;
    }(),

    /**
     * Get a webhook by id
     * @summary Get a webhook of styleguide
     * @param {string} styleguideId Styleguide id
     * @param {string} webhookId Webhook id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStyleguideWebhook: function () {
      var _getStyleguideWebhook = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(styleguideId, webhookId) {
        var options,
            localVarPath,
            localVarUrlObj,
            baseOptions,
            localVarRequestOptions,
            localVarHeaderParameter,
            localVarQueryParameter,
            headersFromBaseOptions,
            _args13 = arguments;
        return regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                options = _args13.length > 2 && _args13[2] !== undefined ? _args13[2] : {};
                // verify required parameter 'styleguideId' is not null or undefined
                (0, _common.assertParamExists)('getStyleguideWebhook', 'styleguideId', styleguideId); // verify required parameter 'webhookId' is not null or undefined

                (0, _common.assertParamExists)('getStyleguideWebhook', 'webhookId', webhookId);
                localVarPath = "/v1/styleguides/{styleguide_id}/webhooks/{webhook_id}".replace("{".concat("styleguide_id", "}"), encodeURIComponent(String(styleguideId))).replace("{".concat("webhook_id", "}"), encodeURIComponent(String(webhookId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

                localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);

                if (configuration) {
                  baseOptions = configuration.baseOptions;
                }

                localVarRequestOptions = _objectSpread(_objectSpread({
                  method: 'GET'
                }, baseOptions), options);
                localVarHeaderParameter = {};
                localVarQueryParameter = {}; // authentication OAuth2 required
                // oauth required

                _context13.next = 11;
                return (0, _common.setOAuthToObject)(localVarHeaderParameter, "OAuth2", [], configuration);

              case 11:
                _context13.next = 13;
                return (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);

              case 13:
                (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                return _context13.abrupt("return", {
                  url: (0, _common.toPathString)(localVarUrlObj),
                  options: localVarRequestOptions
                });

              case 17:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13);
      }));

      function getStyleguideWebhook(_x29, _x30) {
        return _getStyleguideWebhook.apply(this, arguments);
      }

      return getStyleguideWebhook;
    }(),

    /**
     * List all webhooks of the styleguide  Note: Zeplin apps can only list the webhook that are created by them. To list all webhooks created by any app or without app, personal access token is needed. 
     * @summary Get styleguide webhooks
     * @param {string} styleguideId Styleguide id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {WebhookStatusEnum} [status] Filter by webhook status
     * @param {WebhookHealthEnum} [urlHealth] Filter by health of webhook\&#39;s URL
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStyleguideWebhooks: function () {
      var _getStyleguideWebhooks = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(styleguideId, limit, offset, status, urlHealth) {
        var options,
            localVarPath,
            localVarUrlObj,
            baseOptions,
            localVarRequestOptions,
            localVarHeaderParameter,
            localVarQueryParameter,
            headersFromBaseOptions,
            _args14 = arguments;
        return regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                options = _args14.length > 5 && _args14[5] !== undefined ? _args14[5] : {};
                // verify required parameter 'styleguideId' is not null or undefined
                (0, _common.assertParamExists)('getStyleguideWebhooks', 'styleguideId', styleguideId);
                localVarPath = "/v1/styleguides/{styleguide_id}/webhooks".replace("{".concat("styleguide_id", "}"), encodeURIComponent(String(styleguideId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

                localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);

                if (configuration) {
                  baseOptions = configuration.baseOptions;
                }

                localVarRequestOptions = _objectSpread(_objectSpread({
                  method: 'GET'
                }, baseOptions), options);
                localVarHeaderParameter = {};
                localVarQueryParameter = {}; // authentication OAuth2 required
                // oauth required

                _context14.next = 10;
                return (0, _common.setOAuthToObject)(localVarHeaderParameter, "OAuth2", [], configuration);

              case 10:
                _context14.next = 12;
                return (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);

              case 12:
                if (limit !== undefined) {
                  localVarQueryParameter['limit'] = limit;
                }

                if (offset !== undefined) {
                  localVarQueryParameter['offset'] = offset;
                }

                if (status !== undefined) {
                  localVarQueryParameter['status'] = status;
                }

                if (urlHealth !== undefined) {
                  localVarQueryParameter['url_health'] = urlHealth;
                }

                (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                return _context14.abrupt("return", {
                  url: (0, _common.toPathString)(localVarUrlObj),
                  options: localVarRequestOptions
                });

              case 20:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14);
      }));

      function getStyleguideWebhooks(_x31, _x32, _x33, _x34, _x35) {
        return _getStyleguideWebhooks.apply(this, arguments);
      }

      return getStyleguideWebhooks;
    }(),

    /**
     * Get a webhook by id
     * @summary Get a webhook of user
     * @param {string} webhookId Webhook id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserWebhook: function () {
      var _getUserWebhook = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(webhookId) {
        var options,
            localVarPath,
            localVarUrlObj,
            baseOptions,
            localVarRequestOptions,
            localVarHeaderParameter,
            localVarQueryParameter,
            headersFromBaseOptions,
            _args15 = arguments;
        return regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                options = _args15.length > 1 && _args15[1] !== undefined ? _args15[1] : {};
                // verify required parameter 'webhookId' is not null or undefined
                (0, _common.assertParamExists)('getUserWebhook', 'webhookId', webhookId);
                localVarPath = "/v1/users/me/webhooks/{webhook_id}".replace("{".concat("webhook_id", "}"), encodeURIComponent(String(webhookId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

                localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);

                if (configuration) {
                  baseOptions = configuration.baseOptions;
                }

                localVarRequestOptions = _objectSpread(_objectSpread({
                  method: 'GET'
                }, baseOptions), options);
                localVarHeaderParameter = {};
                localVarQueryParameter = {}; // authentication OAuth2 required
                // oauth required

                _context15.next = 10;
                return (0, _common.setOAuthToObject)(localVarHeaderParameter, "OAuth2", [], configuration);

              case 10:
                _context15.next = 12;
                return (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);

              case 12:
                (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                return _context15.abrupt("return", {
                  url: (0, _common.toPathString)(localVarUrlObj),
                  options: localVarRequestOptions
                });

              case 16:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15);
      }));

      function getUserWebhook(_x36) {
        return _getUserWebhook.apply(this, arguments);
      }

      return getUserWebhook;
    }(),

    /**
     * List all webhooks of the user  Note: Zeplin apps can only list the webhook that are created by them. To list all webhooks created by any app or without app, personal access token is needed. 
     * @summary Get user webhooks
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {WebhookStatusEnum} [status] Filter by webhook status
     * @param {WebhookHealthEnum} [urlHealth] Filter by health of webhook\&#39;s URL
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserWebhooks: function () {
      var _getUserWebhooks = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16(limit, offset, status, urlHealth) {
        var options,
            localVarPath,
            localVarUrlObj,
            baseOptions,
            localVarRequestOptions,
            localVarHeaderParameter,
            localVarQueryParameter,
            headersFromBaseOptions,
            _args16 = arguments;
        return regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                options = _args16.length > 4 && _args16[4] !== undefined ? _args16[4] : {};
                localVarPath = "/v1/users/me/webhooks"; // use dummy base URL string because the URL constructor only accepts absolute URLs.

                localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);

                if (configuration) {
                  baseOptions = configuration.baseOptions;
                }

                localVarRequestOptions = _objectSpread(_objectSpread({
                  method: 'GET'
                }, baseOptions), options);
                localVarHeaderParameter = {};
                localVarQueryParameter = {}; // authentication OAuth2 required
                // oauth required

                _context16.next = 9;
                return (0, _common.setOAuthToObject)(localVarHeaderParameter, "OAuth2", [], configuration);

              case 9:
                _context16.next = 11;
                return (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);

              case 11:
                if (limit !== undefined) {
                  localVarQueryParameter['limit'] = limit;
                }

                if (offset !== undefined) {
                  localVarQueryParameter['offset'] = offset;
                }

                if (status !== undefined) {
                  localVarQueryParameter['status'] = status;
                }

                if (urlHealth !== undefined) {
                  localVarQueryParameter['url_health'] = urlHealth;
                }

                (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                return _context16.abrupt("return", {
                  url: (0, _common.toPathString)(localVarUrlObj),
                  options: localVarRequestOptions
                });

              case 19:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16);
      }));

      function getUserWebhooks(_x37, _x38, _x39, _x40) {
        return _getUserWebhooks.apply(this, arguments);
      }

      return getUserWebhooks;
    }(),

    /**
     * Update a webhook for the organization
     * @summary Update organization webhooks
     * @param {string} organizationId Organization id
     * @param {string} webhookId Webhook id
     * @param {OrganizationWebhookUpdateBody} organizationWebhookUpdateBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrganizationWebhooks: function () {
      var _updateOrganizationWebhooks = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17(organizationId, webhookId, organizationWebhookUpdateBody) {
        var options,
            localVarPath,
            localVarUrlObj,
            baseOptions,
            localVarRequestOptions,
            localVarHeaderParameter,
            localVarQueryParameter,
            headersFromBaseOptions,
            _args17 = arguments;
        return regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                options = _args17.length > 3 && _args17[3] !== undefined ? _args17[3] : {};
                // verify required parameter 'organizationId' is not null or undefined
                (0, _common.assertParamExists)('updateOrganizationWebhooks', 'organizationId', organizationId); // verify required parameter 'webhookId' is not null or undefined

                (0, _common.assertParamExists)('updateOrganizationWebhooks', 'webhookId', webhookId); // verify required parameter 'organizationWebhookUpdateBody' is not null or undefined

                (0, _common.assertParamExists)('updateOrganizationWebhooks', 'organizationWebhookUpdateBody', organizationWebhookUpdateBody);
                localVarPath = "/v1/organizations/{organization_id}/webhooks/{webhook_id}".replace("{".concat("organization_id", "}"), encodeURIComponent(String(organizationId))).replace("{".concat("webhook_id", "}"), encodeURIComponent(String(webhookId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

                localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);

                if (configuration) {
                  baseOptions = configuration.baseOptions;
                }

                localVarRequestOptions = _objectSpread(_objectSpread({
                  method: 'PATCH'
                }, baseOptions), options);
                localVarHeaderParameter = {};
                localVarQueryParameter = {}; // authentication OAuth2 required
                // oauth required

                _context17.next = 12;
                return (0, _common.setOAuthToObject)(localVarHeaderParameter, "OAuth2", [], configuration);

              case 12:
                _context17.next = 14;
                return (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);

              case 14:
                localVarHeaderParameter['Content-Type'] = 'application/json';
                (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                localVarRequestOptions.data = (0, _common.serializeDataIfNeeded)((0, _models.transformOrganizationWebhookUpdateBodyToJSON)(organizationWebhookUpdateBody), localVarRequestOptions, configuration);
                return _context17.abrupt("return", {
                  url: (0, _common.toPathString)(localVarUrlObj),
                  options: localVarRequestOptions
                });

              case 20:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee17);
      }));

      function updateOrganizationWebhooks(_x41, _x42, _x43) {
        return _updateOrganizationWebhooks.apply(this, arguments);
      }

      return updateOrganizationWebhooks;
    }(),

    /**
     * Update a webhook for the project
     * @summary Update project webhooks
     * @param {string} projectId Project id
     * @param {string} webhookId Webhook id
     * @param {ProjectWebhookUpdateBody} projectWebhookUpdateBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProjectWebhooks: function () {
      var _updateProjectWebhooks = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18(projectId, webhookId, projectWebhookUpdateBody) {
        var options,
            localVarPath,
            localVarUrlObj,
            baseOptions,
            localVarRequestOptions,
            localVarHeaderParameter,
            localVarQueryParameter,
            headersFromBaseOptions,
            _args18 = arguments;
        return regeneratorRuntime.wrap(function _callee18$(_context18) {
          while (1) {
            switch (_context18.prev = _context18.next) {
              case 0:
                options = _args18.length > 3 && _args18[3] !== undefined ? _args18[3] : {};
                // verify required parameter 'projectId' is not null or undefined
                (0, _common.assertParamExists)('updateProjectWebhooks', 'projectId', projectId); // verify required parameter 'webhookId' is not null or undefined

                (0, _common.assertParamExists)('updateProjectWebhooks', 'webhookId', webhookId); // verify required parameter 'projectWebhookUpdateBody' is not null or undefined

                (0, _common.assertParamExists)('updateProjectWebhooks', 'projectWebhookUpdateBody', projectWebhookUpdateBody);
                localVarPath = "/v1/projects/{project_id}/webhooks/{webhook_id}".replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId))).replace("{".concat("webhook_id", "}"), encodeURIComponent(String(webhookId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

                localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);

                if (configuration) {
                  baseOptions = configuration.baseOptions;
                }

                localVarRequestOptions = _objectSpread(_objectSpread({
                  method: 'PATCH'
                }, baseOptions), options);
                localVarHeaderParameter = {};
                localVarQueryParameter = {}; // authentication OAuth2 required
                // oauth required

                _context18.next = 12;
                return (0, _common.setOAuthToObject)(localVarHeaderParameter, "OAuth2", [], configuration);

              case 12:
                _context18.next = 14;
                return (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);

              case 14:
                localVarHeaderParameter['Content-Type'] = 'application/json';
                (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                localVarRequestOptions.data = (0, _common.serializeDataIfNeeded)((0, _models.transformProjectWebhookUpdateBodyToJSON)(projectWebhookUpdateBody), localVarRequestOptions, configuration);
                return _context18.abrupt("return", {
                  url: (0, _common.toPathString)(localVarUrlObj),
                  options: localVarRequestOptions
                });

              case 20:
              case "end":
                return _context18.stop();
            }
          }
        }, _callee18);
      }));

      function updateProjectWebhooks(_x44, _x45, _x46) {
        return _updateProjectWebhooks.apply(this, arguments);
      }

      return updateProjectWebhooks;
    }(),

    /**
     * Update a webhook for the styleguide
     * @summary Update styleguide webhooks
     * @param {string} styleguideId Styleguide id
     * @param {string} webhookId Webhook id
     * @param {StyleguideWebhookUpdateBody} styleguideWebhookUpdateBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateStyleguideWebhooks: function () {
      var _updateStyleguideWebhooks = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee19(styleguideId, webhookId, styleguideWebhookUpdateBody) {
        var options,
            localVarPath,
            localVarUrlObj,
            baseOptions,
            localVarRequestOptions,
            localVarHeaderParameter,
            localVarQueryParameter,
            headersFromBaseOptions,
            _args19 = arguments;
        return regeneratorRuntime.wrap(function _callee19$(_context19) {
          while (1) {
            switch (_context19.prev = _context19.next) {
              case 0:
                options = _args19.length > 3 && _args19[3] !== undefined ? _args19[3] : {};
                // verify required parameter 'styleguideId' is not null or undefined
                (0, _common.assertParamExists)('updateStyleguideWebhooks', 'styleguideId', styleguideId); // verify required parameter 'webhookId' is not null or undefined

                (0, _common.assertParamExists)('updateStyleguideWebhooks', 'webhookId', webhookId); // verify required parameter 'styleguideWebhookUpdateBody' is not null or undefined

                (0, _common.assertParamExists)('updateStyleguideWebhooks', 'styleguideWebhookUpdateBody', styleguideWebhookUpdateBody);
                localVarPath = "/v1/styleguides/{styleguide_id}/webhooks/{webhook_id}".replace("{".concat("styleguide_id", "}"), encodeURIComponent(String(styleguideId))).replace("{".concat("webhook_id", "}"), encodeURIComponent(String(webhookId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

                localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);

                if (configuration) {
                  baseOptions = configuration.baseOptions;
                }

                localVarRequestOptions = _objectSpread(_objectSpread({
                  method: 'PATCH'
                }, baseOptions), options);
                localVarHeaderParameter = {};
                localVarQueryParameter = {}; // authentication OAuth2 required
                // oauth required

                _context19.next = 12;
                return (0, _common.setOAuthToObject)(localVarHeaderParameter, "OAuth2", [], configuration);

              case 12:
                _context19.next = 14;
                return (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);

              case 14:
                localVarHeaderParameter['Content-Type'] = 'application/json';
                (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                localVarRequestOptions.data = (0, _common.serializeDataIfNeeded)((0, _models.transformStyleguideWebhookUpdateBodyToJSON)(styleguideWebhookUpdateBody), localVarRequestOptions, configuration);
                return _context19.abrupt("return", {
                  url: (0, _common.toPathString)(localVarUrlObj),
                  options: localVarRequestOptions
                });

              case 20:
              case "end":
                return _context19.stop();
            }
          }
        }, _callee19);
      }));

      function updateStyleguideWebhooks(_x47, _x48, _x49) {
        return _updateStyleguideWebhooks.apply(this, arguments);
      }

      return updateStyleguideWebhooks;
    }(),

    /**
     * Update a webhook for the user
     * @summary Update user webhooks
     * @param {string} webhookId Webhook id
     * @param {UserWebhookUpdateBody} userWebhookUpdateBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserWebhooks: function () {
      var _updateUserWebhooks = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee20(webhookId, userWebhookUpdateBody) {
        var options,
            localVarPath,
            localVarUrlObj,
            baseOptions,
            localVarRequestOptions,
            localVarHeaderParameter,
            localVarQueryParameter,
            headersFromBaseOptions,
            _args20 = arguments;
        return regeneratorRuntime.wrap(function _callee20$(_context20) {
          while (1) {
            switch (_context20.prev = _context20.next) {
              case 0:
                options = _args20.length > 2 && _args20[2] !== undefined ? _args20[2] : {};
                // verify required parameter 'webhookId' is not null or undefined
                (0, _common.assertParamExists)('updateUserWebhooks', 'webhookId', webhookId); // verify required parameter 'userWebhookUpdateBody' is not null or undefined

                (0, _common.assertParamExists)('updateUserWebhooks', 'userWebhookUpdateBody', userWebhookUpdateBody);
                localVarPath = "/v1/users/me/webhooks/{webhook_id}".replace("{".concat("webhook_id", "}"), encodeURIComponent(String(webhookId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

                localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);

                if (configuration) {
                  baseOptions = configuration.baseOptions;
                }

                localVarRequestOptions = _objectSpread(_objectSpread({
                  method: 'PATCH'
                }, baseOptions), options);
                localVarHeaderParameter = {};
                localVarQueryParameter = {}; // authentication OAuth2 required
                // oauth required

                _context20.next = 11;
                return (0, _common.setOAuthToObject)(localVarHeaderParameter, "OAuth2", [], configuration);

              case 11:
                _context20.next = 13;
                return (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);

              case 13:
                localVarHeaderParameter['Content-Type'] = 'application/json';
                (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                localVarRequestOptions.data = (0, _common.serializeDataIfNeeded)((0, _models.transformUserWebhookUpdateBodyToJSON)(userWebhookUpdateBody), localVarRequestOptions, configuration);
                return _context20.abrupt("return", {
                  url: (0, _common.toPathString)(localVarUrlObj),
                  options: localVarRequestOptions
                });

              case 19:
              case "end":
                return _context20.stop();
            }
          }
        }, _callee20);
      }));

      function updateUserWebhooks(_x50, _x51) {
        return _updateUserWebhooks.apply(this, arguments);
      }

      return updateUserWebhooks;
    }()
  };
};
/**
 * WebhooksApi - functional programming interface
 * @export
 */


exports.WebhooksApiAxiosParamCreator = WebhooksApiAxiosParamCreator;

var WebhooksApiFp = function WebhooksApiFp(configuration) {
  var localVarAxiosParamCreator = WebhooksApiAxiosParamCreator(configuration);
  return {
    /**
     * Create a webhook for the organization  Wildcard `\"*\"` can be used for `project_ids` and `styleguide_ids` to receive events for all projects and styleguides that you own. You\'ll also automatically subscribe to the new ones you create in the future.  Note: Users that have authorized the app before webhooks release must re-authorize the app to create webhooks. 
     * @summary Create organization webhooks
     * @param {string} organizationId Organization id
     * @param {OrganizationWebhookCreateBody} organizationWebhookCreateBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrganizationWebhooks: function createOrganizationWebhooks(organizationId, organizationWebhookCreateBody, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee21() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee21$(_context21) {
          while (1) {
            switch (_context21.prev = _context21.next) {
              case 0:
                _context21.next = 2;
                return localVarAxiosParamCreator.createOrganizationWebhooks(organizationId, organizationWebhookCreateBody, options);

              case 2:
                localVarAxiosArgs = _context21.sent;
                return _context21.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context21.stop();
            }
          }
        }, _callee21);
      }))();
    },

    /**
     * Create a webhook for the project  Note: Users that have authorized the app before webhooks release must re-authorize the app to create webhooks. 
     * @summary Create project webhooks
     * @param {string} projectId Project id
     * @param {ProjectWebhookCreateBody} projectWebhookCreateBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProjectWebhooks: function createProjectWebhooks(projectId, projectWebhookCreateBody, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee22() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee22$(_context22) {
          while (1) {
            switch (_context22.prev = _context22.next) {
              case 0:
                _context22.next = 2;
                return localVarAxiosParamCreator.createProjectWebhooks(projectId, projectWebhookCreateBody, options);

              case 2:
                localVarAxiosArgs = _context22.sent;
                return _context22.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context22.stop();
            }
          }
        }, _callee22);
      }))();
    },

    /**
     * Create a webhook for the styleguide  Note: Users that have authorized the app before webhooks release must re-authorize the app to create webhooks. 
     * @summary Create styleguide webhooks
     * @param {string} styleguideId Styleguide id
     * @param {StyleguideWebhookCreateBody} styleguideWebhookCreateBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createStyleguideWebhooks: function createStyleguideWebhooks(styleguideId, styleguideWebhookCreateBody, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee23() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee23$(_context23) {
          while (1) {
            switch (_context23.prev = _context23.next) {
              case 0:
                _context23.next = 2;
                return localVarAxiosParamCreator.createStyleguideWebhooks(styleguideId, styleguideWebhookCreateBody, options);

              case 2:
                localVarAxiosArgs = _context23.sent;
                return _context23.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context23.stop();
            }
          }
        }, _callee23);
      }))();
    },

    /**
     * Create a webhook for the user  Wildcard `\"*\"` can be used for `project_ids` and `styleguide_ids` to receive events for all projects and styleguides that you own. You\'ll also automatically subscribe to the new ones you create in the future.  Note: Users that have authorized the app before webhooks release must re-authorize the app to create webhooks. 
     * @summary Create user webhooks
     * @param {UserWebhookCreateBody} userWebhookCreateBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserWebhooks: function createUserWebhooks(userWebhookCreateBody, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee24() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee24$(_context24) {
          while (1) {
            switch (_context24.prev = _context24.next) {
              case 0:
                _context24.next = 2;
                return localVarAxiosParamCreator.createUserWebhooks(userWebhookCreateBody, options);

              case 2:
                localVarAxiosArgs = _context24.sent;
                return _context24.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context24.stop();
            }
          }
        }, _callee24);
      }))();
    },

    /**
     * Delete a webhook by id
     * @summary Delete a webhook of an organization
     * @param {string} organizationId Organization id
     * @param {string} webhookId Webhook id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrganizationWebhook: function deleteOrganizationWebhook(organizationId, webhookId, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee25() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee25$(_context25) {
          while (1) {
            switch (_context25.prev = _context25.next) {
              case 0:
                _context25.next = 2;
                return localVarAxiosParamCreator.deleteOrganizationWebhook(organizationId, webhookId, options);

              case 2:
                localVarAxiosArgs = _context25.sent;
                return _context25.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context25.stop();
            }
          }
        }, _callee25);
      }))();
    },

    /**
     * Delete a webhook by id
     * @summary Delete a webhook of a project
     * @param {string} projectId Project id
     * @param {string} webhookId Webhook id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProjectWebhook: function deleteProjectWebhook(projectId, webhookId, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee26() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee26$(_context26) {
          while (1) {
            switch (_context26.prev = _context26.next) {
              case 0:
                _context26.next = 2;
                return localVarAxiosParamCreator.deleteProjectWebhook(projectId, webhookId, options);

              case 2:
                localVarAxiosArgs = _context26.sent;
                return _context26.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context26.stop();
            }
          }
        }, _callee26);
      }))();
    },

    /**
     * Delete a webhook by id
     * @summary Delete a webhook of a styleguide
     * @param {string} styleguideId Styleguide id
     * @param {string} webhookId Webhook id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteStyleguideWebhook: function deleteStyleguideWebhook(styleguideId, webhookId, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee27() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee27$(_context27) {
          while (1) {
            switch (_context27.prev = _context27.next) {
              case 0:
                _context27.next = 2;
                return localVarAxiosParamCreator.deleteStyleguideWebhook(styleguideId, webhookId, options);

              case 2:
                localVarAxiosArgs = _context27.sent;
                return _context27.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context27.stop();
            }
          }
        }, _callee27);
      }))();
    },

    /**
     * Delete a webhook by id
     * @summary Delete a webhook of a user
     * @param {string} webhookId Webhook id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserWebhook: function deleteUserWebhook(webhookId, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee28() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee28$(_context28) {
          while (1) {
            switch (_context28.prev = _context28.next) {
              case 0:
                _context28.next = 2;
                return localVarAxiosParamCreator.deleteUserWebhook(webhookId, options);

              case 2:
                localVarAxiosArgs = _context28.sent;
                return _context28.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context28.stop();
            }
          }
        }, _callee28);
      }))();
    },

    /**
     * Get a webhook by id
     * @summary Get a webhook of organization
     * @param {string} organizationId Organization id
     * @param {string} webhookId Webhook id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationWebhook: function getOrganizationWebhook(organizationId, webhookId, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee29() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee29$(_context29) {
          while (1) {
            switch (_context29.prev = _context29.next) {
              case 0:
                _context29.next = 2;
                return localVarAxiosParamCreator.getOrganizationWebhook(organizationId, webhookId, options);

              case 2:
                localVarAxiosArgs = _context29.sent;
                return _context29.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context29.stop();
            }
          }
        }, _callee29);
      }))();
    },

    /**
     * List all webhooks of organization  Note: Zeplin apps can only list the webhook that are created by them. To list all webhooks created by any app or without app, personal access token is needed. 
     * @summary Get organization webhooks
     * @param {string} organizationId Organization id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {WebhookStatusEnum} [status] Filter by webhook status
     * @param {WebhookHealthEnum} [urlHealth] Filter by health of webhook\&#39;s URL
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationWebhooks: function getOrganizationWebhooks(organizationId, limit, offset, status, urlHealth, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee30() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee30$(_context30) {
          while (1) {
            switch (_context30.prev = _context30.next) {
              case 0:
                _context30.next = 2;
                return localVarAxiosParamCreator.getOrganizationWebhooks(organizationId, limit, offset, status, urlHealth, options);

              case 2:
                localVarAxiosArgs = _context30.sent;
                return _context30.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context30.stop();
            }
          }
        }, _callee30);
      }))();
    },

    /**
     * Get a webhook by id
     * @summary Get a webhook of project
     * @param {string} projectId Project id
     * @param {string} webhookId Webhook id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectWebhook: function getProjectWebhook(projectId, webhookId, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee31() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee31$(_context31) {
          while (1) {
            switch (_context31.prev = _context31.next) {
              case 0:
                _context31.next = 2;
                return localVarAxiosParamCreator.getProjectWebhook(projectId, webhookId, options);

              case 2:
                localVarAxiosArgs = _context31.sent;
                return _context31.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context31.stop();
            }
          }
        }, _callee31);
      }))();
    },

    /**
     * List all webhooks of the project  Note: Zeplin apps can only list the webhook that are created by them. To list all webhooks created by any app or without app, personal access token is needed. 
     * @summary Get project webhooks
     * @param {string} projectId Project id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {WebhookStatusEnum} [status] Filter by webhook status
     * @param {WebhookHealthEnum} [urlHealth] Filter by health of webhook\&#39;s URL
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectWebhooks: function getProjectWebhooks(projectId, limit, offset, status, urlHealth, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee32() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee32$(_context32) {
          while (1) {
            switch (_context32.prev = _context32.next) {
              case 0:
                _context32.next = 2;
                return localVarAxiosParamCreator.getProjectWebhooks(projectId, limit, offset, status, urlHealth, options);

              case 2:
                localVarAxiosArgs = _context32.sent;
                return _context32.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context32.stop();
            }
          }
        }, _callee32);
      }))();
    },

    /**
     * Get a webhook by id
     * @summary Get a webhook of styleguide
     * @param {string} styleguideId Styleguide id
     * @param {string} webhookId Webhook id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStyleguideWebhook: function getStyleguideWebhook(styleguideId, webhookId, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee33() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee33$(_context33) {
          while (1) {
            switch (_context33.prev = _context33.next) {
              case 0:
                _context33.next = 2;
                return localVarAxiosParamCreator.getStyleguideWebhook(styleguideId, webhookId, options);

              case 2:
                localVarAxiosArgs = _context33.sent;
                return _context33.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context33.stop();
            }
          }
        }, _callee33);
      }))();
    },

    /**
     * List all webhooks of the styleguide  Note: Zeplin apps can only list the webhook that are created by them. To list all webhooks created by any app or without app, personal access token is needed. 
     * @summary Get styleguide webhooks
     * @param {string} styleguideId Styleguide id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {WebhookStatusEnum} [status] Filter by webhook status
     * @param {WebhookHealthEnum} [urlHealth] Filter by health of webhook\&#39;s URL
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStyleguideWebhooks: function getStyleguideWebhooks(styleguideId, limit, offset, status, urlHealth, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee34() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee34$(_context34) {
          while (1) {
            switch (_context34.prev = _context34.next) {
              case 0:
                _context34.next = 2;
                return localVarAxiosParamCreator.getStyleguideWebhooks(styleguideId, limit, offset, status, urlHealth, options);

              case 2:
                localVarAxiosArgs = _context34.sent;
                return _context34.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context34.stop();
            }
          }
        }, _callee34);
      }))();
    },

    /**
     * Get a webhook by id
     * @summary Get a webhook of user
     * @param {string} webhookId Webhook id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserWebhook: function getUserWebhook(webhookId, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee35() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee35$(_context35) {
          while (1) {
            switch (_context35.prev = _context35.next) {
              case 0:
                _context35.next = 2;
                return localVarAxiosParamCreator.getUserWebhook(webhookId, options);

              case 2:
                localVarAxiosArgs = _context35.sent;
                return _context35.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context35.stop();
            }
          }
        }, _callee35);
      }))();
    },

    /**
     * List all webhooks of the user  Note: Zeplin apps can only list the webhook that are created by them. To list all webhooks created by any app or without app, personal access token is needed. 
     * @summary Get user webhooks
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {WebhookStatusEnum} [status] Filter by webhook status
     * @param {WebhookHealthEnum} [urlHealth] Filter by health of webhook\&#39;s URL
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserWebhooks: function getUserWebhooks(limit, offset, status, urlHealth, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee36() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee36$(_context36) {
          while (1) {
            switch (_context36.prev = _context36.next) {
              case 0:
                _context36.next = 2;
                return localVarAxiosParamCreator.getUserWebhooks(limit, offset, status, urlHealth, options);

              case 2:
                localVarAxiosArgs = _context36.sent;
                return _context36.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context36.stop();
            }
          }
        }, _callee36);
      }))();
    },

    /**
     * Update a webhook for the organization
     * @summary Update organization webhooks
     * @param {string} organizationId Organization id
     * @param {string} webhookId Webhook id
     * @param {OrganizationWebhookUpdateBody} organizationWebhookUpdateBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrganizationWebhooks: function updateOrganizationWebhooks(organizationId, webhookId, organizationWebhookUpdateBody, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee37() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee37$(_context37) {
          while (1) {
            switch (_context37.prev = _context37.next) {
              case 0:
                _context37.next = 2;
                return localVarAxiosParamCreator.updateOrganizationWebhooks(organizationId, webhookId, organizationWebhookUpdateBody, options);

              case 2:
                localVarAxiosArgs = _context37.sent;
                return _context37.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context37.stop();
            }
          }
        }, _callee37);
      }))();
    },

    /**
     * Update a webhook for the project
     * @summary Update project webhooks
     * @param {string} projectId Project id
     * @param {string} webhookId Webhook id
     * @param {ProjectWebhookUpdateBody} projectWebhookUpdateBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProjectWebhooks: function updateProjectWebhooks(projectId, webhookId, projectWebhookUpdateBody, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee38() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee38$(_context38) {
          while (1) {
            switch (_context38.prev = _context38.next) {
              case 0:
                _context38.next = 2;
                return localVarAxiosParamCreator.updateProjectWebhooks(projectId, webhookId, projectWebhookUpdateBody, options);

              case 2:
                localVarAxiosArgs = _context38.sent;
                return _context38.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context38.stop();
            }
          }
        }, _callee38);
      }))();
    },

    /**
     * Update a webhook for the styleguide
     * @summary Update styleguide webhooks
     * @param {string} styleguideId Styleguide id
     * @param {string} webhookId Webhook id
     * @param {StyleguideWebhookUpdateBody} styleguideWebhookUpdateBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateStyleguideWebhooks: function updateStyleguideWebhooks(styleguideId, webhookId, styleguideWebhookUpdateBody, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee39() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee39$(_context39) {
          while (1) {
            switch (_context39.prev = _context39.next) {
              case 0:
                _context39.next = 2;
                return localVarAxiosParamCreator.updateStyleguideWebhooks(styleguideId, webhookId, styleguideWebhookUpdateBody, options);

              case 2:
                localVarAxiosArgs = _context39.sent;
                return _context39.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context39.stop();
            }
          }
        }, _callee39);
      }))();
    },

    /**
     * Update a webhook for the user
     * @summary Update user webhooks
     * @param {string} webhookId Webhook id
     * @param {UserWebhookUpdateBody} userWebhookUpdateBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserWebhooks: function updateUserWebhooks(webhookId, userWebhookUpdateBody, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee40() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee40$(_context40) {
          while (1) {
            switch (_context40.prev = _context40.next) {
              case 0:
                _context40.next = 2;
                return localVarAxiosParamCreator.updateUserWebhooks(webhookId, userWebhookUpdateBody, options);

              case 2:
                localVarAxiosArgs = _context40.sent;
                return _context40.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context40.stop();
            }
          }
        }, _callee40);
      }))();
    }
  };
};
/**
 * Search parameters for getOrganizationWebhooks operation in WebhooksApi.
 * @export
 * @interface WebhooksApiGetOrganizationWebhooksSearchParams
 */


exports.WebhooksApiFp = WebhooksApiFp;

/**
 * WebhooksApi - object-oriented interface
 * @export
 * @class WebhooksApi
 * @extends {BaseAPI}
 */
var WebhooksApi = /*#__PURE__*/function (_BaseAPI) {
  _inherits(WebhooksApi, _BaseAPI);

  var _super = _createSuper(WebhooksApi);

  function WebhooksApi() {
    _classCallCheck(this, WebhooksApi);

    return _super.apply(this, arguments);
  }

  _createClass(WebhooksApi, [{
    key: "createOrganizationWebhooks",
    value:
    /**
     * Create a webhook for the organization  Wildcard `\"*\"` can be used for `project_ids` and `styleguide_ids` to receive events for all projects and styleguides that you own. You\'ll also automatically subscribe to the new ones you create in the future.  Note: Users that have authorized the app before webhooks release must re-authorize the app to create webhooks. 
     * @summary Create organization webhooks
     * @param {string} organizationId Organization id
     * @param {OrganizationWebhookCreateBody} organizationWebhookCreateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    function () {
      var _createOrganizationWebhooks2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee41(organizationId, organizationWebhookCreateBody, options) {
        var webhooksApiFp, request, response;
        return regeneratorRuntime.wrap(function _callee41$(_context41) {
          while (1) {
            switch (_context41.prev = _context41.next) {
              case 0:
                webhooksApiFp = WebhooksApiFp(this.configuration);
                _context41.next = 3;
                return webhooksApiFp.createOrganizationWebhooks(organizationId, organizationWebhookCreateBody, options);

              case 3:
                request = _context41.sent;
                _context41.next = 6;
                return request(this.axios, this.basePath);

              case 6:
                response = _context41.sent;
                return _context41.abrupt("return", _objectSpread(_objectSpread({}, response), {}, {
                  data: (0, _models.transformJSONToEntityReference)(response.data)
                }));

              case 8:
              case "end":
                return _context41.stop();
            }
          }
        }, _callee41, this);
      }));

      function createOrganizationWebhooks(_x52, _x53, _x54) {
        return _createOrganizationWebhooks2.apply(this, arguments);
      }

      return createOrganizationWebhooks;
    }()
    /**
     * Create a webhook for the project  Note: Users that have authorized the app before webhooks release must re-authorize the app to create webhooks. 
     * @summary Create project webhooks
     * @param {string} projectId Project id
     * @param {ProjectWebhookCreateBody} projectWebhookCreateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */

  }, {
    key: "createProjectWebhooks",
    value: function () {
      var _createProjectWebhooks2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee42(projectId, projectWebhookCreateBody, options) {
        var webhooksApiFp, request, response;
        return regeneratorRuntime.wrap(function _callee42$(_context42) {
          while (1) {
            switch (_context42.prev = _context42.next) {
              case 0:
                webhooksApiFp = WebhooksApiFp(this.configuration);
                _context42.next = 3;
                return webhooksApiFp.createProjectWebhooks(projectId, projectWebhookCreateBody, options);

              case 3:
                request = _context42.sent;
                _context42.next = 6;
                return request(this.axios, this.basePath);

              case 6:
                response = _context42.sent;
                return _context42.abrupt("return", _objectSpread(_objectSpread({}, response), {}, {
                  data: (0, _models.transformJSONToEntityReference)(response.data)
                }));

              case 8:
              case "end":
                return _context42.stop();
            }
          }
        }, _callee42, this);
      }));

      function createProjectWebhooks(_x55, _x56, _x57) {
        return _createProjectWebhooks2.apply(this, arguments);
      }

      return createProjectWebhooks;
    }()
    /**
     * Create a webhook for the styleguide  Note: Users that have authorized the app before webhooks release must re-authorize the app to create webhooks. 
     * @summary Create styleguide webhooks
     * @param {string} styleguideId Styleguide id
     * @param {StyleguideWebhookCreateBody} styleguideWebhookCreateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */

  }, {
    key: "createStyleguideWebhooks",
    value: function () {
      var _createStyleguideWebhooks2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee43(styleguideId, styleguideWebhookCreateBody, options) {
        var webhooksApiFp, request, response;
        return regeneratorRuntime.wrap(function _callee43$(_context43) {
          while (1) {
            switch (_context43.prev = _context43.next) {
              case 0:
                webhooksApiFp = WebhooksApiFp(this.configuration);
                _context43.next = 3;
                return webhooksApiFp.createStyleguideWebhooks(styleguideId, styleguideWebhookCreateBody, options);

              case 3:
                request = _context43.sent;
                _context43.next = 6;
                return request(this.axios, this.basePath);

              case 6:
                response = _context43.sent;
                return _context43.abrupt("return", _objectSpread(_objectSpread({}, response), {}, {
                  data: (0, _models.transformJSONToEntityReference)(response.data)
                }));

              case 8:
              case "end":
                return _context43.stop();
            }
          }
        }, _callee43, this);
      }));

      function createStyleguideWebhooks(_x58, _x59, _x60) {
        return _createStyleguideWebhooks2.apply(this, arguments);
      }

      return createStyleguideWebhooks;
    }()
    /**
     * Create a webhook for the user  Wildcard `\"*\"` can be used for `project_ids` and `styleguide_ids` to receive events for all projects and styleguides that you own. You\'ll also automatically subscribe to the new ones you create in the future.  Note: Users that have authorized the app before webhooks release must re-authorize the app to create webhooks. 
     * @summary Create user webhooks
     * @param {UserWebhookCreateBody} userWebhookCreateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */

  }, {
    key: "createUserWebhooks",
    value: function () {
      var _createUserWebhooks2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee44(userWebhookCreateBody, options) {
        var webhooksApiFp, request, response;
        return regeneratorRuntime.wrap(function _callee44$(_context44) {
          while (1) {
            switch (_context44.prev = _context44.next) {
              case 0:
                webhooksApiFp = WebhooksApiFp(this.configuration);
                _context44.next = 3;
                return webhooksApiFp.createUserWebhooks(userWebhookCreateBody, options);

              case 3:
                request = _context44.sent;
                _context44.next = 6;
                return request(this.axios, this.basePath);

              case 6:
                response = _context44.sent;
                return _context44.abrupt("return", _objectSpread(_objectSpread({}, response), {}, {
                  data: (0, _models.transformJSONToEntityReference)(response.data)
                }));

              case 8:
              case "end":
                return _context44.stop();
            }
          }
        }, _callee44, this);
      }));

      function createUserWebhooks(_x61, _x62) {
        return _createUserWebhooks2.apply(this, arguments);
      }

      return createUserWebhooks;
    }()
    /**
     * Delete a webhook by id
     * @summary Delete a webhook of an organization
     * @param {string} organizationId Organization id
     * @param {string} webhookId Webhook id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */

  }, {
    key: "deleteOrganizationWebhook",
    value: function () {
      var _deleteOrganizationWebhook2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee45(organizationId, webhookId, options) {
        var webhooksApiFp, request, response;
        return regeneratorRuntime.wrap(function _callee45$(_context45) {
          while (1) {
            switch (_context45.prev = _context45.next) {
              case 0:
                webhooksApiFp = WebhooksApiFp(this.configuration);
                _context45.next = 3;
                return webhooksApiFp.deleteOrganizationWebhook(organizationId, webhookId, options);

              case 3:
                request = _context45.sent;
                _context45.next = 6;
                return request(this.axios, this.basePath);

              case 6:
                response = _context45.sent;
                return _context45.abrupt("return", response);

              case 8:
              case "end":
                return _context45.stop();
            }
          }
        }, _callee45, this);
      }));

      function deleteOrganizationWebhook(_x63, _x64, _x65) {
        return _deleteOrganizationWebhook2.apply(this, arguments);
      }

      return deleteOrganizationWebhook;
    }()
    /**
     * Delete a webhook by id
     * @summary Delete a webhook of a project
     * @param {string} projectId Project id
     * @param {string} webhookId Webhook id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */

  }, {
    key: "deleteProjectWebhook",
    value: function () {
      var _deleteProjectWebhook2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee46(projectId, webhookId, options) {
        var webhooksApiFp, request, response;
        return regeneratorRuntime.wrap(function _callee46$(_context46) {
          while (1) {
            switch (_context46.prev = _context46.next) {
              case 0:
                webhooksApiFp = WebhooksApiFp(this.configuration);
                _context46.next = 3;
                return webhooksApiFp.deleteProjectWebhook(projectId, webhookId, options);

              case 3:
                request = _context46.sent;
                _context46.next = 6;
                return request(this.axios, this.basePath);

              case 6:
                response = _context46.sent;
                return _context46.abrupt("return", response);

              case 8:
              case "end":
                return _context46.stop();
            }
          }
        }, _callee46, this);
      }));

      function deleteProjectWebhook(_x66, _x67, _x68) {
        return _deleteProjectWebhook2.apply(this, arguments);
      }

      return deleteProjectWebhook;
    }()
    /**
     * Delete a webhook by id
     * @summary Delete a webhook of a styleguide
     * @param {string} styleguideId Styleguide id
     * @param {string} webhookId Webhook id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */

  }, {
    key: "deleteStyleguideWebhook",
    value: function () {
      var _deleteStyleguideWebhook2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee47(styleguideId, webhookId, options) {
        var webhooksApiFp, request, response;
        return regeneratorRuntime.wrap(function _callee47$(_context47) {
          while (1) {
            switch (_context47.prev = _context47.next) {
              case 0:
                webhooksApiFp = WebhooksApiFp(this.configuration);
                _context47.next = 3;
                return webhooksApiFp.deleteStyleguideWebhook(styleguideId, webhookId, options);

              case 3:
                request = _context47.sent;
                _context47.next = 6;
                return request(this.axios, this.basePath);

              case 6:
                response = _context47.sent;
                return _context47.abrupt("return", response);

              case 8:
              case "end":
                return _context47.stop();
            }
          }
        }, _callee47, this);
      }));

      function deleteStyleguideWebhook(_x69, _x70, _x71) {
        return _deleteStyleguideWebhook2.apply(this, arguments);
      }

      return deleteStyleguideWebhook;
    }()
    /**
     * Delete a webhook by id
     * @summary Delete a webhook of a user
     * @param {string} webhookId Webhook id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */

  }, {
    key: "deleteUserWebhook",
    value: function () {
      var _deleteUserWebhook2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee48(webhookId, options) {
        var webhooksApiFp, request, response;
        return regeneratorRuntime.wrap(function _callee48$(_context48) {
          while (1) {
            switch (_context48.prev = _context48.next) {
              case 0:
                webhooksApiFp = WebhooksApiFp(this.configuration);
                _context48.next = 3;
                return webhooksApiFp.deleteUserWebhook(webhookId, options);

              case 3:
                request = _context48.sent;
                _context48.next = 6;
                return request(this.axios, this.basePath);

              case 6:
                response = _context48.sent;
                return _context48.abrupt("return", response);

              case 8:
              case "end":
                return _context48.stop();
            }
          }
        }, _callee48, this);
      }));

      function deleteUserWebhook(_x72, _x73) {
        return _deleteUserWebhook2.apply(this, arguments);
      }

      return deleteUserWebhook;
    }()
    /**
     * Get a webhook by id
     * @summary Get a webhook of organization
     * @param {string} organizationId Organization id
     * @param {string} webhookId Webhook id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */

  }, {
    key: "getOrganizationWebhook",
    value: function () {
      var _getOrganizationWebhook2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee49(organizationId, webhookId, options) {
        var webhooksApiFp, request, response;
        return regeneratorRuntime.wrap(function _callee49$(_context49) {
          while (1) {
            switch (_context49.prev = _context49.next) {
              case 0:
                webhooksApiFp = WebhooksApiFp(this.configuration);
                _context49.next = 3;
                return webhooksApiFp.getOrganizationWebhook(organizationId, webhookId, options);

              case 3:
                request = _context49.sent;
                _context49.next = 6;
                return request(this.axios, this.basePath);

              case 6:
                response = _context49.sent;
                return _context49.abrupt("return", _objectSpread(_objectSpread({}, response), {}, {
                  data: (0, _models.transformJSONToOrganizationWebhook)(response.data)
                }));

              case 8:
              case "end":
                return _context49.stop();
            }
          }
        }, _callee49, this);
      }));

      function getOrganizationWebhook(_x74, _x75, _x76) {
        return _getOrganizationWebhook2.apply(this, arguments);
      }

      return getOrganizationWebhook;
    }()
    /**
     * List all webhooks of organization  Note: Zeplin apps can only list the webhook that are created by them. To list all webhooks created by any app or without app, personal access token is needed. 
     * @summary Get organization webhooks
     * @param {string} organizationId Organization id
     * @param {WebhooksApiGetOrganizationWebhooksSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */

  }, {
    key: "getOrganizationWebhooks",
    value: function () {
      var _getOrganizationWebhooks2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee50(organizationId) {
        var searchParams,
            options,
            webhooksApiFp,
            request,
            response,
            _args50 = arguments;
        return regeneratorRuntime.wrap(function _callee50$(_context50) {
          while (1) {
            switch (_context50.prev = _context50.next) {
              case 0:
                searchParams = _args50.length > 1 && _args50[1] !== undefined ? _args50[1] : {};
                options = _args50.length > 2 ? _args50[2] : undefined;
                webhooksApiFp = WebhooksApiFp(this.configuration);
                _context50.next = 5;
                return webhooksApiFp.getOrganizationWebhooks(organizationId, searchParams.limit, searchParams.offset, searchParams.status, searchParams.urlHealth, options);

              case 5:
                request = _context50.sent;
                _context50.next = 8;
                return request(this.axios, this.basePath);

              case 8:
                response = _context50.sent;
                return _context50.abrupt("return", _objectSpread(_objectSpread({}, response), {}, {
                  data: response.data.map(_models.transformJSONToOrganizationWebhook)
                }));

              case 10:
              case "end":
                return _context50.stop();
            }
          }
        }, _callee50, this);
      }));

      function getOrganizationWebhooks(_x77) {
        return _getOrganizationWebhooks2.apply(this, arguments);
      }

      return getOrganizationWebhooks;
    }()
    /**
     * Get a webhook by id
     * @summary Get a webhook of project
     * @param {string} projectId Project id
     * @param {string} webhookId Webhook id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */

  }, {
    key: "getProjectWebhook",
    value: function () {
      var _getProjectWebhook2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee51(projectId, webhookId, options) {
        var webhooksApiFp, request, response;
        return regeneratorRuntime.wrap(function _callee51$(_context51) {
          while (1) {
            switch (_context51.prev = _context51.next) {
              case 0:
                webhooksApiFp = WebhooksApiFp(this.configuration);
                _context51.next = 3;
                return webhooksApiFp.getProjectWebhook(projectId, webhookId, options);

              case 3:
                request = _context51.sent;
                _context51.next = 6;
                return request(this.axios, this.basePath);

              case 6:
                response = _context51.sent;
                return _context51.abrupt("return", _objectSpread(_objectSpread({}, response), {}, {
                  data: (0, _models.transformJSONToProjectWebhook)(response.data)
                }));

              case 8:
              case "end":
                return _context51.stop();
            }
          }
        }, _callee51, this);
      }));

      function getProjectWebhook(_x78, _x79, _x80) {
        return _getProjectWebhook2.apply(this, arguments);
      }

      return getProjectWebhook;
    }()
    /**
     * List all webhooks of the project  Note: Zeplin apps can only list the webhook that are created by them. To list all webhooks created by any app or without app, personal access token is needed. 
     * @summary Get project webhooks
     * @param {string} projectId Project id
     * @param {WebhooksApiGetProjectWebhooksSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */

  }, {
    key: "getProjectWebhooks",
    value: function () {
      var _getProjectWebhooks2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee52(projectId) {
        var searchParams,
            options,
            webhooksApiFp,
            request,
            response,
            _args52 = arguments;
        return regeneratorRuntime.wrap(function _callee52$(_context52) {
          while (1) {
            switch (_context52.prev = _context52.next) {
              case 0:
                searchParams = _args52.length > 1 && _args52[1] !== undefined ? _args52[1] : {};
                options = _args52.length > 2 ? _args52[2] : undefined;
                webhooksApiFp = WebhooksApiFp(this.configuration);
                _context52.next = 5;
                return webhooksApiFp.getProjectWebhooks(projectId, searchParams.limit, searchParams.offset, searchParams.status, searchParams.urlHealth, options);

              case 5:
                request = _context52.sent;
                _context52.next = 8;
                return request(this.axios, this.basePath);

              case 8:
                response = _context52.sent;
                return _context52.abrupt("return", _objectSpread(_objectSpread({}, response), {}, {
                  data: response.data.map(_models.transformJSONToProjectWebhook)
                }));

              case 10:
              case "end":
                return _context52.stop();
            }
          }
        }, _callee52, this);
      }));

      function getProjectWebhooks(_x81) {
        return _getProjectWebhooks2.apply(this, arguments);
      }

      return getProjectWebhooks;
    }()
    /**
     * Get a webhook by id
     * @summary Get a webhook of styleguide
     * @param {string} styleguideId Styleguide id
     * @param {string} webhookId Webhook id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */

  }, {
    key: "getStyleguideWebhook",
    value: function () {
      var _getStyleguideWebhook2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee53(styleguideId, webhookId, options) {
        var webhooksApiFp, request, response;
        return regeneratorRuntime.wrap(function _callee53$(_context53) {
          while (1) {
            switch (_context53.prev = _context53.next) {
              case 0:
                webhooksApiFp = WebhooksApiFp(this.configuration);
                _context53.next = 3;
                return webhooksApiFp.getStyleguideWebhook(styleguideId, webhookId, options);

              case 3:
                request = _context53.sent;
                _context53.next = 6;
                return request(this.axios, this.basePath);

              case 6:
                response = _context53.sent;
                return _context53.abrupt("return", _objectSpread(_objectSpread({}, response), {}, {
                  data: (0, _models.transformJSONToStyleguideWebhook)(response.data)
                }));

              case 8:
              case "end":
                return _context53.stop();
            }
          }
        }, _callee53, this);
      }));

      function getStyleguideWebhook(_x82, _x83, _x84) {
        return _getStyleguideWebhook2.apply(this, arguments);
      }

      return getStyleguideWebhook;
    }()
    /**
     * List all webhooks of the styleguide  Note: Zeplin apps can only list the webhook that are created by them. To list all webhooks created by any app or without app, personal access token is needed. 
     * @summary Get styleguide webhooks
     * @param {string} styleguideId Styleguide id
     * @param {WebhooksApiGetStyleguideWebhooksSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */

  }, {
    key: "getStyleguideWebhooks",
    value: function () {
      var _getStyleguideWebhooks2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee54(styleguideId) {
        var searchParams,
            options,
            webhooksApiFp,
            request,
            response,
            _args54 = arguments;
        return regeneratorRuntime.wrap(function _callee54$(_context54) {
          while (1) {
            switch (_context54.prev = _context54.next) {
              case 0:
                searchParams = _args54.length > 1 && _args54[1] !== undefined ? _args54[1] : {};
                options = _args54.length > 2 ? _args54[2] : undefined;
                webhooksApiFp = WebhooksApiFp(this.configuration);
                _context54.next = 5;
                return webhooksApiFp.getStyleguideWebhooks(styleguideId, searchParams.limit, searchParams.offset, searchParams.status, searchParams.urlHealth, options);

              case 5:
                request = _context54.sent;
                _context54.next = 8;
                return request(this.axios, this.basePath);

              case 8:
                response = _context54.sent;
                return _context54.abrupt("return", _objectSpread(_objectSpread({}, response), {}, {
                  data: response.data.map(_models.transformJSONToStyleguideWebhook)
                }));

              case 10:
              case "end":
                return _context54.stop();
            }
          }
        }, _callee54, this);
      }));

      function getStyleguideWebhooks(_x85) {
        return _getStyleguideWebhooks2.apply(this, arguments);
      }

      return getStyleguideWebhooks;
    }()
    /**
     * Get a webhook by id
     * @summary Get a webhook of user
     * @param {string} webhookId Webhook id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */

  }, {
    key: "getUserWebhook",
    value: function () {
      var _getUserWebhook2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee55(webhookId, options) {
        var webhooksApiFp, request, response;
        return regeneratorRuntime.wrap(function _callee55$(_context55) {
          while (1) {
            switch (_context55.prev = _context55.next) {
              case 0:
                webhooksApiFp = WebhooksApiFp(this.configuration);
                _context55.next = 3;
                return webhooksApiFp.getUserWebhook(webhookId, options);

              case 3:
                request = _context55.sent;
                _context55.next = 6;
                return request(this.axios, this.basePath);

              case 6:
                response = _context55.sent;
                return _context55.abrupt("return", _objectSpread(_objectSpread({}, response), {}, {
                  data: (0, _models.transformJSONToUserWebhook)(response.data)
                }));

              case 8:
              case "end":
                return _context55.stop();
            }
          }
        }, _callee55, this);
      }));

      function getUserWebhook(_x86, _x87) {
        return _getUserWebhook2.apply(this, arguments);
      }

      return getUserWebhook;
    }()
    /**
     * List all webhooks of the user  Note: Zeplin apps can only list the webhook that are created by them. To list all webhooks created by any app or without app, personal access token is needed. 
     * @summary Get user webhooks
     * @param {WebhooksApiGetUserWebhooksSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */

  }, {
    key: "getUserWebhooks",
    value: function () {
      var _getUserWebhooks2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee56() {
        var searchParams,
            options,
            webhooksApiFp,
            request,
            response,
            _args56 = arguments;
        return regeneratorRuntime.wrap(function _callee56$(_context56) {
          while (1) {
            switch (_context56.prev = _context56.next) {
              case 0:
                searchParams = _args56.length > 0 && _args56[0] !== undefined ? _args56[0] : {};
                options = _args56.length > 1 ? _args56[1] : undefined;
                webhooksApiFp = WebhooksApiFp(this.configuration);
                _context56.next = 5;
                return webhooksApiFp.getUserWebhooks(searchParams.limit, searchParams.offset, searchParams.status, searchParams.urlHealth, options);

              case 5:
                request = _context56.sent;
                _context56.next = 8;
                return request(this.axios, this.basePath);

              case 8:
                response = _context56.sent;
                return _context56.abrupt("return", _objectSpread(_objectSpread({}, response), {}, {
                  data: response.data.map(_models.transformJSONToUserWebhook)
                }));

              case 10:
              case "end":
                return _context56.stop();
            }
          }
        }, _callee56, this);
      }));

      function getUserWebhooks() {
        return _getUserWebhooks2.apply(this, arguments);
      }

      return getUserWebhooks;
    }()
    /**
     * Update a webhook for the organization
     * @summary Update organization webhooks
     * @param {string} organizationId Organization id
     * @param {string} webhookId Webhook id
     * @param {OrganizationWebhookUpdateBody} organizationWebhookUpdateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */

  }, {
    key: "updateOrganizationWebhooks",
    value: function () {
      var _updateOrganizationWebhooks2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee57(organizationId, webhookId, organizationWebhookUpdateBody, options) {
        var webhooksApiFp, request, response;
        return regeneratorRuntime.wrap(function _callee57$(_context57) {
          while (1) {
            switch (_context57.prev = _context57.next) {
              case 0:
                webhooksApiFp = WebhooksApiFp(this.configuration);
                _context57.next = 3;
                return webhooksApiFp.updateOrganizationWebhooks(organizationId, webhookId, organizationWebhookUpdateBody, options);

              case 3:
                request = _context57.sent;
                _context57.next = 6;
                return request(this.axios, this.basePath);

              case 6:
                response = _context57.sent;
                return _context57.abrupt("return", response);

              case 8:
              case "end":
                return _context57.stop();
            }
          }
        }, _callee57, this);
      }));

      function updateOrganizationWebhooks(_x88, _x89, _x90, _x91) {
        return _updateOrganizationWebhooks2.apply(this, arguments);
      }

      return updateOrganizationWebhooks;
    }()
    /**
     * Update a webhook for the project
     * @summary Update project webhooks
     * @param {string} projectId Project id
     * @param {string} webhookId Webhook id
     * @param {ProjectWebhookUpdateBody} projectWebhookUpdateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */

  }, {
    key: "updateProjectWebhooks",
    value: function () {
      var _updateProjectWebhooks2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee58(projectId, webhookId, projectWebhookUpdateBody, options) {
        var webhooksApiFp, request, response;
        return regeneratorRuntime.wrap(function _callee58$(_context58) {
          while (1) {
            switch (_context58.prev = _context58.next) {
              case 0:
                webhooksApiFp = WebhooksApiFp(this.configuration);
                _context58.next = 3;
                return webhooksApiFp.updateProjectWebhooks(projectId, webhookId, projectWebhookUpdateBody, options);

              case 3:
                request = _context58.sent;
                _context58.next = 6;
                return request(this.axios, this.basePath);

              case 6:
                response = _context58.sent;
                return _context58.abrupt("return", response);

              case 8:
              case "end":
                return _context58.stop();
            }
          }
        }, _callee58, this);
      }));

      function updateProjectWebhooks(_x92, _x93, _x94, _x95) {
        return _updateProjectWebhooks2.apply(this, arguments);
      }

      return updateProjectWebhooks;
    }()
    /**
     * Update a webhook for the styleguide
     * @summary Update styleguide webhooks
     * @param {string} styleguideId Styleguide id
     * @param {string} webhookId Webhook id
     * @param {StyleguideWebhookUpdateBody} styleguideWebhookUpdateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */

  }, {
    key: "updateStyleguideWebhooks",
    value: function () {
      var _updateStyleguideWebhooks2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee59(styleguideId, webhookId, styleguideWebhookUpdateBody, options) {
        var webhooksApiFp, request, response;
        return regeneratorRuntime.wrap(function _callee59$(_context59) {
          while (1) {
            switch (_context59.prev = _context59.next) {
              case 0:
                webhooksApiFp = WebhooksApiFp(this.configuration);
                _context59.next = 3;
                return webhooksApiFp.updateStyleguideWebhooks(styleguideId, webhookId, styleguideWebhookUpdateBody, options);

              case 3:
                request = _context59.sent;
                _context59.next = 6;
                return request(this.axios, this.basePath);

              case 6:
                response = _context59.sent;
                return _context59.abrupt("return", response);

              case 8:
              case "end":
                return _context59.stop();
            }
          }
        }, _callee59, this);
      }));

      function updateStyleguideWebhooks(_x96, _x97, _x98, _x99) {
        return _updateStyleguideWebhooks2.apply(this, arguments);
      }

      return updateStyleguideWebhooks;
    }()
    /**
     * Update a webhook for the user
     * @summary Update user webhooks
     * @param {string} webhookId Webhook id
     * @param {UserWebhookUpdateBody} userWebhookUpdateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */

  }, {
    key: "updateUserWebhooks",
    value: function () {
      var _updateUserWebhooks2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee60(webhookId, userWebhookUpdateBody, options) {
        var webhooksApiFp, request, response;
        return regeneratorRuntime.wrap(function _callee60$(_context60) {
          while (1) {
            switch (_context60.prev = _context60.next) {
              case 0:
                webhooksApiFp = WebhooksApiFp(this.configuration);
                _context60.next = 3;
                return webhooksApiFp.updateUserWebhooks(webhookId, userWebhookUpdateBody, options);

              case 3:
                request = _context60.sent;
                _context60.next = 6;
                return request(this.axios, this.basePath);

              case 6:
                response = _context60.sent;
                return _context60.abrupt("return", response);

              case 8:
              case "end":
                return _context60.stop();
            }
          }
        }, _callee60, this);
      }));

      function updateUserWebhooks(_x100, _x101, _x102) {
        return _updateUserWebhooks2.apply(this, arguments);
      }

      return updateUserWebhooks;
    }()
  }]);

  return WebhooksApi;
}(_base.BaseAPI);

exports.WebhooksApi = WebhooksApi;