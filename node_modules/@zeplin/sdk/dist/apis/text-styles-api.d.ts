/**
 * Zeplin API
 * Access your resources in Zeplin
 *
 * Contact: support@zeplin.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosResponse } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { TextStyle } from '../models';
import { TextStyleUpdateBody } from '../models';
/**
 * TextStylesApi - axios parameter creator
 * @export
 */
export declare const TextStylesApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * List all text styles in the project\'s local styleguide
     * @summary Get project text styles
     * @param {string} projectId Project id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {boolean} [includeLinkedStyleguides] Whether to include linked styleguides or not
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectTextStyles: (projectId: string, limit?: number | undefined, offset?: number | undefined, includeLinkedStyleguides?: boolean | undefined, options?: any) => Promise<RequestArgs>;
    /**
     * Returns the text styles of the styleguide that user has access.  See [Styleguide docs](#getstyleguide) for more details about how `linked_project` and `linked_styleguide` parameters can be used to retrieve resources from styleguides that user is eligible to access.
     * @summary Get styleguide text styles
     * @param {string} styleguideId Styleguide id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {string} [linkedProject] Reference project id
     * @param {string} [linkedStyleguide] Reference styleguide id
     * @param {boolean} [includeLinkedStyleguides] Whether to include linked styleguides or not
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStyleguideTextStyles: (styleguideId: string, limit?: number | undefined, offset?: number | undefined, linkedProject?: string | undefined, linkedStyleguide?: string | undefined, includeLinkedStyleguides?: boolean | undefined, options?: any) => Promise<RequestArgs>;
    /**
     * Update a text style in the project\'s local styleguide
     * @summary Update project text style
     * @param {string} projectId Project id
     * @param {string} textStyleId Text style id
     * @param {TextStyleUpdateBody} textStyleUpdateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProjectTextStyle: (projectId: string, textStyleId: string, textStyleUpdateBody: TextStyleUpdateBody, options?: any) => Promise<RequestArgs>;
    /**
     * Update a text style in the styleguide
     * @summary Update styleguide text style
     * @param {string} styleguideId Styleguide id
     * @param {string} textStyleId Text style id
     * @param {TextStyleUpdateBody} textStyleUpdateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateStyleguideTextStyle: (styleguideId: string, textStyleId: string, textStyleUpdateBody: TextStyleUpdateBody, options?: any) => Promise<RequestArgs>;
};
/**
 * TextStylesApi - functional programming interface
 * @export
 */
export declare const TextStylesApiFp: (configuration?: Configuration | undefined) => {
    /**
     * List all text styles in the project\'s local styleguide
     * @summary Get project text styles
     * @param {string} projectId Project id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {boolean} [includeLinkedStyleguides] Whether to include linked styleguides or not
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectTextStyles(projectId: string, limit?: number | undefined, offset?: number | undefined, includeLinkedStyleguides?: boolean | undefined, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * Returns the text styles of the styleguide that user has access.  See [Styleguide docs](#getstyleguide) for more details about how `linked_project` and `linked_styleguide` parameters can be used to retrieve resources from styleguides that user is eligible to access.
     * @summary Get styleguide text styles
     * @param {string} styleguideId Styleguide id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {string} [linkedProject] Reference project id
     * @param {string} [linkedStyleguide] Reference styleguide id
     * @param {boolean} [includeLinkedStyleguides] Whether to include linked styleguides or not
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStyleguideTextStyles(styleguideId: string, limit?: number | undefined, offset?: number | undefined, linkedProject?: string | undefined, linkedStyleguide?: string | undefined, includeLinkedStyleguides?: boolean | undefined, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * Update a text style in the project\'s local styleguide
     * @summary Update project text style
     * @param {string} projectId Project id
     * @param {string} textStyleId Text style id
     * @param {TextStyleUpdateBody} textStyleUpdateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProjectTextStyle(projectId: string, textStyleId: string, textStyleUpdateBody: TextStyleUpdateBody, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * Update a text style in the styleguide
     * @summary Update styleguide text style
     * @param {string} styleguideId Styleguide id
     * @param {string} textStyleId Text style id
     * @param {TextStyleUpdateBody} textStyleUpdateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateStyleguideTextStyle(styleguideId: string, textStyleId: string, textStyleUpdateBody: TextStyleUpdateBody, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
};
/**
 * Search parameters for getProjectTextStyles operation in TextStylesApi.
 * @export
 * @interface TextStylesApiGetProjectTextStylesSearchParams
 */
export interface TextStylesApiGetProjectTextStylesSearchParams {
    /**
     * Pagination limit
     * @type {number}
     * @memberof TextStylesApiGetProjectTextStylesSearchParams
     */
    readonly limit?: number;
    /**
     * Pagination offset
     * @type {number}
     * @memberof TextStylesApiGetProjectTextStylesSearchParams
     */
    readonly offset?: number;
    /**
     * Whether to include linked styleguides or not
     * @type {boolean}
     * @memberof TextStylesApiGetProjectTextStylesSearchParams
     */
    readonly includeLinkedStyleguides?: boolean;
}
/**
 * Search parameters for getStyleguideTextStyles operation in TextStylesApi.
 * @export
 * @interface TextStylesApiGetStyleguideTextStylesSearchParams
 */
export interface TextStylesApiGetStyleguideTextStylesSearchParams {
    /**
     * Pagination limit
     * @type {number}
     * @memberof TextStylesApiGetStyleguideTextStylesSearchParams
     */
    readonly limit?: number;
    /**
     * Pagination offset
     * @type {number}
     * @memberof TextStylesApiGetStyleguideTextStylesSearchParams
     */
    readonly offset?: number;
    /**
     * Reference project id
     * @type {string}
     * @memberof TextStylesApiGetStyleguideTextStylesSearchParams
     */
    readonly linkedProject?: string;
    /**
     * Reference styleguide id
     * @type {string}
     * @memberof TextStylesApiGetStyleguideTextStylesSearchParams
     */
    readonly linkedStyleguide?: string;
    /**
     * Whether to include linked styleguides or not
     * @type {boolean}
     * @memberof TextStylesApiGetStyleguideTextStylesSearchParams
     */
    readonly includeLinkedStyleguides?: boolean;
}
/**
 * TextStylesApi - object-oriented interface
 * @export
 * @class TextStylesApi
 * @extends {BaseAPI}
 */
export declare class TextStylesApi extends BaseAPI {
    /**
     * List all text styles in the project\'s local styleguide
     * @summary Get project text styles
     * @param {string} projectId Project id
     * @param {TextStylesApiGetProjectTextStylesSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TextStylesApi
     */
    getProjectTextStyles(projectId: string, searchParams?: TextStylesApiGetProjectTextStylesSearchParams, options?: any): Promise<AxiosResponse<Array<TextStyle>>>;
    /**
     * Returns the text styles of the styleguide that user has access.  See [Styleguide docs](#getstyleguide) for more details about how `linked_project` and `linked_styleguide` parameters can be used to retrieve resources from styleguides that user is eligible to access.
     * @summary Get styleguide text styles
     * @param {string} styleguideId Styleguide id
     * @param {TextStylesApiGetStyleguideTextStylesSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TextStylesApi
     */
    getStyleguideTextStyles(styleguideId: string, searchParams?: TextStylesApiGetStyleguideTextStylesSearchParams, options?: any): Promise<AxiosResponse<Array<TextStyle>>>;
    /**
     * Update a text style in the project\'s local styleguide
     * @summary Update project text style
     * @param {string} projectId Project id
     * @param {string} textStyleId Text style id
     * @param {TextStyleUpdateBody} textStyleUpdateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TextStylesApi
     */
    updateProjectTextStyle(projectId: string, textStyleId: string, textStyleUpdateBody: TextStyleUpdateBody, options?: any): Promise<AxiosResponse<void>>;
    /**
     * Update a text style in the styleguide
     * @summary Update styleguide text style
     * @param {string} styleguideId Styleguide id
     * @param {string} textStyleId Text style id
     * @param {TextStyleUpdateBody} textStyleUpdateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TextStylesApi
     */
    updateStyleguideTextStyle(styleguideId: string, textStyleId: string, textStyleUpdateBody: TextStyleUpdateBody, options?: any): Promise<AxiosResponse<void>>;
}
