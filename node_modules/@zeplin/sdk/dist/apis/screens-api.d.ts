/**
 * Zeplin API
 * Access your resources in Zeplin
 *
 * Contact: support@zeplin.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosResponse } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { CommentCreateBody } from '../models';
import { CommentUpdateBody } from '../models';
import { Component } from '../models';
import { EntityReference } from '../models';
import { Screen } from '../models';
import { ScreenNote } from '../models';
import { ScreenNoteCreateBody } from '../models';
import { ScreenNoteUpdateBody } from '../models';
import { ScreenSection } from '../models';
import { ScreenUpdateBody } from '../models';
import { ScreenVariantGroup } from '../models';
import { ScreenVersion } from '../models';
import { ScreenVersionSummary } from '../models';
/**
 * ScreensApi - axios parameter creator
 * @export
 */
export declare const ScreensApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Create a new screen in the project
     * @summary Create a new screen
     * @param {string} projectId Project id
     * @param {string} name Name of the screen
     * @param {any} image Binary data of the screen image.  The image has to be in JPEG or PNG format, and its size cannot exceed 5MB.
     * @param {string} [description] Description for the screen
     * @param {string} [commitMessage] Commit message for the screen version
     * @param {string} [commitColor] Commit color for the screen version
     * @param {Array<string>} [tags] Tags for the screen
     * @param {string} [sectionId] Unique id of the screen section
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createScreen: (projectId: string, name: string, image: any, description?: string | undefined, commitMessage?: string | undefined, commitColor?: string | undefined, tags?: string[] | undefined, sectionId?: string | undefined, options?: any) => Promise<RequestArgs>;
    /**
     * Create comment on the screen note
     * @summary Create a comment
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {string} noteId Screen note id
     * @param {CommentCreateBody} commentCreateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createScreenComment: (projectId: string, screenId: string, noteId: string, commentCreateBody: CommentCreateBody, options?: any) => Promise<RequestArgs>;
    /**
     * Create a note on the screen
     * @summary Create a note
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {ScreenNoteCreateBody} screenNoteCreateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createScreenNote: (projectId: string, screenId: string, screenNoteCreateBody: ScreenNoteCreateBody, options?: any) => Promise<RequestArgs>;
    /**
     * Create a new screen version in the project
     * @summary Create a new screen version
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {any} image Binary data of the screen image.  The image has to be in JPEG or PNG format, and its size cannot exceed 5MB.
     * @param {string} [commitMessage] Commit message for the screen version
     * @param {string} [commitColor] Commit color for the screen version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createScreenVersion: (projectId: string, screenId: string, image: any, commitMessage?: string | undefined, commitColor?: string | undefined, options?: any) => Promise<RequestArgs>;
    /**
     * Delete a comment on the screen note
     * @summary Delete comment
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {string} noteId Screen note id
     * @param {string} commentId Screen comment id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteScreenComment: (projectId: string, screenId: string, noteId: string, commentId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Delete a note on the screen
     * @summary Delete a note
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {string} noteId Screen note id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteScreenNote: (projectId: string, screenId: string, noteId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get details of the latest version
     * @summary Get the latest screen version
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLatestScreenVersion: (projectId: string, screenId: string, options?: any) => Promise<RequestArgs>;
    /**
     * List all screens of the project
     * @summary Get project screens
     * @param {string} projectId Project id
     * @param {string} [sectionId] Filter by section id
     * @param {'section' | 'created'} [sort] Sort screens by their &#x60;section&#x60; or their &#x60;created&#x60; date
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectScreens: (projectId: string, sectionId?: string | undefined, sort?: "created" | "section" | undefined, limit?: number | undefined, offset?: number | undefined, options?: any) => Promise<RequestArgs>;
    /**
     * Get a single screen by id
     * @summary Get a single screen
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScreen: (projectId: string, screenId: string, options?: any) => Promise<RequestArgs>;
    /**
     * List all components in the screen
     * @summary Get screen components
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {boolean} [includeLatestVersion] Whether to include the latest version data in the Component object
     * @param {boolean} [includeLinkedStyleguides] Whether to include linked styleguides or not
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScreenComponents: (projectId: string, screenId: string, limit?: number | undefined, offset?: number | undefined, includeLatestVersion?: boolean | undefined, includeLinkedStyleguides?: boolean | undefined, options?: any) => Promise<RequestArgs>;
    /**
     * Get a screen note by id
     * @summary Get a single screen note
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {string} noteId Screen note id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScreenNote: (projectId: string, screenId: string, noteId: string, options?: any) => Promise<RequestArgs>;
    /**
     * List all notes in the screen
     * @summary Get screen notes
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScreenNotes: (projectId: string, screenId: string, limit?: number | undefined, offset?: number | undefined, options?: any) => Promise<RequestArgs>;
    /**
     * Get a screen section by id
     * @summary Get a single screen section
     * @param {string} projectId Project id
     * @param {string} sectionId Screen section id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScreenSection: (projectId: string, sectionId: string, options?: any) => Promise<RequestArgs>;
    /**
     * List all screen sections of the project
     * @summary Get screen sections
     * @param {string} projectId Project id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScreenSections: (projectId: string, limit?: number | undefined, offset?: number | undefined, options?: any) => Promise<RequestArgs>;
    /**
     * Get a screen variant by id
     * @summary Get a single screen variant
     * @param {string} projectId Project id
     * @param {string} variantId Screen variant id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScreenVariant: (projectId: string, variantId: string, options?: any) => Promise<RequestArgs>;
    /**
     * List all screen variants of the project
     * @summary Get screen variants
     * @param {string} projectId Project id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScreenVariants: (projectId: string, limit?: number | undefined, offset?: number | undefined, options?: any) => Promise<RequestArgs>;
    /**
     * Get details of the screen version
     * @summary Get a single screen version
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {string} versionId Screen version id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScreenVersion: (projectId: string, screenId: string, versionId: string, options?: any) => Promise<RequestArgs>;
    /**
     * List all versions of the screen in a project
     * @summary Get screen versions
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScreenVersions: (projectId: string, screenId: string, limit?: number | undefined, offset?: number | undefined, options?: any) => Promise<RequestArgs>;
    /**
     * Update a screen\'s description
     * @summary Update a screen
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {ScreenUpdateBody} screenUpdateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateScreen: (projectId: string, screenId: string, screenUpdateBody: ScreenUpdateBody, options?: any) => Promise<RequestArgs>;
    /**
     * Update comments on the screen note
     * @summary Update comment
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {string} noteId Screen note id
     * @param {string} commentId Screen comment id
     * @param {CommentUpdateBody} commentUpdateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateScreenComment: (projectId: string, screenId: string, noteId: string, commentId: string, commentUpdateBody: CommentUpdateBody, options?: any) => Promise<RequestArgs>;
    /**
     * Update a note on the screen
     * @summary Update a note
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {string} noteId Screen note id
     * @param {ScreenNoteUpdateBody} screenNoteUpdateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateScreenNote: (projectId: string, screenId: string, noteId: string, screenNoteUpdateBody: ScreenNoteUpdateBody, options?: any) => Promise<RequestArgs>;
};
/**
 * ScreensApi - functional programming interface
 * @export
 */
export declare const ScreensApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Create a new screen in the project
     * @summary Create a new screen
     * @param {string} projectId Project id
     * @param {string} name Name of the screen
     * @param {any} image Binary data of the screen image.  The image has to be in JPEG or PNG format, and its size cannot exceed 5MB.
     * @param {string} [description] Description for the screen
     * @param {string} [commitMessage] Commit message for the screen version
     * @param {string} [commitColor] Commit color for the screen version
     * @param {Array<string>} [tags] Tags for the screen
     * @param {string} [sectionId] Unique id of the screen section
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createScreen(projectId: string, name: string, image: any, description?: string | undefined, commitMessage?: string | undefined, commitColor?: string | undefined, tags?: string[] | undefined, sectionId?: string | undefined, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * Create comment on the screen note
     * @summary Create a comment
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {string} noteId Screen note id
     * @param {CommentCreateBody} commentCreateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createScreenComment(projectId: string, screenId: string, noteId: string, commentCreateBody: CommentCreateBody, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * Create a note on the screen
     * @summary Create a note
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {ScreenNoteCreateBody} screenNoteCreateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createScreenNote(projectId: string, screenId: string, screenNoteCreateBody: ScreenNoteCreateBody, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * Create a new screen version in the project
     * @summary Create a new screen version
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {any} image Binary data of the screen image.  The image has to be in JPEG or PNG format, and its size cannot exceed 5MB.
     * @param {string} [commitMessage] Commit message for the screen version
     * @param {string} [commitColor] Commit color for the screen version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createScreenVersion(projectId: string, screenId: string, image: any, commitMessage?: string | undefined, commitColor?: string | undefined, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * Delete a comment on the screen note
     * @summary Delete comment
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {string} noteId Screen note id
     * @param {string} commentId Screen comment id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteScreenComment(projectId: string, screenId: string, noteId: string, commentId: string, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * Delete a note on the screen
     * @summary Delete a note
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {string} noteId Screen note id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteScreenNote(projectId: string, screenId: string, noteId: string, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * Get details of the latest version
     * @summary Get the latest screen version
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLatestScreenVersion(projectId: string, screenId: string, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * List all screens of the project
     * @summary Get project screens
     * @param {string} projectId Project id
     * @param {string} [sectionId] Filter by section id
     * @param {'section' | 'created'} [sort] Sort screens by their &#x60;section&#x60; or their &#x60;created&#x60; date
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectScreens(projectId: string, sectionId?: string | undefined, sort?: "created" | "section" | undefined, limit?: number | undefined, offset?: number | undefined, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * Get a single screen by id
     * @summary Get a single screen
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScreen(projectId: string, screenId: string, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * List all components in the screen
     * @summary Get screen components
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {boolean} [includeLatestVersion] Whether to include the latest version data in the Component object
     * @param {boolean} [includeLinkedStyleguides] Whether to include linked styleguides or not
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScreenComponents(projectId: string, screenId: string, limit?: number | undefined, offset?: number | undefined, includeLatestVersion?: boolean | undefined, includeLinkedStyleguides?: boolean | undefined, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * Get a screen note by id
     * @summary Get a single screen note
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {string} noteId Screen note id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScreenNote(projectId: string, screenId: string, noteId: string, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * List all notes in the screen
     * @summary Get screen notes
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScreenNotes(projectId: string, screenId: string, limit?: number | undefined, offset?: number | undefined, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * Get a screen section by id
     * @summary Get a single screen section
     * @param {string} projectId Project id
     * @param {string} sectionId Screen section id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScreenSection(projectId: string, sectionId: string, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * List all screen sections of the project
     * @summary Get screen sections
     * @param {string} projectId Project id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScreenSections(projectId: string, limit?: number | undefined, offset?: number | undefined, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * Get a screen variant by id
     * @summary Get a single screen variant
     * @param {string} projectId Project id
     * @param {string} variantId Screen variant id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScreenVariant(projectId: string, variantId: string, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * List all screen variants of the project
     * @summary Get screen variants
     * @param {string} projectId Project id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScreenVariants(projectId: string, limit?: number | undefined, offset?: number | undefined, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * Get details of the screen version
     * @summary Get a single screen version
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {string} versionId Screen version id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScreenVersion(projectId: string, screenId: string, versionId: string, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * List all versions of the screen in a project
     * @summary Get screen versions
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScreenVersions(projectId: string, screenId: string, limit?: number | undefined, offset?: number | undefined, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * Update a screen\'s description
     * @summary Update a screen
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {ScreenUpdateBody} screenUpdateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateScreen(projectId: string, screenId: string, screenUpdateBody: ScreenUpdateBody, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * Update comments on the screen note
     * @summary Update comment
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {string} noteId Screen note id
     * @param {string} commentId Screen comment id
     * @param {CommentUpdateBody} commentUpdateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateScreenComment(projectId: string, screenId: string, noteId: string, commentId: string, commentUpdateBody: CommentUpdateBody, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * Update a note on the screen
     * @summary Update a note
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {string} noteId Screen note id
     * @param {ScreenNoteUpdateBody} screenNoteUpdateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateScreenNote(projectId: string, screenId: string, noteId: string, screenNoteUpdateBody: ScreenNoteUpdateBody, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
};
/**
 * Body for createScreen operation in ScreensApi.
 * @export
 * @interface ScreensApiCreateScreenBody
 */
export interface ScreensApiCreateScreenBody {
    /**
     * Name of the screen
     * @type {string}
     * @memberof ScreensApiCreateScreenBody
     */
    readonly name: string;
    /**
     * Binary data of the screen image.  The image has to be in JPEG or PNG format, and its size cannot exceed 5MB.
     * @type {{ file: any, type: "jpeg" | "png" }}
     * @memberof ScreensApiCreateScreenBody
     */
    readonly image: {
        file: any;
        type: "jpeg" | "png";
    };
    /**
     * Description for the screen
     * @type {string}
     * @memberof ScreensApiCreateScreenBody
     */
    readonly description?: string;
    /**
     * Commit message for the screen version
     * @type {string}
     * @memberof ScreensApiCreateScreenBody
     */
    readonly commitMessage?: string;
    /**
     * Commit color for the screen version
     * @type {string}
     * @memberof ScreensApiCreateScreenBody
     */
    readonly commitColor?: string;
    /**
     * Tags for the screen
     * @type {Array<string>}
     * @memberof ScreensApiCreateScreenBody
     */
    readonly tags?: Array<string>;
    /**
     * Unique id of the screen section
     * @type {string}
     * @memberof ScreensApiCreateScreenBody
     */
    readonly sectionId?: string;
}
/**
 * Body for createScreenVersion operation in ScreensApi.
 * @export
 * @interface ScreensApiCreateScreenVersionBody
 */
export interface ScreensApiCreateScreenVersionBody {
    /**
     * Binary data of the screen image.  The image has to be in JPEG or PNG format, and its size cannot exceed 5MB.
     * @type {{ file: any, type: "jpeg" | "png" }}
     * @memberof ScreensApiCreateScreenVersionBody
     */
    readonly image: {
        file: any;
        type: "jpeg" | "png";
    };
    /**
     * Commit message for the screen version
     * @type {string}
     * @memberof ScreensApiCreateScreenVersionBody
     */
    readonly commitMessage?: string;
    /**
     * Commit color for the screen version
     * @type {string}
     * @memberof ScreensApiCreateScreenVersionBody
     */
    readonly commitColor?: string;
}
/**
 * Search parameters for getProjectScreens operation in ScreensApi.
 * @export
 * @interface ScreensApiGetProjectScreensSearchParams
 */
export interface ScreensApiGetProjectScreensSearchParams {
    /**
     * Filter by section id
     * @type {string}
     * @memberof ScreensApiGetProjectScreensSearchParams
     */
    readonly sectionId?: string;
    /**
     * Sort screens by their &#x60;section&#x60; or their &#x60;created&#x60; date
     * @type {'section' | 'created'}
     * @memberof ScreensApiGetProjectScreensSearchParams
     */
    readonly sort?: 'section' | 'created';
    /**
     * Pagination limit
     * @type {number}
     * @memberof ScreensApiGetProjectScreensSearchParams
     */
    readonly limit?: number;
    /**
     * Pagination offset
     * @type {number}
     * @memberof ScreensApiGetProjectScreensSearchParams
     */
    readonly offset?: number;
}
/**
 * Search parameters for getScreenComponents operation in ScreensApi.
 * @export
 * @interface ScreensApiGetScreenComponentsSearchParams
 */
export interface ScreensApiGetScreenComponentsSearchParams {
    /**
     * Pagination limit
     * @type {number}
     * @memberof ScreensApiGetScreenComponentsSearchParams
     */
    readonly limit?: number;
    /**
     * Pagination offset
     * @type {number}
     * @memberof ScreensApiGetScreenComponentsSearchParams
     */
    readonly offset?: number;
    /**
     * Whether to include the latest version data in the Component object
     * @type {boolean}
     * @memberof ScreensApiGetScreenComponentsSearchParams
     */
    readonly includeLatestVersion?: boolean;
    /**
     * Whether to include linked styleguides or not
     * @type {boolean}
     * @memberof ScreensApiGetScreenComponentsSearchParams
     */
    readonly includeLinkedStyleguides?: boolean;
}
/**
 * Search parameters for getScreenNotes operation in ScreensApi.
 * @export
 * @interface ScreensApiGetScreenNotesSearchParams
 */
export interface ScreensApiGetScreenNotesSearchParams {
    /**
     * Pagination limit
     * @type {number}
     * @memberof ScreensApiGetScreenNotesSearchParams
     */
    readonly limit?: number;
    /**
     * Pagination offset
     * @type {number}
     * @memberof ScreensApiGetScreenNotesSearchParams
     */
    readonly offset?: number;
}
/**
 * Search parameters for getScreenSections operation in ScreensApi.
 * @export
 * @interface ScreensApiGetScreenSectionsSearchParams
 */
export interface ScreensApiGetScreenSectionsSearchParams {
    /**
     * Pagination limit
     * @type {number}
     * @memberof ScreensApiGetScreenSectionsSearchParams
     */
    readonly limit?: number;
    /**
     * Pagination offset
     * @type {number}
     * @memberof ScreensApiGetScreenSectionsSearchParams
     */
    readonly offset?: number;
}
/**
 * Search parameters for getScreenVariants operation in ScreensApi.
 * @export
 * @interface ScreensApiGetScreenVariantsSearchParams
 */
export interface ScreensApiGetScreenVariantsSearchParams {
    /**
     * Pagination limit
     * @type {number}
     * @memberof ScreensApiGetScreenVariantsSearchParams
     */
    readonly limit?: number;
    /**
     * Pagination offset
     * @type {number}
     * @memberof ScreensApiGetScreenVariantsSearchParams
     */
    readonly offset?: number;
}
/**
 * Search parameters for getScreenVersions operation in ScreensApi.
 * @export
 * @interface ScreensApiGetScreenVersionsSearchParams
 */
export interface ScreensApiGetScreenVersionsSearchParams {
    /**
     * Pagination limit
     * @type {number}
     * @memberof ScreensApiGetScreenVersionsSearchParams
     */
    readonly limit?: number;
    /**
     * Pagination offset
     * @type {number}
     * @memberof ScreensApiGetScreenVersionsSearchParams
     */
    readonly offset?: number;
}
/**
 * ScreensApi - object-oriented interface
 * @export
 * @class ScreensApi
 * @extends {BaseAPI}
 */
export declare class ScreensApi extends BaseAPI {
    /**
     * Create a new screen in the project
     * @summary Create a new screen
     * @param {string} projectId Project id
     * @param {string} name Name of the screen
     * @param {any} image Binary data of the screen image.  The image has to be in JPEG or PNG format, and its size cannot exceed 5MB.
     * @param {string} [description] Description for the screen
     * @param {string} [commitMessage] Commit message for the screen version
     * @param {string} [commitColor] Commit color for the screen version
     * @param {Array<string>} [tags] Tags for the screen
     * @param {string} [sectionId] Unique id of the screen section
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreensApi
     */
    createScreen(projectId: string, multipartParams: ScreensApiCreateScreenBody, options?: any): Promise<AxiosResponse<EntityReference>>;
    /**
     * Create comment on the screen note
     * @summary Create a comment
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {string} noteId Screen note id
     * @param {CommentCreateBody} commentCreateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreensApi
     */
    createScreenComment(projectId: string, screenId: string, noteId: string, commentCreateBody: CommentCreateBody, options?: any): Promise<AxiosResponse<EntityReference>>;
    /**
     * Create a note on the screen
     * @summary Create a note
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {ScreenNoteCreateBody} screenNoteCreateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreensApi
     */
    createScreenNote(projectId: string, screenId: string, screenNoteCreateBody: ScreenNoteCreateBody, options?: any): Promise<AxiosResponse<EntityReference>>;
    /**
     * Create a new screen version in the project
     * @summary Create a new screen version
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {any} image Binary data of the screen image.  The image has to be in JPEG or PNG format, and its size cannot exceed 5MB.
     * @param {string} [commitMessage] Commit message for the screen version
     * @param {string} [commitColor] Commit color for the screen version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreensApi
     */
    createScreenVersion(projectId: string, screenId: string, multipartParams: ScreensApiCreateScreenVersionBody, options?: any): Promise<AxiosResponse<EntityReference>>;
    /**
     * Delete a comment on the screen note
     * @summary Delete comment
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {string} noteId Screen note id
     * @param {string} commentId Screen comment id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreensApi
     */
    deleteScreenComment(projectId: string, screenId: string, noteId: string, commentId: string, options?: any): Promise<AxiosResponse<void>>;
    /**
     * Delete a note on the screen
     * @summary Delete a note
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {string} noteId Screen note id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreensApi
     */
    deleteScreenNote(projectId: string, screenId: string, noteId: string, options?: any): Promise<AxiosResponse<void>>;
    /**
     * Get details of the latest version
     * @summary Get the latest screen version
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreensApi
     */
    getLatestScreenVersion(projectId: string, screenId: string, options?: any): Promise<AxiosResponse<ScreenVersion>>;
    /**
     * List all screens of the project
     * @summary Get project screens
     * @param {string} projectId Project id
     * @param {ScreensApiGetProjectScreensSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreensApi
     */
    getProjectScreens(projectId: string, searchParams?: ScreensApiGetProjectScreensSearchParams, options?: any): Promise<AxiosResponse<Array<Screen>>>;
    /**
     * Get a single screen by id
     * @summary Get a single screen
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreensApi
     */
    getScreen(projectId: string, screenId: string, options?: any): Promise<AxiosResponse<Screen>>;
    /**
     * List all components in the screen
     * @summary Get screen components
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {ScreensApiGetScreenComponentsSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreensApi
     */
    getScreenComponents(projectId: string, screenId: string, searchParams?: ScreensApiGetScreenComponentsSearchParams, options?: any): Promise<AxiosResponse<Array<Component>>>;
    /**
     * Get a screen note by id
     * @summary Get a single screen note
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {string} noteId Screen note id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreensApi
     */
    getScreenNote(projectId: string, screenId: string, noteId: string, options?: any): Promise<AxiosResponse<ScreenNote>>;
    /**
     * List all notes in the screen
     * @summary Get screen notes
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {ScreensApiGetScreenNotesSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreensApi
     */
    getScreenNotes(projectId: string, screenId: string, searchParams?: ScreensApiGetScreenNotesSearchParams, options?: any): Promise<AxiosResponse<Array<ScreenNote>>>;
    /**
     * Get a screen section by id
     * @summary Get a single screen section
     * @param {string} projectId Project id
     * @param {string} sectionId Screen section id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreensApi
     */
    getScreenSection(projectId: string, sectionId: string, options?: any): Promise<AxiosResponse<ScreenSection>>;
    /**
     * List all screen sections of the project
     * @summary Get screen sections
     * @param {string} projectId Project id
     * @param {ScreensApiGetScreenSectionsSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreensApi
     */
    getScreenSections(projectId: string, searchParams?: ScreensApiGetScreenSectionsSearchParams, options?: any): Promise<AxiosResponse<Array<ScreenSection>>>;
    /**
     * Get a screen variant by id
     * @summary Get a single screen variant
     * @param {string} projectId Project id
     * @param {string} variantId Screen variant id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreensApi
     */
    getScreenVariant(projectId: string, variantId: string, options?: any): Promise<AxiosResponse<ScreenVariantGroup>>;
    /**
     * List all screen variants of the project
     * @summary Get screen variants
     * @param {string} projectId Project id
     * @param {ScreensApiGetScreenVariantsSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreensApi
     */
    getScreenVariants(projectId: string, searchParams?: ScreensApiGetScreenVariantsSearchParams, options?: any): Promise<AxiosResponse<Array<ScreenVariantGroup>>>;
    /**
     * Get details of the screen version
     * @summary Get a single screen version
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {string} versionId Screen version id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreensApi
     */
    getScreenVersion(projectId: string, screenId: string, versionId: string, options?: any): Promise<AxiosResponse<ScreenVersion>>;
    /**
     * List all versions of the screen in a project
     * @summary Get screen versions
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {ScreensApiGetScreenVersionsSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreensApi
     */
    getScreenVersions(projectId: string, screenId: string, searchParams?: ScreensApiGetScreenVersionsSearchParams, options?: any): Promise<AxiosResponse<Array<ScreenVersionSummary>>>;
    /**
     * Update a screen\'s description
     * @summary Update a screen
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {ScreenUpdateBody} screenUpdateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreensApi
     */
    updateScreen(projectId: string, screenId: string, screenUpdateBody: ScreenUpdateBody, options?: any): Promise<AxiosResponse<void>>;
    /**
     * Update comments on the screen note
     * @summary Update comment
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {string} noteId Screen note id
     * @param {string} commentId Screen comment id
     * @param {CommentUpdateBody} commentUpdateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreensApi
     */
    updateScreenComment(projectId: string, screenId: string, noteId: string, commentId: string, commentUpdateBody: CommentUpdateBody, options?: any): Promise<AxiosResponse<void>>;
    /**
     * Update a note on the screen
     * @summary Update a note
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {string} noteId Screen note id
     * @param {ScreenNoteUpdateBody} screenNoteUpdateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreensApi
     */
    updateScreenNote(projectId: string, screenId: string, noteId: string, screenNoteUpdateBody: ScreenNoteUpdateBody, options?: any): Promise<AxiosResponse<void>>;
}
