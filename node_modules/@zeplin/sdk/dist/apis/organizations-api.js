"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

require("core-js/modules/es.object.define-property.js");

require("core-js/modules/es.object.keys.js");

require("core-js/modules/es.symbol.js");

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptor.js");

require("core-js/modules/es.array.for-each.js");

require("core-js/modules/web.dom-collections.for-each.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

require("core-js/modules/es.object.define-properties.js");

require("core-js/modules/es.object.set-prototype-of.js");

require("core-js/modules/es.object.get-prototype-of.js");

require("core-js/modules/es.reflect.construct.js");

require("core-js/modules/es.object.create.js");

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.symbol.iterator.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OrganizationsApiFp = exports.OrganizationsApiAxiosParamCreator = exports.OrganizationsApi = void 0;

require("regenerator-runtime/runtime.js");

require("core-js/modules/es.regexp.exec.js");

require("core-js/modules/es.string.replace.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.object.to-string.js");

require("core-js/modules/es.string.iterator.js");

require("core-js/modules/web.dom-collections.iterator.js");

require("core-js/modules/web.url.js");

require("core-js/modules/es.array.from.js");

require("core-js/modules/es.array.map.js");

require("core-js/modules/es.promise.js");

var _axios = _interopRequireDefault(require("axios"));

var _common = require("../common");

var _base = require("../base");

var _models = require("../models");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/**
 * OrganizationsApi - axios parameter creator
 * @export
 */
var OrganizationsApiAxiosParamCreator = function OrganizationsApiAxiosParamCreator(configuration) {
  return {
    /**
     * Get details of the organization
     * @summary Get a single organization
     * @param {string} organizationId Organization id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganization: function () {
      var _getOrganization = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(organizationId) {
        var options,
            localVarPath,
            localVarUrlObj,
            baseOptions,
            localVarRequestOptions,
            localVarHeaderParameter,
            localVarQueryParameter,
            headersFromBaseOptions,
            _args = arguments;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
                // verify required parameter 'organizationId' is not null or undefined
                (0, _common.assertParamExists)('getOrganization', 'organizationId', organizationId);
                localVarPath = "/v1/organizations/{organization_id}".replace("{".concat("organization_id", "}"), encodeURIComponent(String(organizationId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

                localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);

                if (configuration) {
                  baseOptions = configuration.baseOptions;
                }

                localVarRequestOptions = _objectSpread(_objectSpread({
                  method: 'GET'
                }, baseOptions), options);
                localVarHeaderParameter = {};
                localVarQueryParameter = {}; // authentication OAuth2 required
                // oauth required

                _context.next = 10;
                return (0, _common.setOAuthToObject)(localVarHeaderParameter, "OAuth2", [], configuration);

              case 10:
                _context.next = 12;
                return (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);

              case 12:
                (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                return _context.abrupt("return", {
                  url: (0, _common.toPathString)(localVarUrlObj),
                  options: localVarRequestOptions
                });

              case 16:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function getOrganization(_x) {
        return _getOrganization.apply(this, arguments);
      }

      return getOrganization;
    }(),

    /**
     * List all aliens in the organization
     * @summary Get organization aliens
     * @param {string} organizationId Organization id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationAliens: function () {
      var _getOrganizationAliens = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(organizationId) {
        var options,
            localVarPath,
            localVarUrlObj,
            baseOptions,
            localVarRequestOptions,
            localVarHeaderParameter,
            localVarQueryParameter,
            headersFromBaseOptions,
            _args2 = arguments;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                options = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};
                // verify required parameter 'organizationId' is not null or undefined
                (0, _common.assertParamExists)('getOrganizationAliens', 'organizationId', organizationId);
                localVarPath = "/v1/organizations/{organization_id}/aliens".replace("{".concat("organization_id", "}"), encodeURIComponent(String(organizationId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

                localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);

                if (configuration) {
                  baseOptions = configuration.baseOptions;
                }

                localVarRequestOptions = _objectSpread(_objectSpread({
                  method: 'GET'
                }, baseOptions), options);
                localVarHeaderParameter = {};
                localVarQueryParameter = {}; // authentication OAuth2 required
                // oauth required

                _context2.next = 10;
                return (0, _common.setOAuthToObject)(localVarHeaderParameter, "OAuth2", [], configuration);

              case 10:
                _context2.next = 12;
                return (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);

              case 12:
                (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                return _context2.abrupt("return", {
                  url: (0, _common.toPathString)(localVarUrlObj),
                  options: localVarRequestOptions
                });

              case 16:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      function getOrganizationAliens(_x2) {
        return _getOrganizationAliens.apply(this, arguments);
      }

      return getOrganizationAliens;
    }(),

    /**
     * Get total and used seat count in the organization
     * @summary Get organization billing details
     * @param {string} organizationId Organization id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationBilling: function () {
      var _getOrganizationBilling = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(organizationId) {
        var options,
            localVarPath,
            localVarUrlObj,
            baseOptions,
            localVarRequestOptions,
            localVarHeaderParameter,
            localVarQueryParameter,
            headersFromBaseOptions,
            _args3 = arguments;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                options = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {};
                // verify required parameter 'organizationId' is not null or undefined
                (0, _common.assertParamExists)('getOrganizationBilling', 'organizationId', organizationId);
                localVarPath = "/v1/organizations/{organization_id}/billing".replace("{".concat("organization_id", "}"), encodeURIComponent(String(organizationId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

                localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);

                if (configuration) {
                  baseOptions = configuration.baseOptions;
                }

                localVarRequestOptions = _objectSpread(_objectSpread({
                  method: 'GET'
                }, baseOptions), options);
                localVarHeaderParameter = {};
                localVarQueryParameter = {}; // authentication OAuth2 required
                // oauth required

                _context3.next = 10;
                return (0, _common.setOAuthToObject)(localVarHeaderParameter, "OAuth2", [], configuration);

              case 10:
                _context3.next = 12;
                return (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);

              case 12:
                (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                return _context3.abrupt("return", {
                  url: (0, _common.toPathString)(localVarUrlObj),
                  options: localVarRequestOptions
                });

              case 16:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      function getOrganizationBilling(_x3) {
        return _getOrganizationBilling.apply(this, arguments);
      }

      return getOrganizationBilling;
    }(),

    /**
     * Get a list of projects that an organization member is a part of
     * @summary Get a member\'s projects
     * @param {string} organizationId Organization id
     * @param {string} memberId Member id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationMemberProjects: function () {
      var _getOrganizationMemberProjects = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(organizationId, memberId, limit, offset) {
        var options,
            localVarPath,
            localVarUrlObj,
            baseOptions,
            localVarRequestOptions,
            localVarHeaderParameter,
            localVarQueryParameter,
            headersFromBaseOptions,
            _args4 = arguments;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                options = _args4.length > 4 && _args4[4] !== undefined ? _args4[4] : {};
                // verify required parameter 'organizationId' is not null or undefined
                (0, _common.assertParamExists)('getOrganizationMemberProjects', 'organizationId', organizationId); // verify required parameter 'memberId' is not null or undefined

                (0, _common.assertParamExists)('getOrganizationMemberProjects', 'memberId', memberId);
                localVarPath = "/v1/organizations/{organization_id}/members/{member_id}/projects".replace("{".concat("organization_id", "}"), encodeURIComponent(String(organizationId))).replace("{".concat("member_id", "}"), encodeURIComponent(String(memberId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

                localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);

                if (configuration) {
                  baseOptions = configuration.baseOptions;
                }

                localVarRequestOptions = _objectSpread(_objectSpread({
                  method: 'GET'
                }, baseOptions), options);
                localVarHeaderParameter = {};
                localVarQueryParameter = {}; // authentication OAuth2 required
                // oauth required

                _context4.next = 11;
                return (0, _common.setOAuthToObject)(localVarHeaderParameter, "OAuth2", [], configuration);

              case 11:
                _context4.next = 13;
                return (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);

              case 13:
                if (limit !== undefined) {
                  localVarQueryParameter['limit'] = limit;
                }

                if (offset !== undefined) {
                  localVarQueryParameter['offset'] = offset;
                }

                (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                return _context4.abrupt("return", {
                  url: (0, _common.toPathString)(localVarUrlObj),
                  options: localVarRequestOptions
                });

              case 19:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      function getOrganizationMemberProjects(_x4, _x5, _x6, _x7) {
        return _getOrganizationMemberProjects.apply(this, arguments);
      }

      return getOrganizationMemberProjects;
    }(),

    /**
     * Get a list of styleguides that an organization member is a part of
     * @summary Get a member\'s styleguides
     * @param {string} organizationId Organization id
     * @param {string} memberId Member id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationMemberStyleguides: function () {
      var _getOrganizationMemberStyleguides = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(organizationId, memberId, limit, offset) {
        var options,
            localVarPath,
            localVarUrlObj,
            baseOptions,
            localVarRequestOptions,
            localVarHeaderParameter,
            localVarQueryParameter,
            headersFromBaseOptions,
            _args5 = arguments;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                options = _args5.length > 4 && _args5[4] !== undefined ? _args5[4] : {};
                // verify required parameter 'organizationId' is not null or undefined
                (0, _common.assertParamExists)('getOrganizationMemberStyleguides', 'organizationId', organizationId); // verify required parameter 'memberId' is not null or undefined

                (0, _common.assertParamExists)('getOrganizationMemberStyleguides', 'memberId', memberId);
                localVarPath = "/v1/organizations/{organization_id}/members/{member_id}/styleguides".replace("{".concat("organization_id", "}"), encodeURIComponent(String(organizationId))).replace("{".concat("member_id", "}"), encodeURIComponent(String(memberId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

                localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);

                if (configuration) {
                  baseOptions = configuration.baseOptions;
                }

                localVarRequestOptions = _objectSpread(_objectSpread({
                  method: 'GET'
                }, baseOptions), options);
                localVarHeaderParameter = {};
                localVarQueryParameter = {}; // authentication OAuth2 required
                // oauth required

                _context5.next = 11;
                return (0, _common.setOAuthToObject)(localVarHeaderParameter, "OAuth2", [], configuration);

              case 11:
                _context5.next = 13;
                return (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);

              case 13:
                if (limit !== undefined) {
                  localVarQueryParameter['limit'] = limit;
                }

                if (offset !== undefined) {
                  localVarQueryParameter['offset'] = offset;
                }

                (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                return _context5.abrupt("return", {
                  url: (0, _common.toPathString)(localVarUrlObj),
                  options: localVarRequestOptions
                });

              case 19:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }));

      function getOrganizationMemberStyleguides(_x8, _x9, _x10, _x11) {
        return _getOrganizationMemberStyleguides.apply(this, arguments);
      }

      return getOrganizationMemberStyleguides;
    }(),

    /**
     * List all members in the organization
     * @summary Get organization members
     * @param {string} organizationId Organization id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {Set<string>} [handle] Filter organization members by email, username or unique identifier of the user  ☝️Note that only organization admins (or higher) can filter members using email addresses.  Example: &#x60;?handle&#x3D;zozo&amp;handle&#x3D;5d9caaecb4a3fa9bc9718686&amp;handle&#x3D;zozo%40zeplin.io&#x60; 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationMembers: function () {
      var _getOrganizationMembers = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(organizationId, limit, offset, handle) {
        var options,
            localVarPath,
            localVarUrlObj,
            baseOptions,
            localVarRequestOptions,
            localVarHeaderParameter,
            localVarQueryParameter,
            headersFromBaseOptions,
            _args6 = arguments;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                options = _args6.length > 4 && _args6[4] !== undefined ? _args6[4] : {};
                // verify required parameter 'organizationId' is not null or undefined
                (0, _common.assertParamExists)('getOrganizationMembers', 'organizationId', organizationId);
                localVarPath = "/v1/organizations/{organization_id}/members".replace("{".concat("organization_id", "}"), encodeURIComponent(String(organizationId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

                localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);

                if (configuration) {
                  baseOptions = configuration.baseOptions;
                }

                localVarRequestOptions = _objectSpread(_objectSpread({
                  method: 'GET'
                }, baseOptions), options);
                localVarHeaderParameter = {};
                localVarQueryParameter = {}; // authentication OAuth2 required
                // oauth required

                _context6.next = 10;
                return (0, _common.setOAuthToObject)(localVarHeaderParameter, "OAuth2", [], configuration);

              case 10:
                _context6.next = 12;
                return (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);

              case 12:
                if (limit !== undefined) {
                  localVarQueryParameter['limit'] = limit;
                }

                if (offset !== undefined) {
                  localVarQueryParameter['offset'] = offset;
                }

                if (handle) {
                  localVarQueryParameter['handle'] = Array.from(handle);
                }

                (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                return _context6.abrupt("return", {
                  url: (0, _common.toPathString)(localVarUrlObj),
                  options: localVarRequestOptions
                });

              case 19:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }));

      function getOrganizationMembers(_x12, _x13, _x14, _x15) {
        return _getOrganizationMembers.apply(this, arguments);
      }

      return getOrganizationMembers;
    }(),

    /**
     * List all projects that belong to the organization
     * @summary Get organization projects
     * @param {string} organizationId Organization id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationProjects: function () {
      var _getOrganizationProjects = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(organizationId, limit, offset) {
        var options,
            localVarPath,
            localVarUrlObj,
            baseOptions,
            localVarRequestOptions,
            localVarHeaderParameter,
            localVarQueryParameter,
            headersFromBaseOptions,
            _args7 = arguments;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                options = _args7.length > 3 && _args7[3] !== undefined ? _args7[3] : {};
                // verify required parameter 'organizationId' is not null or undefined
                (0, _common.assertParamExists)('getOrganizationProjects', 'organizationId', organizationId);
                localVarPath = "/v1/organizations/{organization_id}/projects".replace("{".concat("organization_id", "}"), encodeURIComponent(String(organizationId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

                localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);

                if (configuration) {
                  baseOptions = configuration.baseOptions;
                }

                localVarRequestOptions = _objectSpread(_objectSpread({
                  method: 'GET'
                }, baseOptions), options);
                localVarHeaderParameter = {};
                localVarQueryParameter = {}; // authentication OAuth2 required
                // oauth required

                _context7.next = 10;
                return (0, _common.setOAuthToObject)(localVarHeaderParameter, "OAuth2", [], configuration);

              case 10:
                _context7.next = 12;
                return (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);

              case 12:
                if (limit !== undefined) {
                  localVarQueryParameter['limit'] = limit;
                }

                if (offset !== undefined) {
                  localVarQueryParameter['offset'] = offset;
                }

                (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                return _context7.abrupt("return", {
                  url: (0, _common.toPathString)(localVarUrlObj),
                  options: localVarRequestOptions
                });

              case 18:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7);
      }));

      function getOrganizationProjects(_x16, _x17, _x18) {
        return _getOrganizationProjects.apply(this, arguments);
      }

      return getOrganizationProjects;
    }(),

    /**
     * List all styleguides that belong to the organization
     * @summary Get organization styleguides
     * @param {string} organizationId Organization id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationStyleguides: function () {
      var _getOrganizationStyleguides = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(organizationId, limit, offset) {
        var options,
            localVarPath,
            localVarUrlObj,
            baseOptions,
            localVarRequestOptions,
            localVarHeaderParameter,
            localVarQueryParameter,
            headersFromBaseOptions,
            _args8 = arguments;
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                options = _args8.length > 3 && _args8[3] !== undefined ? _args8[3] : {};
                // verify required parameter 'organizationId' is not null or undefined
                (0, _common.assertParamExists)('getOrganizationStyleguides', 'organizationId', organizationId);
                localVarPath = "/v1/organizations/{organization_id}/styleguides".replace("{".concat("organization_id", "}"), encodeURIComponent(String(organizationId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

                localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);

                if (configuration) {
                  baseOptions = configuration.baseOptions;
                }

                localVarRequestOptions = _objectSpread(_objectSpread({
                  method: 'GET'
                }, baseOptions), options);
                localVarHeaderParameter = {};
                localVarQueryParameter = {}; // authentication OAuth2 required
                // oauth required

                _context8.next = 10;
                return (0, _common.setOAuthToObject)(localVarHeaderParameter, "OAuth2", [], configuration);

              case 10:
                _context8.next = 12;
                return (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);

              case 12:
                if (limit !== undefined) {
                  localVarQueryParameter['limit'] = limit;
                }

                if (offset !== undefined) {
                  localVarQueryParameter['offset'] = offset;
                }

                (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                return _context8.abrupt("return", {
                  url: (0, _common.toPathString)(localVarUrlObj),
                  options: localVarRequestOptions
                });

              case 18:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8);
      }));

      function getOrganizationStyleguides(_x19, _x20, _x21) {
        return _getOrganizationStyleguides.apply(this, arguments);
      }

      return getOrganizationStyleguides;
    }(),

    /**
     * List all workflow statuses that belong to the organization
     * @summary Get organization workflow statuses
     * @param {string} organizationId Organization id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationWorkflowStatuses: function () {
      var _getOrganizationWorkflowStatuses = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(organizationId) {
        var options,
            localVarPath,
            localVarUrlObj,
            baseOptions,
            localVarRequestOptions,
            localVarHeaderParameter,
            localVarQueryParameter,
            headersFromBaseOptions,
            _args9 = arguments;
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                options = _args9.length > 1 && _args9[1] !== undefined ? _args9[1] : {};
                // verify required parameter 'organizationId' is not null or undefined
                (0, _common.assertParamExists)('getOrganizationWorkflowStatuses', 'organizationId', organizationId);
                localVarPath = "/v1/organizations/{organization_id}/workflow_statuses".replace("{".concat("organization_id", "}"), encodeURIComponent(String(organizationId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

                localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);

                if (configuration) {
                  baseOptions = configuration.baseOptions;
                }

                localVarRequestOptions = _objectSpread(_objectSpread({
                  method: 'GET'
                }, baseOptions), options);
                localVarHeaderParameter = {};
                localVarQueryParameter = {}; // authentication OAuth2 required
                // oauth required

                _context9.next = 10;
                return (0, _common.setOAuthToObject)(localVarHeaderParameter, "OAuth2", [], configuration);

              case 10:
                _context9.next = 12;
                return (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);

              case 12:
                (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                return _context9.abrupt("return", {
                  url: (0, _common.toPathString)(localVarUrlObj),
                  options: localVarRequestOptions
                });

              case 16:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9);
      }));

      function getOrganizationWorkflowStatuses(_x22) {
        return _getOrganizationWorkflowStatuses.apply(this, arguments);
      }

      return getOrganizationWorkflowStatuses;
    }(),

    /**
     * List all organizations that user is a member of
     * @summary Get organizations
     * @param {Set<'owner' | 'admin' | 'editor' | 'member' | 'alien'>} [role] Filter by role  ☝️Note that the Developer role maps to &#x60;member&#x60; and the Reviewer role maps to &#x60;alien&#x60; in the API.  Example: &#x60;?role&#x3D;owner&amp;role&#x3D;admin&#x60; 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizations: function () {
      var _getOrganizations = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(role) {
        var options,
            localVarPath,
            localVarUrlObj,
            baseOptions,
            localVarRequestOptions,
            localVarHeaderParameter,
            localVarQueryParameter,
            headersFromBaseOptions,
            _args10 = arguments;
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                options = _args10.length > 1 && _args10[1] !== undefined ? _args10[1] : {};
                localVarPath = "/v1/organizations"; // use dummy base URL string because the URL constructor only accepts absolute URLs.

                localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);

                if (configuration) {
                  baseOptions = configuration.baseOptions;
                }

                localVarRequestOptions = _objectSpread(_objectSpread({
                  method: 'GET'
                }, baseOptions), options);
                localVarHeaderParameter = {};
                localVarQueryParameter = {}; // authentication OAuth2 required
                // oauth required

                _context10.next = 9;
                return (0, _common.setOAuthToObject)(localVarHeaderParameter, "OAuth2", [], configuration);

              case 9:
                _context10.next = 11;
                return (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);

              case 11:
                if (role) {
                  localVarQueryParameter['role'] = Array.from(role);
                }

                (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                return _context10.abrupt("return", {
                  url: (0, _common.toPathString)(localVarUrlObj),
                  options: localVarRequestOptions
                });

              case 16:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10);
      }));

      function getOrganizations(_x23) {
        return _getOrganizations.apply(this, arguments);
      }

      return getOrganizations;
    }(),

    /**
     * Invite a new organization member.  ☝️*Only organization admins (or higher) can invite members using **personal access tokens**. OAuth applications are not allowed.* 
     * @summary Invite member
     * @param {string} organizationId Organization id
     * @param {OrganizationMemberInviteBody} organizationMemberInviteBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    inviteOrganizationMember: function () {
      var _inviteOrganizationMember = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(organizationId, organizationMemberInviteBody) {
        var options,
            localVarPath,
            localVarUrlObj,
            baseOptions,
            localVarRequestOptions,
            localVarHeaderParameter,
            localVarQueryParameter,
            headersFromBaseOptions,
            _args11 = arguments;
        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                options = _args11.length > 2 && _args11[2] !== undefined ? _args11[2] : {};
                // verify required parameter 'organizationId' is not null or undefined
                (0, _common.assertParamExists)('inviteOrganizationMember', 'organizationId', organizationId); // verify required parameter 'organizationMemberInviteBody' is not null or undefined

                (0, _common.assertParamExists)('inviteOrganizationMember', 'organizationMemberInviteBody', organizationMemberInviteBody);
                localVarPath = "/v1/organizations/{organization_id}/members".replace("{".concat("organization_id", "}"), encodeURIComponent(String(organizationId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

                localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);

                if (configuration) {
                  baseOptions = configuration.baseOptions;
                }

                localVarRequestOptions = _objectSpread(_objectSpread({
                  method: 'POST'
                }, baseOptions), options);
                localVarHeaderParameter = {};
                localVarQueryParameter = {}; // authentication OAuth2 required
                // oauth required

                _context11.next = 11;
                return (0, _common.setOAuthToObject)(localVarHeaderParameter, "OAuth2", [], configuration);

              case 11:
                _context11.next = 13;
                return (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);

              case 13:
                localVarHeaderParameter['Content-Type'] = 'application/json';
                (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                localVarRequestOptions.data = (0, _common.serializeDataIfNeeded)((0, _models.transformOrganizationMemberInviteBodyToJSON)(organizationMemberInviteBody), localVarRequestOptions, configuration);
                return _context11.abrupt("return", {
                  url: (0, _common.toPathString)(localVarUrlObj),
                  options: localVarRequestOptions
                });

              case 19:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11);
      }));

      function inviteOrganizationMember(_x24, _x25) {
        return _inviteOrganizationMember.apply(this, arguments);
      }

      return inviteOrganizationMember;
    }(),

    /**
     * Remove a member from organization.  ☝️*Only organization admins (or higher) can remove members using **personal access tokens**. OAuth applications are not allowed.* 
     * @summary Remove an organization member
     * @param {string} organizationId Organization id
     * @param {string} memberId Member id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeOrganizationMember: function () {
      var _removeOrganizationMember = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(organizationId, memberId) {
        var options,
            localVarPath,
            localVarUrlObj,
            baseOptions,
            localVarRequestOptions,
            localVarHeaderParameter,
            localVarQueryParameter,
            headersFromBaseOptions,
            _args12 = arguments;
        return regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                options = _args12.length > 2 && _args12[2] !== undefined ? _args12[2] : {};
                // verify required parameter 'organizationId' is not null or undefined
                (0, _common.assertParamExists)('removeOrganizationMember', 'organizationId', organizationId); // verify required parameter 'memberId' is not null or undefined

                (0, _common.assertParamExists)('removeOrganizationMember', 'memberId', memberId);
                localVarPath = "/v1/organizations/{organization_id}/members/{member_id}".replace("{".concat("organization_id", "}"), encodeURIComponent(String(organizationId))).replace("{".concat("member_id", "}"), encodeURIComponent(String(memberId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

                localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);

                if (configuration) {
                  baseOptions = configuration.baseOptions;
                }

                localVarRequestOptions = _objectSpread(_objectSpread({
                  method: 'DELETE'
                }, baseOptions), options);
                localVarHeaderParameter = {};
                localVarQueryParameter = {}; // authentication PersonalAccessToken required
                // http bearer authentication required

                _context12.next = 11;
                return (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);

              case 11:
                (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                return _context12.abrupt("return", {
                  url: (0, _common.toPathString)(localVarUrlObj),
                  options: localVarRequestOptions
                });

              case 15:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12);
      }));

      function removeOrganizationMember(_x26, _x27) {
        return _removeOrganizationMember.apply(this, arguments);
      }

      return removeOrganizationMember;
    }(),

    /**
     * Update an organization member\'s role, access restriction, and tags.  ☝️*Only organization admins (or higher) can update members using **personal access tokens**. OAuth applications are not allowed.* 
     * @summary Update an organization member
     * @param {string} organizationId Organization id
     * @param {string} memberId Member id
     * @param {OrganizationMemberUpdateBody} organizationMemberUpdateBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrganizationMember: function () {
      var _updateOrganizationMember = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(organizationId, memberId, organizationMemberUpdateBody) {
        var options,
            localVarPath,
            localVarUrlObj,
            baseOptions,
            localVarRequestOptions,
            localVarHeaderParameter,
            localVarQueryParameter,
            headersFromBaseOptions,
            _args13 = arguments;
        return regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                options = _args13.length > 3 && _args13[3] !== undefined ? _args13[3] : {};
                // verify required parameter 'organizationId' is not null or undefined
                (0, _common.assertParamExists)('updateOrganizationMember', 'organizationId', organizationId); // verify required parameter 'memberId' is not null or undefined

                (0, _common.assertParamExists)('updateOrganizationMember', 'memberId', memberId); // verify required parameter 'organizationMemberUpdateBody' is not null or undefined

                (0, _common.assertParamExists)('updateOrganizationMember', 'organizationMemberUpdateBody', organizationMemberUpdateBody);
                localVarPath = "/v1/organizations/{organization_id}/members/{member_id}".replace("{".concat("organization_id", "}"), encodeURIComponent(String(organizationId))).replace("{".concat("member_id", "}"), encodeURIComponent(String(memberId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

                localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);

                if (configuration) {
                  baseOptions = configuration.baseOptions;
                }

                localVarRequestOptions = _objectSpread(_objectSpread({
                  method: 'PATCH'
                }, baseOptions), options);
                localVarHeaderParameter = {};
                localVarQueryParameter = {}; // authentication PersonalAccessToken required
                // http bearer authentication required

                _context13.next = 12;
                return (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);

              case 12:
                localVarHeaderParameter['Content-Type'] = 'application/json';
                (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                localVarRequestOptions.data = (0, _common.serializeDataIfNeeded)((0, _models.transformOrganizationMemberUpdateBodyToJSON)(organizationMemberUpdateBody), localVarRequestOptions, configuration);
                return _context13.abrupt("return", {
                  url: (0, _common.toPathString)(localVarUrlObj),
                  options: localVarRequestOptions
                });

              case 18:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13);
      }));

      function updateOrganizationMember(_x28, _x29, _x30) {
        return _updateOrganizationMember.apply(this, arguments);
      }

      return updateOrganizationMember;
    }()
  };
};
/**
 * OrganizationsApi - functional programming interface
 * @export
 */


exports.OrganizationsApiAxiosParamCreator = OrganizationsApiAxiosParamCreator;

var OrganizationsApiFp = function OrganizationsApiFp(configuration) {
  var localVarAxiosParamCreator = OrganizationsApiAxiosParamCreator(configuration);
  return {
    /**
     * Get details of the organization
     * @summary Get a single organization
     * @param {string} organizationId Organization id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganization: function getOrganization(organizationId, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                _context14.next = 2;
                return localVarAxiosParamCreator.getOrganization(organizationId, options);

              case 2:
                localVarAxiosArgs = _context14.sent;
                return _context14.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14);
      }))();
    },

    /**
     * List all aliens in the organization
     * @summary Get organization aliens
     * @param {string} organizationId Organization id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationAliens: function getOrganizationAliens(organizationId, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                _context15.next = 2;
                return localVarAxiosParamCreator.getOrganizationAliens(organizationId, options);

              case 2:
                localVarAxiosArgs = _context15.sent;
                return _context15.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15);
      }))();
    },

    /**
     * Get total and used seat count in the organization
     * @summary Get organization billing details
     * @param {string} organizationId Organization id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationBilling: function getOrganizationBilling(organizationId, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                _context16.next = 2;
                return localVarAxiosParamCreator.getOrganizationBilling(organizationId, options);

              case 2:
                localVarAxiosArgs = _context16.sent;
                return _context16.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16);
      }))();
    },

    /**
     * Get a list of projects that an organization member is a part of
     * @summary Get a member\'s projects
     * @param {string} organizationId Organization id
     * @param {string} memberId Member id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationMemberProjects: function getOrganizationMemberProjects(organizationId, memberId, limit, offset, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                _context17.next = 2;
                return localVarAxiosParamCreator.getOrganizationMemberProjects(organizationId, memberId, limit, offset, options);

              case 2:
                localVarAxiosArgs = _context17.sent;
                return _context17.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee17);
      }))();
    },

    /**
     * Get a list of styleguides that an organization member is a part of
     * @summary Get a member\'s styleguides
     * @param {string} organizationId Organization id
     * @param {string} memberId Member id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationMemberStyleguides: function getOrganizationMemberStyleguides(organizationId, memberId, limit, offset, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee18$(_context18) {
          while (1) {
            switch (_context18.prev = _context18.next) {
              case 0:
                _context18.next = 2;
                return localVarAxiosParamCreator.getOrganizationMemberStyleguides(organizationId, memberId, limit, offset, options);

              case 2:
                localVarAxiosArgs = _context18.sent;
                return _context18.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context18.stop();
            }
          }
        }, _callee18);
      }))();
    },

    /**
     * List all members in the organization
     * @summary Get organization members
     * @param {string} organizationId Organization id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {Set<string>} [handle] Filter organization members by email, username or unique identifier of the user  ☝️Note that only organization admins (or higher) can filter members using email addresses.  Example: &#x60;?handle&#x3D;zozo&amp;handle&#x3D;5d9caaecb4a3fa9bc9718686&amp;handle&#x3D;zozo%40zeplin.io&#x60; 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationMembers: function getOrganizationMembers(organizationId, limit, offset, handle, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee19() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee19$(_context19) {
          while (1) {
            switch (_context19.prev = _context19.next) {
              case 0:
                _context19.next = 2;
                return localVarAxiosParamCreator.getOrganizationMembers(organizationId, limit, offset, handle, options);

              case 2:
                localVarAxiosArgs = _context19.sent;
                return _context19.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context19.stop();
            }
          }
        }, _callee19);
      }))();
    },

    /**
     * List all projects that belong to the organization
     * @summary Get organization projects
     * @param {string} organizationId Organization id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationProjects: function getOrganizationProjects(organizationId, limit, offset, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee20() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee20$(_context20) {
          while (1) {
            switch (_context20.prev = _context20.next) {
              case 0:
                _context20.next = 2;
                return localVarAxiosParamCreator.getOrganizationProjects(organizationId, limit, offset, options);

              case 2:
                localVarAxiosArgs = _context20.sent;
                return _context20.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context20.stop();
            }
          }
        }, _callee20);
      }))();
    },

    /**
     * List all styleguides that belong to the organization
     * @summary Get organization styleguides
     * @param {string} organizationId Organization id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationStyleguides: function getOrganizationStyleguides(organizationId, limit, offset, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee21() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee21$(_context21) {
          while (1) {
            switch (_context21.prev = _context21.next) {
              case 0:
                _context21.next = 2;
                return localVarAxiosParamCreator.getOrganizationStyleguides(organizationId, limit, offset, options);

              case 2:
                localVarAxiosArgs = _context21.sent;
                return _context21.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context21.stop();
            }
          }
        }, _callee21);
      }))();
    },

    /**
     * List all workflow statuses that belong to the organization
     * @summary Get organization workflow statuses
     * @param {string} organizationId Organization id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationWorkflowStatuses: function getOrganizationWorkflowStatuses(organizationId, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee22() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee22$(_context22) {
          while (1) {
            switch (_context22.prev = _context22.next) {
              case 0:
                _context22.next = 2;
                return localVarAxiosParamCreator.getOrganizationWorkflowStatuses(organizationId, options);

              case 2:
                localVarAxiosArgs = _context22.sent;
                return _context22.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context22.stop();
            }
          }
        }, _callee22);
      }))();
    },

    /**
     * List all organizations that user is a member of
     * @summary Get organizations
     * @param {Set<'owner' | 'admin' | 'editor' | 'member' | 'alien'>} [role] Filter by role  ☝️Note that the Developer role maps to &#x60;member&#x60; and the Reviewer role maps to &#x60;alien&#x60; in the API.  Example: &#x60;?role&#x3D;owner&amp;role&#x3D;admin&#x60; 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizations: function getOrganizations(role, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee23() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee23$(_context23) {
          while (1) {
            switch (_context23.prev = _context23.next) {
              case 0:
                _context23.next = 2;
                return localVarAxiosParamCreator.getOrganizations(role, options);

              case 2:
                localVarAxiosArgs = _context23.sent;
                return _context23.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context23.stop();
            }
          }
        }, _callee23);
      }))();
    },

    /**
     * Invite a new organization member.  ☝️*Only organization admins (or higher) can invite members using **personal access tokens**. OAuth applications are not allowed.* 
     * @summary Invite member
     * @param {string} organizationId Organization id
     * @param {OrganizationMemberInviteBody} organizationMemberInviteBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    inviteOrganizationMember: function inviteOrganizationMember(organizationId, organizationMemberInviteBody, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee24() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee24$(_context24) {
          while (1) {
            switch (_context24.prev = _context24.next) {
              case 0:
                _context24.next = 2;
                return localVarAxiosParamCreator.inviteOrganizationMember(organizationId, organizationMemberInviteBody, options);

              case 2:
                localVarAxiosArgs = _context24.sent;
                return _context24.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context24.stop();
            }
          }
        }, _callee24);
      }))();
    },

    /**
     * Remove a member from organization.  ☝️*Only organization admins (or higher) can remove members using **personal access tokens**. OAuth applications are not allowed.* 
     * @summary Remove an organization member
     * @param {string} organizationId Organization id
     * @param {string} memberId Member id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeOrganizationMember: function removeOrganizationMember(organizationId, memberId, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee25() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee25$(_context25) {
          while (1) {
            switch (_context25.prev = _context25.next) {
              case 0:
                _context25.next = 2;
                return localVarAxiosParamCreator.removeOrganizationMember(organizationId, memberId, options);

              case 2:
                localVarAxiosArgs = _context25.sent;
                return _context25.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context25.stop();
            }
          }
        }, _callee25);
      }))();
    },

    /**
     * Update an organization member\'s role, access restriction, and tags.  ☝️*Only organization admins (or higher) can update members using **personal access tokens**. OAuth applications are not allowed.* 
     * @summary Update an organization member
     * @param {string} organizationId Organization id
     * @param {string} memberId Member id
     * @param {OrganizationMemberUpdateBody} organizationMemberUpdateBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrganizationMember: function updateOrganizationMember(organizationId, memberId, organizationMemberUpdateBody, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee26() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee26$(_context26) {
          while (1) {
            switch (_context26.prev = _context26.next) {
              case 0:
                _context26.next = 2;
                return localVarAxiosParamCreator.updateOrganizationMember(organizationId, memberId, organizationMemberUpdateBody, options);

              case 2:
                localVarAxiosArgs = _context26.sent;
                return _context26.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context26.stop();
            }
          }
        }, _callee26);
      }))();
    }
  };
};
/**
 * Search parameters for getOrganizationMemberProjects operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiGetOrganizationMemberProjectsSearchParams
 */


exports.OrganizationsApiFp = OrganizationsApiFp;

/**
 * OrganizationsApi - object-oriented interface
 * @export
 * @class OrganizationsApi
 * @extends {BaseAPI}
 */
var OrganizationsApi = /*#__PURE__*/function (_BaseAPI) {
  _inherits(OrganizationsApi, _BaseAPI);

  var _super = _createSuper(OrganizationsApi);

  function OrganizationsApi() {
    _classCallCheck(this, OrganizationsApi);

    return _super.apply(this, arguments);
  }

  _createClass(OrganizationsApi, [{
    key: "getOrganization",
    value:
    /**
     * Get details of the organization
     * @summary Get a single organization
     * @param {string} organizationId Organization id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    function () {
      var _getOrganization2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee27(organizationId, options) {
        var organizationsApiFp, request, response;
        return regeneratorRuntime.wrap(function _callee27$(_context27) {
          while (1) {
            switch (_context27.prev = _context27.next) {
              case 0:
                organizationsApiFp = OrganizationsApiFp(this.configuration);
                _context27.next = 3;
                return organizationsApiFp.getOrganization(organizationId, options);

              case 3:
                request = _context27.sent;
                _context27.next = 6;
                return request(this.axios, this.basePath);

              case 6:
                response = _context27.sent;
                return _context27.abrupt("return", _objectSpread(_objectSpread({}, response), {}, {
                  data: (0, _models.transformJSONToOrganization)(response.data)
                }));

              case 8:
              case "end":
                return _context27.stop();
            }
          }
        }, _callee27, this);
      }));

      function getOrganization(_x31, _x32) {
        return _getOrganization2.apply(this, arguments);
      }

      return getOrganization;
    }()
    /**
     * List all aliens in the organization
     * @summary Get organization aliens
     * @param {string} organizationId Organization id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */

  }, {
    key: "getOrganizationAliens",
    value: function () {
      var _getOrganizationAliens2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee28(organizationId, options) {
        var organizationsApiFp, request, response;
        return regeneratorRuntime.wrap(function _callee28$(_context28) {
          while (1) {
            switch (_context28.prev = _context28.next) {
              case 0:
                organizationsApiFp = OrganizationsApiFp(this.configuration);
                _context28.next = 3;
                return organizationsApiFp.getOrganizationAliens(organizationId, options);

              case 3:
                request = _context28.sent;
                _context28.next = 6;
                return request(this.axios, this.basePath);

              case 6:
                response = _context28.sent;
                return _context28.abrupt("return", _objectSpread(_objectSpread({}, response), {}, {
                  data: response.data.map(_models.transformJSONToUser)
                }));

              case 8:
              case "end":
                return _context28.stop();
            }
          }
        }, _callee28, this);
      }));

      function getOrganizationAliens(_x33, _x34) {
        return _getOrganizationAliens2.apply(this, arguments);
      }

      return getOrganizationAliens;
    }()
    /**
     * Get total and used seat count in the organization
     * @summary Get organization billing details
     * @param {string} organizationId Organization id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */

  }, {
    key: "getOrganizationBilling",
    value: function () {
      var _getOrganizationBilling2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee29(organizationId, options) {
        var organizationsApiFp, request, response;
        return regeneratorRuntime.wrap(function _callee29$(_context29) {
          while (1) {
            switch (_context29.prev = _context29.next) {
              case 0:
                organizationsApiFp = OrganizationsApiFp(this.configuration);
                _context29.next = 3;
                return organizationsApiFp.getOrganizationBilling(organizationId, options);

              case 3:
                request = _context29.sent;
                _context29.next = 6;
                return request(this.axios, this.basePath);

              case 6:
                response = _context29.sent;
                return _context29.abrupt("return", _objectSpread(_objectSpread({}, response), {}, {
                  data: (0, _models.transformJSONToOrganizationBilling)(response.data)
                }));

              case 8:
              case "end":
                return _context29.stop();
            }
          }
        }, _callee29, this);
      }));

      function getOrganizationBilling(_x35, _x36) {
        return _getOrganizationBilling2.apply(this, arguments);
      }

      return getOrganizationBilling;
    }()
    /**
     * Get a list of projects that an organization member is a part of
     * @summary Get a member\'s projects
     * @param {string} organizationId Organization id
     * @param {string} memberId Member id
     * @param {OrganizationsApiGetOrganizationMemberProjectsSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */

  }, {
    key: "getOrganizationMemberProjects",
    value: function () {
      var _getOrganizationMemberProjects2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee30(organizationId, memberId) {
        var searchParams,
            options,
            organizationsApiFp,
            request,
            response,
            _args30 = arguments;
        return regeneratorRuntime.wrap(function _callee30$(_context30) {
          while (1) {
            switch (_context30.prev = _context30.next) {
              case 0:
                searchParams = _args30.length > 2 && _args30[2] !== undefined ? _args30[2] : {};
                options = _args30.length > 3 ? _args30[3] : undefined;
                organizationsApiFp = OrganizationsApiFp(this.configuration);
                _context30.next = 5;
                return organizationsApiFp.getOrganizationMemberProjects(organizationId, memberId, searchParams.limit, searchParams.offset, options);

              case 5:
                request = _context30.sent;
                _context30.next = 8;
                return request(this.axios, this.basePath);

              case 8:
                response = _context30.sent;
                return _context30.abrupt("return", _objectSpread(_objectSpread({}, response), {}, {
                  data: response.data.map(_models.transformJSONToProject)
                }));

              case 10:
              case "end":
                return _context30.stop();
            }
          }
        }, _callee30, this);
      }));

      function getOrganizationMemberProjects(_x37, _x38) {
        return _getOrganizationMemberProjects2.apply(this, arguments);
      }

      return getOrganizationMemberProjects;
    }()
    /**
     * Get a list of styleguides that an organization member is a part of
     * @summary Get a member\'s styleguides
     * @param {string} organizationId Organization id
     * @param {string} memberId Member id
     * @param {OrganizationsApiGetOrganizationMemberStyleguidesSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */

  }, {
    key: "getOrganizationMemberStyleguides",
    value: function () {
      var _getOrganizationMemberStyleguides2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee31(organizationId, memberId) {
        var searchParams,
            options,
            organizationsApiFp,
            request,
            response,
            _args31 = arguments;
        return regeneratorRuntime.wrap(function _callee31$(_context31) {
          while (1) {
            switch (_context31.prev = _context31.next) {
              case 0:
                searchParams = _args31.length > 2 && _args31[2] !== undefined ? _args31[2] : {};
                options = _args31.length > 3 ? _args31[3] : undefined;
                organizationsApiFp = OrganizationsApiFp(this.configuration);
                _context31.next = 5;
                return organizationsApiFp.getOrganizationMemberStyleguides(organizationId, memberId, searchParams.limit, searchParams.offset, options);

              case 5:
                request = _context31.sent;
                _context31.next = 8;
                return request(this.axios, this.basePath);

              case 8:
                response = _context31.sent;
                return _context31.abrupt("return", _objectSpread(_objectSpread({}, response), {}, {
                  data: response.data.map(_models.transformJSONToStyleguide)
                }));

              case 10:
              case "end":
                return _context31.stop();
            }
          }
        }, _callee31, this);
      }));

      function getOrganizationMemberStyleguides(_x39, _x40) {
        return _getOrganizationMemberStyleguides2.apply(this, arguments);
      }

      return getOrganizationMemberStyleguides;
    }()
    /**
     * List all members in the organization
     * @summary Get organization members
     * @param {string} organizationId Organization id
     * @param {OrganizationsApiGetOrganizationMembersSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */

  }, {
    key: "getOrganizationMembers",
    value: function () {
      var _getOrganizationMembers2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee32(organizationId) {
        var searchParams,
            options,
            organizationsApiFp,
            request,
            response,
            _args32 = arguments;
        return regeneratorRuntime.wrap(function _callee32$(_context32) {
          while (1) {
            switch (_context32.prev = _context32.next) {
              case 0:
                searchParams = _args32.length > 1 && _args32[1] !== undefined ? _args32[1] : {};
                options = _args32.length > 2 ? _args32[2] : undefined;
                organizationsApiFp = OrganizationsApiFp(this.configuration);
                _context32.next = 5;
                return organizationsApiFp.getOrganizationMembers(organizationId, searchParams.limit, searchParams.offset, searchParams.handle, options);

              case 5:
                request = _context32.sent;
                _context32.next = 8;
                return request(this.axios, this.basePath);

              case 8:
                response = _context32.sent;
                return _context32.abrupt("return", _objectSpread(_objectSpread({}, response), {}, {
                  data: response.data.map(_models.transformJSONToOrganizationMember)
                }));

              case 10:
              case "end":
                return _context32.stop();
            }
          }
        }, _callee32, this);
      }));

      function getOrganizationMembers(_x41) {
        return _getOrganizationMembers2.apply(this, arguments);
      }

      return getOrganizationMembers;
    }()
    /**
     * List all projects that belong to the organization
     * @summary Get organization projects
     * @param {string} organizationId Organization id
     * @param {OrganizationsApiGetOrganizationProjectsSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */

  }, {
    key: "getOrganizationProjects",
    value: function () {
      var _getOrganizationProjects2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee33(organizationId) {
        var searchParams,
            options,
            organizationsApiFp,
            request,
            response,
            _args33 = arguments;
        return regeneratorRuntime.wrap(function _callee33$(_context33) {
          while (1) {
            switch (_context33.prev = _context33.next) {
              case 0:
                searchParams = _args33.length > 1 && _args33[1] !== undefined ? _args33[1] : {};
                options = _args33.length > 2 ? _args33[2] : undefined;
                organizationsApiFp = OrganizationsApiFp(this.configuration);
                _context33.next = 5;
                return organizationsApiFp.getOrganizationProjects(organizationId, searchParams.limit, searchParams.offset, options);

              case 5:
                request = _context33.sent;
                _context33.next = 8;
                return request(this.axios, this.basePath);

              case 8:
                response = _context33.sent;
                return _context33.abrupt("return", _objectSpread(_objectSpread({}, response), {}, {
                  data: response.data.map(_models.transformJSONToProject)
                }));

              case 10:
              case "end":
                return _context33.stop();
            }
          }
        }, _callee33, this);
      }));

      function getOrganizationProjects(_x42) {
        return _getOrganizationProjects2.apply(this, arguments);
      }

      return getOrganizationProjects;
    }()
    /**
     * List all styleguides that belong to the organization
     * @summary Get organization styleguides
     * @param {string} organizationId Organization id
     * @param {OrganizationsApiGetOrganizationStyleguidesSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */

  }, {
    key: "getOrganizationStyleguides",
    value: function () {
      var _getOrganizationStyleguides2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee34(organizationId) {
        var searchParams,
            options,
            organizationsApiFp,
            request,
            response,
            _args34 = arguments;
        return regeneratorRuntime.wrap(function _callee34$(_context34) {
          while (1) {
            switch (_context34.prev = _context34.next) {
              case 0:
                searchParams = _args34.length > 1 && _args34[1] !== undefined ? _args34[1] : {};
                options = _args34.length > 2 ? _args34[2] : undefined;
                organizationsApiFp = OrganizationsApiFp(this.configuration);
                _context34.next = 5;
                return organizationsApiFp.getOrganizationStyleguides(organizationId, searchParams.limit, searchParams.offset, options);

              case 5:
                request = _context34.sent;
                _context34.next = 8;
                return request(this.axios, this.basePath);

              case 8:
                response = _context34.sent;
                return _context34.abrupt("return", _objectSpread(_objectSpread({}, response), {}, {
                  data: response.data.map(_models.transformJSONToStyleguide)
                }));

              case 10:
              case "end":
                return _context34.stop();
            }
          }
        }, _callee34, this);
      }));

      function getOrganizationStyleguides(_x43) {
        return _getOrganizationStyleguides2.apply(this, arguments);
      }

      return getOrganizationStyleguides;
    }()
    /**
     * List all workflow statuses that belong to the organization
     * @summary Get organization workflow statuses
     * @param {string} organizationId Organization id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */

  }, {
    key: "getOrganizationWorkflowStatuses",
    value: function () {
      var _getOrganizationWorkflowStatuses2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee35(organizationId, options) {
        var organizationsApiFp, request, response;
        return regeneratorRuntime.wrap(function _callee35$(_context35) {
          while (1) {
            switch (_context35.prev = _context35.next) {
              case 0:
                organizationsApiFp = OrganizationsApiFp(this.configuration);
                _context35.next = 3;
                return organizationsApiFp.getOrganizationWorkflowStatuses(organizationId, options);

              case 3:
                request = _context35.sent;
                _context35.next = 6;
                return request(this.axios, this.basePath);

              case 6:
                response = _context35.sent;
                return _context35.abrupt("return", _objectSpread(_objectSpread({}, response), {}, {
                  data: response.data.map(_models.transformJSONToWorkflowStatus)
                }));

              case 8:
              case "end":
                return _context35.stop();
            }
          }
        }, _callee35, this);
      }));

      function getOrganizationWorkflowStatuses(_x44, _x45) {
        return _getOrganizationWorkflowStatuses2.apply(this, arguments);
      }

      return getOrganizationWorkflowStatuses;
    }()
    /**
     * List all organizations that user is a member of
     * @summary Get organizations
     * @param {OrganizationsApiGetOrganizationsSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */

  }, {
    key: "getOrganizations",
    value: function () {
      var _getOrganizations2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee36() {
        var searchParams,
            options,
            organizationsApiFp,
            request,
            response,
            _args36 = arguments;
        return regeneratorRuntime.wrap(function _callee36$(_context36) {
          while (1) {
            switch (_context36.prev = _context36.next) {
              case 0:
                searchParams = _args36.length > 0 && _args36[0] !== undefined ? _args36[0] : {};
                options = _args36.length > 1 ? _args36[1] : undefined;
                organizationsApiFp = OrganizationsApiFp(this.configuration);
                _context36.next = 5;
                return organizationsApiFp.getOrganizations(searchParams.role, options);

              case 5:
                request = _context36.sent;
                _context36.next = 8;
                return request(this.axios, this.basePath);

              case 8:
                response = _context36.sent;
                return _context36.abrupt("return", _objectSpread(_objectSpread({}, response), {}, {
                  data: response.data.map(_models.transformJSONToOrganizationSummary)
                }));

              case 10:
              case "end":
                return _context36.stop();
            }
          }
        }, _callee36, this);
      }));

      function getOrganizations() {
        return _getOrganizations2.apply(this, arguments);
      }

      return getOrganizations;
    }()
    /**
     * Invite a new organization member.  ☝️*Only organization admins (or higher) can invite members using **personal access tokens**. OAuth applications are not allowed.* 
     * @summary Invite member
     * @param {string} organizationId Organization id
     * @param {OrganizationMemberInviteBody} organizationMemberInviteBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */

  }, {
    key: "inviteOrganizationMember",
    value: function () {
      var _inviteOrganizationMember2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee37(organizationId, organizationMemberInviteBody, options) {
        var organizationsApiFp, request, response;
        return regeneratorRuntime.wrap(function _callee37$(_context37) {
          while (1) {
            switch (_context37.prev = _context37.next) {
              case 0:
                organizationsApiFp = OrganizationsApiFp(this.configuration);
                _context37.next = 3;
                return organizationsApiFp.inviteOrganizationMember(organizationId, organizationMemberInviteBody, options);

              case 3:
                request = _context37.sent;
                _context37.next = 6;
                return request(this.axios, this.basePath);

              case 6:
                response = _context37.sent;
                return _context37.abrupt("return", _objectSpread(_objectSpread({}, response), {}, {
                  data: (0, _models.transformJSONToOrganizationMember)(response.data)
                }));

              case 8:
              case "end":
                return _context37.stop();
            }
          }
        }, _callee37, this);
      }));

      function inviteOrganizationMember(_x46, _x47, _x48) {
        return _inviteOrganizationMember2.apply(this, arguments);
      }

      return inviteOrganizationMember;
    }()
    /**
     * Remove a member from organization.  ☝️*Only organization admins (or higher) can remove members using **personal access tokens**. OAuth applications are not allowed.* 
     * @summary Remove an organization member
     * @param {string} organizationId Organization id
     * @param {string} memberId Member id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */

  }, {
    key: "removeOrganizationMember",
    value: function () {
      var _removeOrganizationMember2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee38(organizationId, memberId, options) {
        var organizationsApiFp, request, response;
        return regeneratorRuntime.wrap(function _callee38$(_context38) {
          while (1) {
            switch (_context38.prev = _context38.next) {
              case 0:
                organizationsApiFp = OrganizationsApiFp(this.configuration);
                _context38.next = 3;
                return organizationsApiFp.removeOrganizationMember(organizationId, memberId, options);

              case 3:
                request = _context38.sent;
                _context38.next = 6;
                return request(this.axios, this.basePath);

              case 6:
                response = _context38.sent;
                return _context38.abrupt("return", response);

              case 8:
              case "end":
                return _context38.stop();
            }
          }
        }, _callee38, this);
      }));

      function removeOrganizationMember(_x49, _x50, _x51) {
        return _removeOrganizationMember2.apply(this, arguments);
      }

      return removeOrganizationMember;
    }()
    /**
     * Update an organization member\'s role, access restriction, and tags.  ☝️*Only organization admins (or higher) can update members using **personal access tokens**. OAuth applications are not allowed.* 
     * @summary Update an organization member
     * @param {string} organizationId Organization id
     * @param {string} memberId Member id
     * @param {OrganizationMemberUpdateBody} organizationMemberUpdateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */

  }, {
    key: "updateOrganizationMember",
    value: function () {
      var _updateOrganizationMember2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee39(organizationId, memberId, organizationMemberUpdateBody, options) {
        var organizationsApiFp, request, response;
        return regeneratorRuntime.wrap(function _callee39$(_context39) {
          while (1) {
            switch (_context39.prev = _context39.next) {
              case 0:
                organizationsApiFp = OrganizationsApiFp(this.configuration);
                _context39.next = 3;
                return organizationsApiFp.updateOrganizationMember(organizationId, memberId, organizationMemberUpdateBody, options);

              case 3:
                request = _context39.sent;
                _context39.next = 6;
                return request(this.axios, this.basePath);

              case 6:
                response = _context39.sent;
                return _context39.abrupt("return", response);

              case 8:
              case "end":
                return _context39.stop();
            }
          }
        }, _callee39, this);
      }));

      function updateOrganizationMember(_x52, _x53, _x54, _x55) {
        return _updateOrganizationMember2.apply(this, arguments);
      }

      return updateOrganizationMember;
    }()
  }]);

  return OrganizationsApi;
}(_base.BaseAPI);

exports.OrganizationsApi = OrganizationsApi;