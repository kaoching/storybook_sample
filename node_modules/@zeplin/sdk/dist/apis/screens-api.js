"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

require("core-js/modules/es.object.define-property.js");

require("core-js/modules/es.object.keys.js");

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptor.js");

require("core-js/modules/es.array.for-each.js");

require("core-js/modules/web.dom-collections.for-each.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

require("core-js/modules/es.object.define-properties.js");

require("core-js/modules/es.object.set-prototype-of.js");

require("core-js/modules/es.object.get-prototype-of.js");

require("core-js/modules/es.reflect.construct.js");

require("core-js/modules/es.object.create.js");

require("core-js/modules/es.symbol.iterator.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ScreensApiFp = exports.ScreensApiAxiosParamCreator = exports.ScreensApi = void 0;

require("regenerator-runtime/runtime.js");

require("core-js/modules/es.regexp.exec.js");

require("core-js/modules/es.string.replace.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.object.to-string.js");

require("core-js/modules/es.string.iterator.js");

require("core-js/modules/web.dom-collections.iterator.js");

require("core-js/modules/web.url.js");

require("core-js/modules/es.array.join.js");

require("core-js/modules/es.object.assign.js");

require("core-js/modules/es.array.sort.js");

require("core-js/modules/es.function.name.js");

require("core-js/modules/es.symbol.js");

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.array.map.js");

require("core-js/modules/es.promise.js");

var _axios = _interopRequireDefault(require("axios"));

var _formData = _interopRequireDefault(require("form-data"));

var _common = require("../common");

var _base = require("../base");

var _models = require("../models");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/**
 * ScreensApi - axios parameter creator
 * @export
 */
var ScreensApiAxiosParamCreator = function ScreensApiAxiosParamCreator(configuration) {
  return {
    /**
     * Create a new screen in the project
     * @summary Create a new screen
     * @param {string} projectId Project id
     * @param {string} name Name of the screen
     * @param {any} image Binary data of the screen image.  The image has to be in JPEG or PNG format, and its size cannot exceed 5MB. 
     * @param {string} [description] Description for the screen
     * @param {string} [commitMessage] Commit message for the screen version
     * @param {string} [commitColor] Commit color for the screen version
     * @param {Array<string>} [tags] Tags for the screen
     * @param {string} [sectionId] Unique id of the screen section
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createScreen: function () {
      var _createScreen = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(projectId, name, image, description, commitMessage, commitColor, tags, sectionId) {
        var options,
            localVarPath,
            localVarUrlObj,
            baseOptions,
            localVarRequestOptions,
            localVarHeaderParameter,
            localVarQueryParameter,
            localVarFormParams,
            headersFromBaseOptions,
            _args = arguments;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                options = _args.length > 8 && _args[8] !== undefined ? _args[8] : {};
                // verify required parameter 'projectId' is not null or undefined
                (0, _common.assertParamExists)('createScreen', 'projectId', projectId); // verify required parameter 'name' is not null or undefined

                (0, _common.assertParamExists)('createScreen', 'name', name); // verify required parameter 'image' is not null or undefined

                (0, _common.assertParamExists)('createScreen', 'image', image);
                localVarPath = "/v1/projects/{project_id}/screens".replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

                localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);

                if (configuration) {
                  baseOptions = configuration.baseOptions;
                }

                localVarRequestOptions = _objectSpread(_objectSpread({
                  method: 'POST'
                }, baseOptions), options);
                localVarHeaderParameter = {};
                localVarQueryParameter = {};
                localVarFormParams = new _formData["default"](); // authentication OAuth2 required
                // oauth required

                _context.next = 13;
                return (0, _common.setOAuthToObject)(localVarHeaderParameter, "OAuth2", [], configuration);

              case 13:
                _context.next = 15;
                return (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);

              case 15:
                if (name !== undefined) {
                  localVarFormParams.append('name', name);
                }

                if (image !== undefined) {
                  localVarFormParams.append('image', image.file, "image.".concat(image.type));
                }

                if (description !== undefined) {
                  localVarFormParams.append('description', description);
                }

                if (commitMessage !== undefined) {
                  localVarFormParams.append('commit_message', commitMessage);
                }

                if (commitColor !== undefined) {
                  localVarFormParams.append('commit_color', commitColor);
                }

                if (tags) {
                  localVarFormParams.append('tags', tags.join(_base.COLLECTION_FORMATS.csv));
                }

                if (sectionId !== undefined) {
                  localVarFormParams.append('section_id', sectionId);
                }

                if (localVarFormParams.getHeaders) {
                  Object.assign(localVarHeaderParameter, localVarFormParams.getHeaders());
                } else {
                  localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
                }

                (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                localVarRequestOptions.data = localVarFormParams;
                return _context.abrupt("return", {
                  url: (0, _common.toPathString)(localVarUrlObj),
                  options: localVarRequestOptions
                });

              case 28:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function createScreen(_x, _x2, _x3, _x4, _x5, _x6, _x7, _x8) {
        return _createScreen.apply(this, arguments);
      }

      return createScreen;
    }(),

    /**
     * Create comment on the screen note
     * @summary Create a comment
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {string} noteId Screen note id
     * @param {CommentCreateBody} commentCreateBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createScreenComment: function () {
      var _createScreenComment = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(projectId, screenId, noteId, commentCreateBody) {
        var options,
            localVarPath,
            localVarUrlObj,
            baseOptions,
            localVarRequestOptions,
            localVarHeaderParameter,
            localVarQueryParameter,
            headersFromBaseOptions,
            _args2 = arguments;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                options = _args2.length > 4 && _args2[4] !== undefined ? _args2[4] : {};
                // verify required parameter 'projectId' is not null or undefined
                (0, _common.assertParamExists)('createScreenComment', 'projectId', projectId); // verify required parameter 'screenId' is not null or undefined

                (0, _common.assertParamExists)('createScreenComment', 'screenId', screenId); // verify required parameter 'noteId' is not null or undefined

                (0, _common.assertParamExists)('createScreenComment', 'noteId', noteId); // verify required parameter 'commentCreateBody' is not null or undefined

                (0, _common.assertParamExists)('createScreenComment', 'commentCreateBody', commentCreateBody);
                localVarPath = "/v1/projects/{project_id}/screens/{screen_id}/notes/{note_id}/comments".replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId))).replace("{".concat("screen_id", "}"), encodeURIComponent(String(screenId))).replace("{".concat("note_id", "}"), encodeURIComponent(String(noteId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

                localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);

                if (configuration) {
                  baseOptions = configuration.baseOptions;
                }

                localVarRequestOptions = _objectSpread(_objectSpread({
                  method: 'POST'
                }, baseOptions), options);
                localVarHeaderParameter = {};
                localVarQueryParameter = {}; // authentication OAuth2 required
                // oauth required

                _context2.next = 13;
                return (0, _common.setOAuthToObject)(localVarHeaderParameter, "OAuth2", [], configuration);

              case 13:
                _context2.next = 15;
                return (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);

              case 15:
                localVarHeaderParameter['Content-Type'] = 'application/json';
                (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                localVarRequestOptions.data = (0, _common.serializeDataIfNeeded)((0, _models.transformCommentCreateBodyToJSON)(commentCreateBody), localVarRequestOptions, configuration);
                return _context2.abrupt("return", {
                  url: (0, _common.toPathString)(localVarUrlObj),
                  options: localVarRequestOptions
                });

              case 21:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      function createScreenComment(_x9, _x10, _x11, _x12) {
        return _createScreenComment.apply(this, arguments);
      }

      return createScreenComment;
    }(),

    /**
     * Create a note on the screen
     * @summary Create a note
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {ScreenNoteCreateBody} screenNoteCreateBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createScreenNote: function () {
      var _createScreenNote = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(projectId, screenId, screenNoteCreateBody) {
        var options,
            localVarPath,
            localVarUrlObj,
            baseOptions,
            localVarRequestOptions,
            localVarHeaderParameter,
            localVarQueryParameter,
            headersFromBaseOptions,
            _args3 = arguments;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                options = _args3.length > 3 && _args3[3] !== undefined ? _args3[3] : {};
                // verify required parameter 'projectId' is not null or undefined
                (0, _common.assertParamExists)('createScreenNote', 'projectId', projectId); // verify required parameter 'screenId' is not null or undefined

                (0, _common.assertParamExists)('createScreenNote', 'screenId', screenId); // verify required parameter 'screenNoteCreateBody' is not null or undefined

                (0, _common.assertParamExists)('createScreenNote', 'screenNoteCreateBody', screenNoteCreateBody);
                localVarPath = "/v1/projects/{project_id}/screens/{screen_id}/notes".replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId))).replace("{".concat("screen_id", "}"), encodeURIComponent(String(screenId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

                localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);

                if (configuration) {
                  baseOptions = configuration.baseOptions;
                }

                localVarRequestOptions = _objectSpread(_objectSpread({
                  method: 'POST'
                }, baseOptions), options);
                localVarHeaderParameter = {};
                localVarQueryParameter = {}; // authentication OAuth2 required
                // oauth required

                _context3.next = 12;
                return (0, _common.setOAuthToObject)(localVarHeaderParameter, "OAuth2", [], configuration);

              case 12:
                _context3.next = 14;
                return (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);

              case 14:
                localVarHeaderParameter['Content-Type'] = 'application/json';
                (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                localVarRequestOptions.data = (0, _common.serializeDataIfNeeded)((0, _models.transformScreenNoteCreateBodyToJSON)(screenNoteCreateBody), localVarRequestOptions, configuration);
                return _context3.abrupt("return", {
                  url: (0, _common.toPathString)(localVarUrlObj),
                  options: localVarRequestOptions
                });

              case 20:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      function createScreenNote(_x13, _x14, _x15) {
        return _createScreenNote.apply(this, arguments);
      }

      return createScreenNote;
    }(),

    /**
     * Create a new screen version in the project
     * @summary Create a new screen version
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {any} image Binary data of the screen image.  The image has to be in JPEG or PNG format, and its size cannot exceed 5MB. 
     * @param {string} [commitMessage] Commit message for the screen version
     * @param {string} [commitColor] Commit color for the screen version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createScreenVersion: function () {
      var _createScreenVersion = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(projectId, screenId, image, commitMessage, commitColor) {
        var options,
            localVarPath,
            localVarUrlObj,
            baseOptions,
            localVarRequestOptions,
            localVarHeaderParameter,
            localVarQueryParameter,
            localVarFormParams,
            headersFromBaseOptions,
            _args4 = arguments;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                options = _args4.length > 5 && _args4[5] !== undefined ? _args4[5] : {};
                // verify required parameter 'projectId' is not null or undefined
                (0, _common.assertParamExists)('createScreenVersion', 'projectId', projectId); // verify required parameter 'screenId' is not null or undefined

                (0, _common.assertParamExists)('createScreenVersion', 'screenId', screenId); // verify required parameter 'image' is not null or undefined

                (0, _common.assertParamExists)('createScreenVersion', 'image', image);
                localVarPath = "/v1/projects/{project_id}/screens/{screen_id}/versions".replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId))).replace("{".concat("screen_id", "}"), encodeURIComponent(String(screenId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

                localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);

                if (configuration) {
                  baseOptions = configuration.baseOptions;
                }

                localVarRequestOptions = _objectSpread(_objectSpread({
                  method: 'POST'
                }, baseOptions), options);
                localVarHeaderParameter = {};
                localVarQueryParameter = {};
                localVarFormParams = new _formData["default"](); // authentication OAuth2 required
                // oauth required

                _context4.next = 13;
                return (0, _common.setOAuthToObject)(localVarHeaderParameter, "OAuth2", [], configuration);

              case 13:
                _context4.next = 15;
                return (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);

              case 15:
                if (image !== undefined) {
                  localVarFormParams.append('image', image.file, "image.".concat(image.type));
                }

                if (commitMessage !== undefined) {
                  localVarFormParams.append('commit_message', commitMessage);
                }

                if (commitColor !== undefined) {
                  localVarFormParams.append('commit_color', commitColor);
                }

                if (localVarFormParams.getHeaders) {
                  Object.assign(localVarHeaderParameter, localVarFormParams.getHeaders());
                } else {
                  localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
                }

                (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                localVarRequestOptions.data = localVarFormParams;
                return _context4.abrupt("return", {
                  url: (0, _common.toPathString)(localVarUrlObj),
                  options: localVarRequestOptions
                });

              case 24:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      function createScreenVersion(_x16, _x17, _x18, _x19, _x20) {
        return _createScreenVersion.apply(this, arguments);
      }

      return createScreenVersion;
    }(),

    /**
     * Delete a comment on the screen note
     * @summary Delete comment
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {string} noteId Screen note id
     * @param {string} commentId Screen comment id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteScreenComment: function () {
      var _deleteScreenComment = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(projectId, screenId, noteId, commentId) {
        var options,
            localVarPath,
            localVarUrlObj,
            baseOptions,
            localVarRequestOptions,
            localVarHeaderParameter,
            localVarQueryParameter,
            headersFromBaseOptions,
            _args5 = arguments;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                options = _args5.length > 4 && _args5[4] !== undefined ? _args5[4] : {};
                // verify required parameter 'projectId' is not null or undefined
                (0, _common.assertParamExists)('deleteScreenComment', 'projectId', projectId); // verify required parameter 'screenId' is not null or undefined

                (0, _common.assertParamExists)('deleteScreenComment', 'screenId', screenId); // verify required parameter 'noteId' is not null or undefined

                (0, _common.assertParamExists)('deleteScreenComment', 'noteId', noteId); // verify required parameter 'commentId' is not null or undefined

                (0, _common.assertParamExists)('deleteScreenComment', 'commentId', commentId);
                localVarPath = "/v1/projects/{project_id}/screens/{screen_id}/notes/{note_id}/comments/{comment_id}".replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId))).replace("{".concat("screen_id", "}"), encodeURIComponent(String(screenId))).replace("{".concat("note_id", "}"), encodeURIComponent(String(noteId))).replace("{".concat("comment_id", "}"), encodeURIComponent(String(commentId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

                localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);

                if (configuration) {
                  baseOptions = configuration.baseOptions;
                }

                localVarRequestOptions = _objectSpread(_objectSpread({
                  method: 'DELETE'
                }, baseOptions), options);
                localVarHeaderParameter = {};
                localVarQueryParameter = {}; // authentication OAuth2 required
                // oauth required

                _context5.next = 13;
                return (0, _common.setOAuthToObject)(localVarHeaderParameter, "OAuth2", [], configuration);

              case 13:
                _context5.next = 15;
                return (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);

              case 15:
                (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                return _context5.abrupt("return", {
                  url: (0, _common.toPathString)(localVarUrlObj),
                  options: localVarRequestOptions
                });

              case 19:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }));

      function deleteScreenComment(_x21, _x22, _x23, _x24) {
        return _deleteScreenComment.apply(this, arguments);
      }

      return deleteScreenComment;
    }(),

    /**
     * Delete a note on the screen
     * @summary Delete a note
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {string} noteId Screen note id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteScreenNote: function () {
      var _deleteScreenNote = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(projectId, screenId, noteId) {
        var options,
            localVarPath,
            localVarUrlObj,
            baseOptions,
            localVarRequestOptions,
            localVarHeaderParameter,
            localVarQueryParameter,
            headersFromBaseOptions,
            _args6 = arguments;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                options = _args6.length > 3 && _args6[3] !== undefined ? _args6[3] : {};
                // verify required parameter 'projectId' is not null or undefined
                (0, _common.assertParamExists)('deleteScreenNote', 'projectId', projectId); // verify required parameter 'screenId' is not null or undefined

                (0, _common.assertParamExists)('deleteScreenNote', 'screenId', screenId); // verify required parameter 'noteId' is not null or undefined

                (0, _common.assertParamExists)('deleteScreenNote', 'noteId', noteId);
                localVarPath = "/v1/projects/{project_id}/screens/{screen_id}/notes/{note_id}".replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId))).replace("{".concat("screen_id", "}"), encodeURIComponent(String(screenId))).replace("{".concat("note_id", "}"), encodeURIComponent(String(noteId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

                localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);

                if (configuration) {
                  baseOptions = configuration.baseOptions;
                }

                localVarRequestOptions = _objectSpread(_objectSpread({
                  method: 'DELETE'
                }, baseOptions), options);
                localVarHeaderParameter = {};
                localVarQueryParameter = {}; // authentication OAuth2 required
                // oauth required

                _context6.next = 12;
                return (0, _common.setOAuthToObject)(localVarHeaderParameter, "OAuth2", [], configuration);

              case 12:
                _context6.next = 14;
                return (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);

              case 14:
                (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                return _context6.abrupt("return", {
                  url: (0, _common.toPathString)(localVarUrlObj),
                  options: localVarRequestOptions
                });

              case 18:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }));

      function deleteScreenNote(_x25, _x26, _x27) {
        return _deleteScreenNote.apply(this, arguments);
      }

      return deleteScreenNote;
    }(),

    /**
     * Get details of the latest version
     * @summary Get the latest screen version
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLatestScreenVersion: function () {
      var _getLatestScreenVersion = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(projectId, screenId) {
        var options,
            localVarPath,
            localVarUrlObj,
            baseOptions,
            localVarRequestOptions,
            localVarHeaderParameter,
            localVarQueryParameter,
            headersFromBaseOptions,
            _args7 = arguments;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                options = _args7.length > 2 && _args7[2] !== undefined ? _args7[2] : {};
                // verify required parameter 'projectId' is not null or undefined
                (0, _common.assertParamExists)('getLatestScreenVersion', 'projectId', projectId); // verify required parameter 'screenId' is not null or undefined

                (0, _common.assertParamExists)('getLatestScreenVersion', 'screenId', screenId);
                localVarPath = "/v1/projects/{project_id}/screens/{screen_id}/versions/latest".replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId))).replace("{".concat("screen_id", "}"), encodeURIComponent(String(screenId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

                localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);

                if (configuration) {
                  baseOptions = configuration.baseOptions;
                }

                localVarRequestOptions = _objectSpread(_objectSpread({
                  method: 'GET'
                }, baseOptions), options);
                localVarHeaderParameter = {};
                localVarQueryParameter = {}; // authentication OAuth2 required
                // oauth required

                _context7.next = 11;
                return (0, _common.setOAuthToObject)(localVarHeaderParameter, "OAuth2", [], configuration);

              case 11:
                _context7.next = 13;
                return (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);

              case 13:
                (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                return _context7.abrupt("return", {
                  url: (0, _common.toPathString)(localVarUrlObj),
                  options: localVarRequestOptions
                });

              case 17:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7);
      }));

      function getLatestScreenVersion(_x28, _x29) {
        return _getLatestScreenVersion.apply(this, arguments);
      }

      return getLatestScreenVersion;
    }(),

    /**
     * List all screens of the project
     * @summary Get project screens
     * @param {string} projectId Project id
     * @param {string} [sectionId] Filter by section id
     * @param {'section' | 'created'} [sort] Sort screens by their &#x60;section&#x60; or their &#x60;created&#x60; date
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectScreens: function () {
      var _getProjectScreens = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(projectId, sectionId, sort, limit, offset) {
        var options,
            localVarPath,
            localVarUrlObj,
            baseOptions,
            localVarRequestOptions,
            localVarHeaderParameter,
            localVarQueryParameter,
            headersFromBaseOptions,
            _args8 = arguments;
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                options = _args8.length > 5 && _args8[5] !== undefined ? _args8[5] : {};
                // verify required parameter 'projectId' is not null or undefined
                (0, _common.assertParamExists)('getProjectScreens', 'projectId', projectId);
                localVarPath = "/v1/projects/{project_id}/screens".replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

                localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);

                if (configuration) {
                  baseOptions = configuration.baseOptions;
                }

                localVarRequestOptions = _objectSpread(_objectSpread({
                  method: 'GET'
                }, baseOptions), options);
                localVarHeaderParameter = {};
                localVarQueryParameter = {}; // authentication OAuth2 required
                // oauth required

                _context8.next = 10;
                return (0, _common.setOAuthToObject)(localVarHeaderParameter, "OAuth2", [], configuration);

              case 10:
                _context8.next = 12;
                return (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);

              case 12:
                if (sectionId !== undefined) {
                  localVarQueryParameter['section_id'] = sectionId;
                }

                if (sort !== undefined) {
                  localVarQueryParameter['sort'] = sort;
                }

                if (limit !== undefined) {
                  localVarQueryParameter['limit'] = limit;
                }

                if (offset !== undefined) {
                  localVarQueryParameter['offset'] = offset;
                }

                (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                return _context8.abrupt("return", {
                  url: (0, _common.toPathString)(localVarUrlObj),
                  options: localVarRequestOptions
                });

              case 20:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8);
      }));

      function getProjectScreens(_x30, _x31, _x32, _x33, _x34) {
        return _getProjectScreens.apply(this, arguments);
      }

      return getProjectScreens;
    }(),

    /**
     * Get a single screen by id
     * @summary Get a single screen
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScreen: function () {
      var _getScreen = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(projectId, screenId) {
        var options,
            localVarPath,
            localVarUrlObj,
            baseOptions,
            localVarRequestOptions,
            localVarHeaderParameter,
            localVarQueryParameter,
            headersFromBaseOptions,
            _args9 = arguments;
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                options = _args9.length > 2 && _args9[2] !== undefined ? _args9[2] : {};
                // verify required parameter 'projectId' is not null or undefined
                (0, _common.assertParamExists)('getScreen', 'projectId', projectId); // verify required parameter 'screenId' is not null or undefined

                (0, _common.assertParamExists)('getScreen', 'screenId', screenId);
                localVarPath = "/v1/projects/{project_id}/screens/{screen_id}".replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId))).replace("{".concat("screen_id", "}"), encodeURIComponent(String(screenId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

                localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);

                if (configuration) {
                  baseOptions = configuration.baseOptions;
                }

                localVarRequestOptions = _objectSpread(_objectSpread({
                  method: 'GET'
                }, baseOptions), options);
                localVarHeaderParameter = {};
                localVarQueryParameter = {}; // authentication OAuth2 required
                // oauth required

                _context9.next = 11;
                return (0, _common.setOAuthToObject)(localVarHeaderParameter, "OAuth2", [], configuration);

              case 11:
                _context9.next = 13;
                return (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);

              case 13:
                (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                return _context9.abrupt("return", {
                  url: (0, _common.toPathString)(localVarUrlObj),
                  options: localVarRequestOptions
                });

              case 17:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9);
      }));

      function getScreen(_x35, _x36) {
        return _getScreen.apply(this, arguments);
      }

      return getScreen;
    }(),

    /**
     * List all components in the screen
     * @summary Get screen components
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {boolean} [includeLatestVersion] Whether to include the latest version data in the Component object
     * @param {boolean} [includeLinkedStyleguides] Whether to include linked styleguides or not
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScreenComponents: function () {
      var _getScreenComponents = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(projectId, screenId, limit, offset, includeLatestVersion, includeLinkedStyleguides) {
        var options,
            localVarPath,
            localVarUrlObj,
            baseOptions,
            localVarRequestOptions,
            localVarHeaderParameter,
            localVarQueryParameter,
            headersFromBaseOptions,
            _args10 = arguments;
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                options = _args10.length > 6 && _args10[6] !== undefined ? _args10[6] : {};
                // verify required parameter 'projectId' is not null or undefined
                (0, _common.assertParamExists)('getScreenComponents', 'projectId', projectId); // verify required parameter 'screenId' is not null or undefined

                (0, _common.assertParamExists)('getScreenComponents', 'screenId', screenId);
                localVarPath = "/v1/projects/{project_id}/screens/{screen_id}/components".replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId))).replace("{".concat("screen_id", "}"), encodeURIComponent(String(screenId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

                localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);

                if (configuration) {
                  baseOptions = configuration.baseOptions;
                }

                localVarRequestOptions = _objectSpread(_objectSpread({
                  method: 'GET'
                }, baseOptions), options);
                localVarHeaderParameter = {};
                localVarQueryParameter = {}; // authentication OAuth2 required
                // oauth required

                _context10.next = 11;
                return (0, _common.setOAuthToObject)(localVarHeaderParameter, "OAuth2", [], configuration);

              case 11:
                _context10.next = 13;
                return (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);

              case 13:
                if (limit !== undefined) {
                  localVarQueryParameter['limit'] = limit;
                }

                if (offset !== undefined) {
                  localVarQueryParameter['offset'] = offset;
                }

                if (includeLatestVersion !== undefined) {
                  localVarQueryParameter['include_latest_version'] = includeLatestVersion;
                }

                if (includeLinkedStyleguides !== undefined) {
                  localVarQueryParameter['include_linked_styleguides'] = includeLinkedStyleguides;
                }

                (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                return _context10.abrupt("return", {
                  url: (0, _common.toPathString)(localVarUrlObj),
                  options: localVarRequestOptions
                });

              case 21:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10);
      }));

      function getScreenComponents(_x37, _x38, _x39, _x40, _x41, _x42) {
        return _getScreenComponents.apply(this, arguments);
      }

      return getScreenComponents;
    }(),

    /**
     * Get a screen note by id
     * @summary Get a single screen note
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {string} noteId Screen note id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScreenNote: function () {
      var _getScreenNote = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(projectId, screenId, noteId) {
        var options,
            localVarPath,
            localVarUrlObj,
            baseOptions,
            localVarRequestOptions,
            localVarHeaderParameter,
            localVarQueryParameter,
            headersFromBaseOptions,
            _args11 = arguments;
        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                options = _args11.length > 3 && _args11[3] !== undefined ? _args11[3] : {};
                // verify required parameter 'projectId' is not null or undefined
                (0, _common.assertParamExists)('getScreenNote', 'projectId', projectId); // verify required parameter 'screenId' is not null or undefined

                (0, _common.assertParamExists)('getScreenNote', 'screenId', screenId); // verify required parameter 'noteId' is not null or undefined

                (0, _common.assertParamExists)('getScreenNote', 'noteId', noteId);
                localVarPath = "/v1/projects/{project_id}/screens/{screen_id}/notes/{note_id}".replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId))).replace("{".concat("screen_id", "}"), encodeURIComponent(String(screenId))).replace("{".concat("note_id", "}"), encodeURIComponent(String(noteId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

                localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);

                if (configuration) {
                  baseOptions = configuration.baseOptions;
                }

                localVarRequestOptions = _objectSpread(_objectSpread({
                  method: 'GET'
                }, baseOptions), options);
                localVarHeaderParameter = {};
                localVarQueryParameter = {}; // authentication OAuth2 required
                // oauth required

                _context11.next = 12;
                return (0, _common.setOAuthToObject)(localVarHeaderParameter, "OAuth2", [], configuration);

              case 12:
                _context11.next = 14;
                return (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);

              case 14:
                (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                return _context11.abrupt("return", {
                  url: (0, _common.toPathString)(localVarUrlObj),
                  options: localVarRequestOptions
                });

              case 18:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11);
      }));

      function getScreenNote(_x43, _x44, _x45) {
        return _getScreenNote.apply(this, arguments);
      }

      return getScreenNote;
    }(),

    /**
     * List all notes in the screen
     * @summary Get screen notes
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScreenNotes: function () {
      var _getScreenNotes = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(projectId, screenId, limit, offset) {
        var options,
            localVarPath,
            localVarUrlObj,
            baseOptions,
            localVarRequestOptions,
            localVarHeaderParameter,
            localVarQueryParameter,
            headersFromBaseOptions,
            _args12 = arguments;
        return regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                options = _args12.length > 4 && _args12[4] !== undefined ? _args12[4] : {};
                // verify required parameter 'projectId' is not null or undefined
                (0, _common.assertParamExists)('getScreenNotes', 'projectId', projectId); // verify required parameter 'screenId' is not null or undefined

                (0, _common.assertParamExists)('getScreenNotes', 'screenId', screenId);
                localVarPath = "/v1/projects/{project_id}/screens/{screen_id}/notes".replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId))).replace("{".concat("screen_id", "}"), encodeURIComponent(String(screenId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

                localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);

                if (configuration) {
                  baseOptions = configuration.baseOptions;
                }

                localVarRequestOptions = _objectSpread(_objectSpread({
                  method: 'GET'
                }, baseOptions), options);
                localVarHeaderParameter = {};
                localVarQueryParameter = {}; // authentication OAuth2 required
                // oauth required

                _context12.next = 11;
                return (0, _common.setOAuthToObject)(localVarHeaderParameter, "OAuth2", [], configuration);

              case 11:
                _context12.next = 13;
                return (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);

              case 13:
                if (limit !== undefined) {
                  localVarQueryParameter['limit'] = limit;
                }

                if (offset !== undefined) {
                  localVarQueryParameter['offset'] = offset;
                }

                (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                return _context12.abrupt("return", {
                  url: (0, _common.toPathString)(localVarUrlObj),
                  options: localVarRequestOptions
                });

              case 19:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12);
      }));

      function getScreenNotes(_x46, _x47, _x48, _x49) {
        return _getScreenNotes.apply(this, arguments);
      }

      return getScreenNotes;
    }(),

    /**
     * Get a screen section by id
     * @summary Get a single screen section
     * @param {string} projectId Project id
     * @param {string} sectionId Screen section id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScreenSection: function () {
      var _getScreenSection = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(projectId, sectionId) {
        var options,
            localVarPath,
            localVarUrlObj,
            baseOptions,
            localVarRequestOptions,
            localVarHeaderParameter,
            localVarQueryParameter,
            headersFromBaseOptions,
            _args13 = arguments;
        return regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                options = _args13.length > 2 && _args13[2] !== undefined ? _args13[2] : {};
                // verify required parameter 'projectId' is not null or undefined
                (0, _common.assertParamExists)('getScreenSection', 'projectId', projectId); // verify required parameter 'sectionId' is not null or undefined

                (0, _common.assertParamExists)('getScreenSection', 'sectionId', sectionId);
                localVarPath = "/v1/projects/{project_id}/screen_sections/{section_id}".replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId))).replace("{".concat("section_id", "}"), encodeURIComponent(String(sectionId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

                localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);

                if (configuration) {
                  baseOptions = configuration.baseOptions;
                }

                localVarRequestOptions = _objectSpread(_objectSpread({
                  method: 'GET'
                }, baseOptions), options);
                localVarHeaderParameter = {};
                localVarQueryParameter = {}; // authentication OAuth2 required
                // oauth required

                _context13.next = 11;
                return (0, _common.setOAuthToObject)(localVarHeaderParameter, "OAuth2", [], configuration);

              case 11:
                _context13.next = 13;
                return (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);

              case 13:
                (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                return _context13.abrupt("return", {
                  url: (0, _common.toPathString)(localVarUrlObj),
                  options: localVarRequestOptions
                });

              case 17:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13);
      }));

      function getScreenSection(_x50, _x51) {
        return _getScreenSection.apply(this, arguments);
      }

      return getScreenSection;
    }(),

    /**
     * List all screen sections of the project
     * @summary Get screen sections
     * @param {string} projectId Project id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScreenSections: function () {
      var _getScreenSections = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(projectId, limit, offset) {
        var options,
            localVarPath,
            localVarUrlObj,
            baseOptions,
            localVarRequestOptions,
            localVarHeaderParameter,
            localVarQueryParameter,
            headersFromBaseOptions,
            _args14 = arguments;
        return regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                options = _args14.length > 3 && _args14[3] !== undefined ? _args14[3] : {};
                // verify required parameter 'projectId' is not null or undefined
                (0, _common.assertParamExists)('getScreenSections', 'projectId', projectId);
                localVarPath = "/v1/projects/{project_id}/screen_sections".replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

                localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);

                if (configuration) {
                  baseOptions = configuration.baseOptions;
                }

                localVarRequestOptions = _objectSpread(_objectSpread({
                  method: 'GET'
                }, baseOptions), options);
                localVarHeaderParameter = {};
                localVarQueryParameter = {}; // authentication OAuth2 required
                // oauth required

                _context14.next = 10;
                return (0, _common.setOAuthToObject)(localVarHeaderParameter, "OAuth2", [], configuration);

              case 10:
                _context14.next = 12;
                return (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);

              case 12:
                if (limit !== undefined) {
                  localVarQueryParameter['limit'] = limit;
                }

                if (offset !== undefined) {
                  localVarQueryParameter['offset'] = offset;
                }

                (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                return _context14.abrupt("return", {
                  url: (0, _common.toPathString)(localVarUrlObj),
                  options: localVarRequestOptions
                });

              case 18:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14);
      }));

      function getScreenSections(_x52, _x53, _x54) {
        return _getScreenSections.apply(this, arguments);
      }

      return getScreenSections;
    }(),

    /**
     * Get a screen variant by id
     * @summary Get a single screen variant
     * @param {string} projectId Project id
     * @param {string} variantId Screen variant id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScreenVariant: function () {
      var _getScreenVariant = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(projectId, variantId) {
        var options,
            localVarPath,
            localVarUrlObj,
            baseOptions,
            localVarRequestOptions,
            localVarHeaderParameter,
            localVarQueryParameter,
            headersFromBaseOptions,
            _args15 = arguments;
        return regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                options = _args15.length > 2 && _args15[2] !== undefined ? _args15[2] : {};
                // verify required parameter 'projectId' is not null or undefined
                (0, _common.assertParamExists)('getScreenVariant', 'projectId', projectId); // verify required parameter 'variantId' is not null or undefined

                (0, _common.assertParamExists)('getScreenVariant', 'variantId', variantId);
                localVarPath = "/v1/projects/{project_id}/screen_variants/{variant_id}".replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId))).replace("{".concat("variant_id", "}"), encodeURIComponent(String(variantId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

                localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);

                if (configuration) {
                  baseOptions = configuration.baseOptions;
                }

                localVarRequestOptions = _objectSpread(_objectSpread({
                  method: 'GET'
                }, baseOptions), options);
                localVarHeaderParameter = {};
                localVarQueryParameter = {}; // authentication OAuth2 required
                // oauth required

                _context15.next = 11;
                return (0, _common.setOAuthToObject)(localVarHeaderParameter, "OAuth2", [], configuration);

              case 11:
                _context15.next = 13;
                return (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);

              case 13:
                (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                return _context15.abrupt("return", {
                  url: (0, _common.toPathString)(localVarUrlObj),
                  options: localVarRequestOptions
                });

              case 17:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15);
      }));

      function getScreenVariant(_x55, _x56) {
        return _getScreenVariant.apply(this, arguments);
      }

      return getScreenVariant;
    }(),

    /**
     * List all screen variants of the project
     * @summary Get screen variants
     * @param {string} projectId Project id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScreenVariants: function () {
      var _getScreenVariants = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16(projectId, limit, offset) {
        var options,
            localVarPath,
            localVarUrlObj,
            baseOptions,
            localVarRequestOptions,
            localVarHeaderParameter,
            localVarQueryParameter,
            headersFromBaseOptions,
            _args16 = arguments;
        return regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                options = _args16.length > 3 && _args16[3] !== undefined ? _args16[3] : {};
                // verify required parameter 'projectId' is not null or undefined
                (0, _common.assertParamExists)('getScreenVariants', 'projectId', projectId);
                localVarPath = "/v1/projects/{project_id}/screen_variants".replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

                localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);

                if (configuration) {
                  baseOptions = configuration.baseOptions;
                }

                localVarRequestOptions = _objectSpread(_objectSpread({
                  method: 'GET'
                }, baseOptions), options);
                localVarHeaderParameter = {};
                localVarQueryParameter = {}; // authentication OAuth2 required
                // oauth required

                _context16.next = 10;
                return (0, _common.setOAuthToObject)(localVarHeaderParameter, "OAuth2", [], configuration);

              case 10:
                _context16.next = 12;
                return (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);

              case 12:
                if (limit !== undefined) {
                  localVarQueryParameter['limit'] = limit;
                }

                if (offset !== undefined) {
                  localVarQueryParameter['offset'] = offset;
                }

                (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                return _context16.abrupt("return", {
                  url: (0, _common.toPathString)(localVarUrlObj),
                  options: localVarRequestOptions
                });

              case 18:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16);
      }));

      function getScreenVariants(_x57, _x58, _x59) {
        return _getScreenVariants.apply(this, arguments);
      }

      return getScreenVariants;
    }(),

    /**
     * Get details of the screen version
     * @summary Get a single screen version
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {string} versionId Screen version id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScreenVersion: function () {
      var _getScreenVersion = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17(projectId, screenId, versionId) {
        var options,
            localVarPath,
            localVarUrlObj,
            baseOptions,
            localVarRequestOptions,
            localVarHeaderParameter,
            localVarQueryParameter,
            headersFromBaseOptions,
            _args17 = arguments;
        return regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                options = _args17.length > 3 && _args17[3] !== undefined ? _args17[3] : {};
                // verify required parameter 'projectId' is not null or undefined
                (0, _common.assertParamExists)('getScreenVersion', 'projectId', projectId); // verify required parameter 'screenId' is not null or undefined

                (0, _common.assertParamExists)('getScreenVersion', 'screenId', screenId); // verify required parameter 'versionId' is not null or undefined

                (0, _common.assertParamExists)('getScreenVersion', 'versionId', versionId);
                localVarPath = "/v1/projects/{project_id}/screens/{screen_id}/versions/{version_id}".replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId))).replace("{".concat("screen_id", "}"), encodeURIComponent(String(screenId))).replace("{".concat("version_id", "}"), encodeURIComponent(String(versionId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

                localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);

                if (configuration) {
                  baseOptions = configuration.baseOptions;
                }

                localVarRequestOptions = _objectSpread(_objectSpread({
                  method: 'GET'
                }, baseOptions), options);
                localVarHeaderParameter = {};
                localVarQueryParameter = {}; // authentication OAuth2 required
                // oauth required

                _context17.next = 12;
                return (0, _common.setOAuthToObject)(localVarHeaderParameter, "OAuth2", [], configuration);

              case 12:
                _context17.next = 14;
                return (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);

              case 14:
                (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                return _context17.abrupt("return", {
                  url: (0, _common.toPathString)(localVarUrlObj),
                  options: localVarRequestOptions
                });

              case 18:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee17);
      }));

      function getScreenVersion(_x60, _x61, _x62) {
        return _getScreenVersion.apply(this, arguments);
      }

      return getScreenVersion;
    }(),

    /**
     * List all versions of the screen in a project
     * @summary Get screen versions
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScreenVersions: function () {
      var _getScreenVersions = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18(projectId, screenId, limit, offset) {
        var options,
            localVarPath,
            localVarUrlObj,
            baseOptions,
            localVarRequestOptions,
            localVarHeaderParameter,
            localVarQueryParameter,
            headersFromBaseOptions,
            _args18 = arguments;
        return regeneratorRuntime.wrap(function _callee18$(_context18) {
          while (1) {
            switch (_context18.prev = _context18.next) {
              case 0:
                options = _args18.length > 4 && _args18[4] !== undefined ? _args18[4] : {};
                // verify required parameter 'projectId' is not null or undefined
                (0, _common.assertParamExists)('getScreenVersions', 'projectId', projectId); // verify required parameter 'screenId' is not null or undefined

                (0, _common.assertParamExists)('getScreenVersions', 'screenId', screenId);
                localVarPath = "/v1/projects/{project_id}/screens/{screen_id}/versions".replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId))).replace("{".concat("screen_id", "}"), encodeURIComponent(String(screenId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

                localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);

                if (configuration) {
                  baseOptions = configuration.baseOptions;
                }

                localVarRequestOptions = _objectSpread(_objectSpread({
                  method: 'GET'
                }, baseOptions), options);
                localVarHeaderParameter = {};
                localVarQueryParameter = {}; // authentication OAuth2 required
                // oauth required

                _context18.next = 11;
                return (0, _common.setOAuthToObject)(localVarHeaderParameter, "OAuth2", [], configuration);

              case 11:
                _context18.next = 13;
                return (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);

              case 13:
                if (limit !== undefined) {
                  localVarQueryParameter['limit'] = limit;
                }

                if (offset !== undefined) {
                  localVarQueryParameter['offset'] = offset;
                }

                (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                return _context18.abrupt("return", {
                  url: (0, _common.toPathString)(localVarUrlObj),
                  options: localVarRequestOptions
                });

              case 19:
              case "end":
                return _context18.stop();
            }
          }
        }, _callee18);
      }));

      function getScreenVersions(_x63, _x64, _x65, _x66) {
        return _getScreenVersions.apply(this, arguments);
      }

      return getScreenVersions;
    }(),

    /**
     * Update a screen\'s description
     * @summary Update a screen
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {ScreenUpdateBody} screenUpdateBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateScreen: function () {
      var _updateScreen = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee19(projectId, screenId, screenUpdateBody) {
        var options,
            localVarPath,
            localVarUrlObj,
            baseOptions,
            localVarRequestOptions,
            localVarHeaderParameter,
            localVarQueryParameter,
            headersFromBaseOptions,
            _args19 = arguments;
        return regeneratorRuntime.wrap(function _callee19$(_context19) {
          while (1) {
            switch (_context19.prev = _context19.next) {
              case 0:
                options = _args19.length > 3 && _args19[3] !== undefined ? _args19[3] : {};
                // verify required parameter 'projectId' is not null or undefined
                (0, _common.assertParamExists)('updateScreen', 'projectId', projectId); // verify required parameter 'screenId' is not null or undefined

                (0, _common.assertParamExists)('updateScreen', 'screenId', screenId); // verify required parameter 'screenUpdateBody' is not null or undefined

                (0, _common.assertParamExists)('updateScreen', 'screenUpdateBody', screenUpdateBody);
                localVarPath = "/v1/projects/{project_id}/screens/{screen_id}".replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId))).replace("{".concat("screen_id", "}"), encodeURIComponent(String(screenId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

                localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);

                if (configuration) {
                  baseOptions = configuration.baseOptions;
                }

                localVarRequestOptions = _objectSpread(_objectSpread({
                  method: 'PATCH'
                }, baseOptions), options);
                localVarHeaderParameter = {};
                localVarQueryParameter = {}; // authentication OAuth2 required
                // oauth required

                _context19.next = 12;
                return (0, _common.setOAuthToObject)(localVarHeaderParameter, "OAuth2", [], configuration);

              case 12:
                _context19.next = 14;
                return (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);

              case 14:
                localVarHeaderParameter['Content-Type'] = 'application/json';
                (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                localVarRequestOptions.data = (0, _common.serializeDataIfNeeded)((0, _models.transformScreenUpdateBodyToJSON)(screenUpdateBody), localVarRequestOptions, configuration);
                return _context19.abrupt("return", {
                  url: (0, _common.toPathString)(localVarUrlObj),
                  options: localVarRequestOptions
                });

              case 20:
              case "end":
                return _context19.stop();
            }
          }
        }, _callee19);
      }));

      function updateScreen(_x67, _x68, _x69) {
        return _updateScreen.apply(this, arguments);
      }

      return updateScreen;
    }(),

    /**
     * Update comments on the screen note
     * @summary Update comment
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {string} noteId Screen note id
     * @param {string} commentId Screen comment id
     * @param {CommentUpdateBody} commentUpdateBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateScreenComment: function () {
      var _updateScreenComment = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee20(projectId, screenId, noteId, commentId, commentUpdateBody) {
        var options,
            localVarPath,
            localVarUrlObj,
            baseOptions,
            localVarRequestOptions,
            localVarHeaderParameter,
            localVarQueryParameter,
            headersFromBaseOptions,
            _args20 = arguments;
        return regeneratorRuntime.wrap(function _callee20$(_context20) {
          while (1) {
            switch (_context20.prev = _context20.next) {
              case 0:
                options = _args20.length > 5 && _args20[5] !== undefined ? _args20[5] : {};
                // verify required parameter 'projectId' is not null or undefined
                (0, _common.assertParamExists)('updateScreenComment', 'projectId', projectId); // verify required parameter 'screenId' is not null or undefined

                (0, _common.assertParamExists)('updateScreenComment', 'screenId', screenId); // verify required parameter 'noteId' is not null or undefined

                (0, _common.assertParamExists)('updateScreenComment', 'noteId', noteId); // verify required parameter 'commentId' is not null or undefined

                (0, _common.assertParamExists)('updateScreenComment', 'commentId', commentId); // verify required parameter 'commentUpdateBody' is not null or undefined

                (0, _common.assertParamExists)('updateScreenComment', 'commentUpdateBody', commentUpdateBody);
                localVarPath = "/v1/projects/{project_id}/screens/{screen_id}/notes/{note_id}/comments/{comment_id}".replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId))).replace("{".concat("screen_id", "}"), encodeURIComponent(String(screenId))).replace("{".concat("note_id", "}"), encodeURIComponent(String(noteId))).replace("{".concat("comment_id", "}"), encodeURIComponent(String(commentId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

                localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);

                if (configuration) {
                  baseOptions = configuration.baseOptions;
                }

                localVarRequestOptions = _objectSpread(_objectSpread({
                  method: 'PATCH'
                }, baseOptions), options);
                localVarHeaderParameter = {};
                localVarQueryParameter = {}; // authentication OAuth2 required
                // oauth required

                _context20.next = 14;
                return (0, _common.setOAuthToObject)(localVarHeaderParameter, "OAuth2", [], configuration);

              case 14:
                _context20.next = 16;
                return (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);

              case 16:
                localVarHeaderParameter['Content-Type'] = 'application/json';
                (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                localVarRequestOptions.data = (0, _common.serializeDataIfNeeded)((0, _models.transformCommentUpdateBodyToJSON)(commentUpdateBody), localVarRequestOptions, configuration);
                return _context20.abrupt("return", {
                  url: (0, _common.toPathString)(localVarUrlObj),
                  options: localVarRequestOptions
                });

              case 22:
              case "end":
                return _context20.stop();
            }
          }
        }, _callee20);
      }));

      function updateScreenComment(_x70, _x71, _x72, _x73, _x74) {
        return _updateScreenComment.apply(this, arguments);
      }

      return updateScreenComment;
    }(),

    /**
     * Update a note on the screen
     * @summary Update a note
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {string} noteId Screen note id
     * @param {ScreenNoteUpdateBody} screenNoteUpdateBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateScreenNote: function () {
      var _updateScreenNote = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee21(projectId, screenId, noteId, screenNoteUpdateBody) {
        var options,
            localVarPath,
            localVarUrlObj,
            baseOptions,
            localVarRequestOptions,
            localVarHeaderParameter,
            localVarQueryParameter,
            headersFromBaseOptions,
            _args21 = arguments;
        return regeneratorRuntime.wrap(function _callee21$(_context21) {
          while (1) {
            switch (_context21.prev = _context21.next) {
              case 0:
                options = _args21.length > 4 && _args21[4] !== undefined ? _args21[4] : {};
                // verify required parameter 'projectId' is not null or undefined
                (0, _common.assertParamExists)('updateScreenNote', 'projectId', projectId); // verify required parameter 'screenId' is not null or undefined

                (0, _common.assertParamExists)('updateScreenNote', 'screenId', screenId); // verify required parameter 'noteId' is not null or undefined

                (0, _common.assertParamExists)('updateScreenNote', 'noteId', noteId); // verify required parameter 'screenNoteUpdateBody' is not null or undefined

                (0, _common.assertParamExists)('updateScreenNote', 'screenNoteUpdateBody', screenNoteUpdateBody);
                localVarPath = "/v1/projects/{project_id}/screens/{screen_id}/notes/{note_id}".replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId))).replace("{".concat("screen_id", "}"), encodeURIComponent(String(screenId))).replace("{".concat("note_id", "}"), encodeURIComponent(String(noteId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

                localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);

                if (configuration) {
                  baseOptions = configuration.baseOptions;
                }

                localVarRequestOptions = _objectSpread(_objectSpread({
                  method: 'PATCH'
                }, baseOptions), options);
                localVarHeaderParameter = {};
                localVarQueryParameter = {}; // authentication OAuth2 required
                // oauth required

                _context21.next = 13;
                return (0, _common.setOAuthToObject)(localVarHeaderParameter, "OAuth2", [], configuration);

              case 13:
                _context21.next = 15;
                return (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);

              case 15:
                localVarHeaderParameter['Content-Type'] = 'application/json';
                (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                localVarRequestOptions.data = (0, _common.serializeDataIfNeeded)((0, _models.transformScreenNoteUpdateBodyToJSON)(screenNoteUpdateBody), localVarRequestOptions, configuration);
                return _context21.abrupt("return", {
                  url: (0, _common.toPathString)(localVarUrlObj),
                  options: localVarRequestOptions
                });

              case 21:
              case "end":
                return _context21.stop();
            }
          }
        }, _callee21);
      }));

      function updateScreenNote(_x75, _x76, _x77, _x78) {
        return _updateScreenNote.apply(this, arguments);
      }

      return updateScreenNote;
    }()
  };
};
/**
 * ScreensApi - functional programming interface
 * @export
 */


exports.ScreensApiAxiosParamCreator = ScreensApiAxiosParamCreator;

var ScreensApiFp = function ScreensApiFp(configuration) {
  var localVarAxiosParamCreator = ScreensApiAxiosParamCreator(configuration);
  return {
    /**
     * Create a new screen in the project
     * @summary Create a new screen
     * @param {string} projectId Project id
     * @param {string} name Name of the screen
     * @param {any} image Binary data of the screen image.  The image has to be in JPEG or PNG format, and its size cannot exceed 5MB. 
     * @param {string} [description] Description for the screen
     * @param {string} [commitMessage] Commit message for the screen version
     * @param {string} [commitColor] Commit color for the screen version
     * @param {Array<string>} [tags] Tags for the screen
     * @param {string} [sectionId] Unique id of the screen section
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createScreen: function createScreen(projectId, name, image, description, commitMessage, commitColor, tags, sectionId, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee22() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee22$(_context22) {
          while (1) {
            switch (_context22.prev = _context22.next) {
              case 0:
                _context22.next = 2;
                return localVarAxiosParamCreator.createScreen(projectId, name, image, description, commitMessage, commitColor, tags, sectionId, options);

              case 2:
                localVarAxiosArgs = _context22.sent;
                return _context22.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context22.stop();
            }
          }
        }, _callee22);
      }))();
    },

    /**
     * Create comment on the screen note
     * @summary Create a comment
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {string} noteId Screen note id
     * @param {CommentCreateBody} commentCreateBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createScreenComment: function createScreenComment(projectId, screenId, noteId, commentCreateBody, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee23() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee23$(_context23) {
          while (1) {
            switch (_context23.prev = _context23.next) {
              case 0:
                _context23.next = 2;
                return localVarAxiosParamCreator.createScreenComment(projectId, screenId, noteId, commentCreateBody, options);

              case 2:
                localVarAxiosArgs = _context23.sent;
                return _context23.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context23.stop();
            }
          }
        }, _callee23);
      }))();
    },

    /**
     * Create a note on the screen
     * @summary Create a note
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {ScreenNoteCreateBody} screenNoteCreateBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createScreenNote: function createScreenNote(projectId, screenId, screenNoteCreateBody, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee24() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee24$(_context24) {
          while (1) {
            switch (_context24.prev = _context24.next) {
              case 0:
                _context24.next = 2;
                return localVarAxiosParamCreator.createScreenNote(projectId, screenId, screenNoteCreateBody, options);

              case 2:
                localVarAxiosArgs = _context24.sent;
                return _context24.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context24.stop();
            }
          }
        }, _callee24);
      }))();
    },

    /**
     * Create a new screen version in the project
     * @summary Create a new screen version
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {any} image Binary data of the screen image.  The image has to be in JPEG or PNG format, and its size cannot exceed 5MB. 
     * @param {string} [commitMessage] Commit message for the screen version
     * @param {string} [commitColor] Commit color for the screen version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createScreenVersion: function createScreenVersion(projectId, screenId, image, commitMessage, commitColor, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee25() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee25$(_context25) {
          while (1) {
            switch (_context25.prev = _context25.next) {
              case 0:
                _context25.next = 2;
                return localVarAxiosParamCreator.createScreenVersion(projectId, screenId, image, commitMessage, commitColor, options);

              case 2:
                localVarAxiosArgs = _context25.sent;
                return _context25.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context25.stop();
            }
          }
        }, _callee25);
      }))();
    },

    /**
     * Delete a comment on the screen note
     * @summary Delete comment
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {string} noteId Screen note id
     * @param {string} commentId Screen comment id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteScreenComment: function deleteScreenComment(projectId, screenId, noteId, commentId, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee26() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee26$(_context26) {
          while (1) {
            switch (_context26.prev = _context26.next) {
              case 0:
                _context26.next = 2;
                return localVarAxiosParamCreator.deleteScreenComment(projectId, screenId, noteId, commentId, options);

              case 2:
                localVarAxiosArgs = _context26.sent;
                return _context26.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context26.stop();
            }
          }
        }, _callee26);
      }))();
    },

    /**
     * Delete a note on the screen
     * @summary Delete a note
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {string} noteId Screen note id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteScreenNote: function deleteScreenNote(projectId, screenId, noteId, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee27() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee27$(_context27) {
          while (1) {
            switch (_context27.prev = _context27.next) {
              case 0:
                _context27.next = 2;
                return localVarAxiosParamCreator.deleteScreenNote(projectId, screenId, noteId, options);

              case 2:
                localVarAxiosArgs = _context27.sent;
                return _context27.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context27.stop();
            }
          }
        }, _callee27);
      }))();
    },

    /**
     * Get details of the latest version
     * @summary Get the latest screen version
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLatestScreenVersion: function getLatestScreenVersion(projectId, screenId, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee28() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee28$(_context28) {
          while (1) {
            switch (_context28.prev = _context28.next) {
              case 0:
                _context28.next = 2;
                return localVarAxiosParamCreator.getLatestScreenVersion(projectId, screenId, options);

              case 2:
                localVarAxiosArgs = _context28.sent;
                return _context28.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context28.stop();
            }
          }
        }, _callee28);
      }))();
    },

    /**
     * List all screens of the project
     * @summary Get project screens
     * @param {string} projectId Project id
     * @param {string} [sectionId] Filter by section id
     * @param {'section' | 'created'} [sort] Sort screens by their &#x60;section&#x60; or their &#x60;created&#x60; date
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectScreens: function getProjectScreens(projectId, sectionId, sort, limit, offset, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee29() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee29$(_context29) {
          while (1) {
            switch (_context29.prev = _context29.next) {
              case 0:
                _context29.next = 2;
                return localVarAxiosParamCreator.getProjectScreens(projectId, sectionId, sort, limit, offset, options);

              case 2:
                localVarAxiosArgs = _context29.sent;
                return _context29.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context29.stop();
            }
          }
        }, _callee29);
      }))();
    },

    /**
     * Get a single screen by id
     * @summary Get a single screen
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScreen: function getScreen(projectId, screenId, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee30() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee30$(_context30) {
          while (1) {
            switch (_context30.prev = _context30.next) {
              case 0:
                _context30.next = 2;
                return localVarAxiosParamCreator.getScreen(projectId, screenId, options);

              case 2:
                localVarAxiosArgs = _context30.sent;
                return _context30.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context30.stop();
            }
          }
        }, _callee30);
      }))();
    },

    /**
     * List all components in the screen
     * @summary Get screen components
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {boolean} [includeLatestVersion] Whether to include the latest version data in the Component object
     * @param {boolean} [includeLinkedStyleguides] Whether to include linked styleguides or not
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScreenComponents: function getScreenComponents(projectId, screenId, limit, offset, includeLatestVersion, includeLinkedStyleguides, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee31() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee31$(_context31) {
          while (1) {
            switch (_context31.prev = _context31.next) {
              case 0:
                _context31.next = 2;
                return localVarAxiosParamCreator.getScreenComponents(projectId, screenId, limit, offset, includeLatestVersion, includeLinkedStyleguides, options);

              case 2:
                localVarAxiosArgs = _context31.sent;
                return _context31.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context31.stop();
            }
          }
        }, _callee31);
      }))();
    },

    /**
     * Get a screen note by id
     * @summary Get a single screen note
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {string} noteId Screen note id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScreenNote: function getScreenNote(projectId, screenId, noteId, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee32() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee32$(_context32) {
          while (1) {
            switch (_context32.prev = _context32.next) {
              case 0:
                _context32.next = 2;
                return localVarAxiosParamCreator.getScreenNote(projectId, screenId, noteId, options);

              case 2:
                localVarAxiosArgs = _context32.sent;
                return _context32.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context32.stop();
            }
          }
        }, _callee32);
      }))();
    },

    /**
     * List all notes in the screen
     * @summary Get screen notes
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScreenNotes: function getScreenNotes(projectId, screenId, limit, offset, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee33() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee33$(_context33) {
          while (1) {
            switch (_context33.prev = _context33.next) {
              case 0:
                _context33.next = 2;
                return localVarAxiosParamCreator.getScreenNotes(projectId, screenId, limit, offset, options);

              case 2:
                localVarAxiosArgs = _context33.sent;
                return _context33.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context33.stop();
            }
          }
        }, _callee33);
      }))();
    },

    /**
     * Get a screen section by id
     * @summary Get a single screen section
     * @param {string} projectId Project id
     * @param {string} sectionId Screen section id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScreenSection: function getScreenSection(projectId, sectionId, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee34() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee34$(_context34) {
          while (1) {
            switch (_context34.prev = _context34.next) {
              case 0:
                _context34.next = 2;
                return localVarAxiosParamCreator.getScreenSection(projectId, sectionId, options);

              case 2:
                localVarAxiosArgs = _context34.sent;
                return _context34.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context34.stop();
            }
          }
        }, _callee34);
      }))();
    },

    /**
     * List all screen sections of the project
     * @summary Get screen sections
     * @param {string} projectId Project id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScreenSections: function getScreenSections(projectId, limit, offset, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee35() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee35$(_context35) {
          while (1) {
            switch (_context35.prev = _context35.next) {
              case 0:
                _context35.next = 2;
                return localVarAxiosParamCreator.getScreenSections(projectId, limit, offset, options);

              case 2:
                localVarAxiosArgs = _context35.sent;
                return _context35.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context35.stop();
            }
          }
        }, _callee35);
      }))();
    },

    /**
     * Get a screen variant by id
     * @summary Get a single screen variant
     * @param {string} projectId Project id
     * @param {string} variantId Screen variant id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScreenVariant: function getScreenVariant(projectId, variantId, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee36() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee36$(_context36) {
          while (1) {
            switch (_context36.prev = _context36.next) {
              case 0:
                _context36.next = 2;
                return localVarAxiosParamCreator.getScreenVariant(projectId, variantId, options);

              case 2:
                localVarAxiosArgs = _context36.sent;
                return _context36.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context36.stop();
            }
          }
        }, _callee36);
      }))();
    },

    /**
     * List all screen variants of the project
     * @summary Get screen variants
     * @param {string} projectId Project id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScreenVariants: function getScreenVariants(projectId, limit, offset, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee37() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee37$(_context37) {
          while (1) {
            switch (_context37.prev = _context37.next) {
              case 0:
                _context37.next = 2;
                return localVarAxiosParamCreator.getScreenVariants(projectId, limit, offset, options);

              case 2:
                localVarAxiosArgs = _context37.sent;
                return _context37.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context37.stop();
            }
          }
        }, _callee37);
      }))();
    },

    /**
     * Get details of the screen version
     * @summary Get a single screen version
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {string} versionId Screen version id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScreenVersion: function getScreenVersion(projectId, screenId, versionId, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee38() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee38$(_context38) {
          while (1) {
            switch (_context38.prev = _context38.next) {
              case 0:
                _context38.next = 2;
                return localVarAxiosParamCreator.getScreenVersion(projectId, screenId, versionId, options);

              case 2:
                localVarAxiosArgs = _context38.sent;
                return _context38.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context38.stop();
            }
          }
        }, _callee38);
      }))();
    },

    /**
     * List all versions of the screen in a project
     * @summary Get screen versions
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScreenVersions: function getScreenVersions(projectId, screenId, limit, offset, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee39() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee39$(_context39) {
          while (1) {
            switch (_context39.prev = _context39.next) {
              case 0:
                _context39.next = 2;
                return localVarAxiosParamCreator.getScreenVersions(projectId, screenId, limit, offset, options);

              case 2:
                localVarAxiosArgs = _context39.sent;
                return _context39.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context39.stop();
            }
          }
        }, _callee39);
      }))();
    },

    /**
     * Update a screen\'s description
     * @summary Update a screen
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {ScreenUpdateBody} screenUpdateBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateScreen: function updateScreen(projectId, screenId, screenUpdateBody, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee40() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee40$(_context40) {
          while (1) {
            switch (_context40.prev = _context40.next) {
              case 0:
                _context40.next = 2;
                return localVarAxiosParamCreator.updateScreen(projectId, screenId, screenUpdateBody, options);

              case 2:
                localVarAxiosArgs = _context40.sent;
                return _context40.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context40.stop();
            }
          }
        }, _callee40);
      }))();
    },

    /**
     * Update comments on the screen note
     * @summary Update comment
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {string} noteId Screen note id
     * @param {string} commentId Screen comment id
     * @param {CommentUpdateBody} commentUpdateBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateScreenComment: function updateScreenComment(projectId, screenId, noteId, commentId, commentUpdateBody, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee41() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee41$(_context41) {
          while (1) {
            switch (_context41.prev = _context41.next) {
              case 0:
                _context41.next = 2;
                return localVarAxiosParamCreator.updateScreenComment(projectId, screenId, noteId, commentId, commentUpdateBody, options);

              case 2:
                localVarAxiosArgs = _context41.sent;
                return _context41.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context41.stop();
            }
          }
        }, _callee41);
      }))();
    },

    /**
     * Update a note on the screen
     * @summary Update a note
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {string} noteId Screen note id
     * @param {ScreenNoteUpdateBody} screenNoteUpdateBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateScreenNote: function updateScreenNote(projectId, screenId, noteId, screenNoteUpdateBody, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee42() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee42$(_context42) {
          while (1) {
            switch (_context42.prev = _context42.next) {
              case 0:
                _context42.next = 2;
                return localVarAxiosParamCreator.updateScreenNote(projectId, screenId, noteId, screenNoteUpdateBody, options);

              case 2:
                localVarAxiosArgs = _context42.sent;
                return _context42.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context42.stop();
            }
          }
        }, _callee42);
      }))();
    }
  };
};
/**
 * Body for createScreen operation in ScreensApi.
 * @export
 * @interface ScreensApiCreateScreenBody
 */


exports.ScreensApiFp = ScreensApiFp;

/**
 * ScreensApi - object-oriented interface
 * @export
 * @class ScreensApi
 * @extends {BaseAPI}
 */
var ScreensApi = /*#__PURE__*/function (_BaseAPI) {
  _inherits(ScreensApi, _BaseAPI);

  var _super = _createSuper(ScreensApi);

  function ScreensApi() {
    _classCallCheck(this, ScreensApi);

    return _super.apply(this, arguments);
  }

  _createClass(ScreensApi, [{
    key: "createScreen",
    value:
    /**
     * Create a new screen in the project
     * @summary Create a new screen
     * @param {string} projectId Project id
     * @param {string} name Name of the screen
     * @param {any} image Binary data of the screen image.  The image has to be in JPEG or PNG format, and its size cannot exceed 5MB. 
     * @param {string} [description] Description for the screen
     * @param {string} [commitMessage] Commit message for the screen version
     * @param {string} [commitColor] Commit color for the screen version
     * @param {Array<string>} [tags] Tags for the screen
     * @param {string} [sectionId] Unique id of the screen section
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreensApi
     */
    function () {
      var _createScreen2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee43(projectId, multipartParams, options) {
        var screensApiFp, request, response;
        return regeneratorRuntime.wrap(function _callee43$(_context43) {
          while (1) {
            switch (_context43.prev = _context43.next) {
              case 0:
                screensApiFp = ScreensApiFp(this.configuration);
                _context43.next = 3;
                return screensApiFp.createScreen(projectId, multipartParams.name, multipartParams.image, multipartParams.description, multipartParams.commitMessage, multipartParams.commitColor, multipartParams.tags, multipartParams.sectionId, options);

              case 3:
                request = _context43.sent;
                _context43.next = 6;
                return request(this.axios, this.basePath);

              case 6:
                response = _context43.sent;
                return _context43.abrupt("return", _objectSpread(_objectSpread({}, response), {}, {
                  data: (0, _models.transformJSONToEntityReference)(response.data)
                }));

              case 8:
              case "end":
                return _context43.stop();
            }
          }
        }, _callee43, this);
      }));

      function createScreen(_x79, _x80, _x81) {
        return _createScreen2.apply(this, arguments);
      }

      return createScreen;
    }()
    /**
     * Create comment on the screen note
     * @summary Create a comment
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {string} noteId Screen note id
     * @param {CommentCreateBody} commentCreateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreensApi
     */

  }, {
    key: "createScreenComment",
    value: function () {
      var _createScreenComment2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee44(projectId, screenId, noteId, commentCreateBody, options) {
        var screensApiFp, request, response;
        return regeneratorRuntime.wrap(function _callee44$(_context44) {
          while (1) {
            switch (_context44.prev = _context44.next) {
              case 0:
                screensApiFp = ScreensApiFp(this.configuration);
                _context44.next = 3;
                return screensApiFp.createScreenComment(projectId, screenId, noteId, commentCreateBody, options);

              case 3:
                request = _context44.sent;
                _context44.next = 6;
                return request(this.axios, this.basePath);

              case 6:
                response = _context44.sent;
                return _context44.abrupt("return", _objectSpread(_objectSpread({}, response), {}, {
                  data: (0, _models.transformJSONToEntityReference)(response.data)
                }));

              case 8:
              case "end":
                return _context44.stop();
            }
          }
        }, _callee44, this);
      }));

      function createScreenComment(_x82, _x83, _x84, _x85, _x86) {
        return _createScreenComment2.apply(this, arguments);
      }

      return createScreenComment;
    }()
    /**
     * Create a note on the screen
     * @summary Create a note
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {ScreenNoteCreateBody} screenNoteCreateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreensApi
     */

  }, {
    key: "createScreenNote",
    value: function () {
      var _createScreenNote2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee45(projectId, screenId, screenNoteCreateBody, options) {
        var screensApiFp, request, response;
        return regeneratorRuntime.wrap(function _callee45$(_context45) {
          while (1) {
            switch (_context45.prev = _context45.next) {
              case 0:
                screensApiFp = ScreensApiFp(this.configuration);
                _context45.next = 3;
                return screensApiFp.createScreenNote(projectId, screenId, screenNoteCreateBody, options);

              case 3:
                request = _context45.sent;
                _context45.next = 6;
                return request(this.axios, this.basePath);

              case 6:
                response = _context45.sent;
                return _context45.abrupt("return", _objectSpread(_objectSpread({}, response), {}, {
                  data: (0, _models.transformJSONToEntityReference)(response.data)
                }));

              case 8:
              case "end":
                return _context45.stop();
            }
          }
        }, _callee45, this);
      }));

      function createScreenNote(_x87, _x88, _x89, _x90) {
        return _createScreenNote2.apply(this, arguments);
      }

      return createScreenNote;
    }()
    /**
     * Create a new screen version in the project
     * @summary Create a new screen version
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {any} image Binary data of the screen image.  The image has to be in JPEG or PNG format, and its size cannot exceed 5MB. 
     * @param {string} [commitMessage] Commit message for the screen version
     * @param {string} [commitColor] Commit color for the screen version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreensApi
     */

  }, {
    key: "createScreenVersion",
    value: function () {
      var _createScreenVersion2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee46(projectId, screenId, multipartParams, options) {
        var screensApiFp, request, response;
        return regeneratorRuntime.wrap(function _callee46$(_context46) {
          while (1) {
            switch (_context46.prev = _context46.next) {
              case 0:
                screensApiFp = ScreensApiFp(this.configuration);
                _context46.next = 3;
                return screensApiFp.createScreenVersion(projectId, screenId, multipartParams.image, multipartParams.commitMessage, multipartParams.commitColor, options);

              case 3:
                request = _context46.sent;
                _context46.next = 6;
                return request(this.axios, this.basePath);

              case 6:
                response = _context46.sent;
                return _context46.abrupt("return", _objectSpread(_objectSpread({}, response), {}, {
                  data: (0, _models.transformJSONToEntityReference)(response.data)
                }));

              case 8:
              case "end":
                return _context46.stop();
            }
          }
        }, _callee46, this);
      }));

      function createScreenVersion(_x91, _x92, _x93, _x94) {
        return _createScreenVersion2.apply(this, arguments);
      }

      return createScreenVersion;
    }()
    /**
     * Delete a comment on the screen note
     * @summary Delete comment
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {string} noteId Screen note id
     * @param {string} commentId Screen comment id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreensApi
     */

  }, {
    key: "deleteScreenComment",
    value: function () {
      var _deleteScreenComment2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee47(projectId, screenId, noteId, commentId, options) {
        var screensApiFp, request, response;
        return regeneratorRuntime.wrap(function _callee47$(_context47) {
          while (1) {
            switch (_context47.prev = _context47.next) {
              case 0:
                screensApiFp = ScreensApiFp(this.configuration);
                _context47.next = 3;
                return screensApiFp.deleteScreenComment(projectId, screenId, noteId, commentId, options);

              case 3:
                request = _context47.sent;
                _context47.next = 6;
                return request(this.axios, this.basePath);

              case 6:
                response = _context47.sent;
                return _context47.abrupt("return", response);

              case 8:
              case "end":
                return _context47.stop();
            }
          }
        }, _callee47, this);
      }));

      function deleteScreenComment(_x95, _x96, _x97, _x98, _x99) {
        return _deleteScreenComment2.apply(this, arguments);
      }

      return deleteScreenComment;
    }()
    /**
     * Delete a note on the screen
     * @summary Delete a note
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {string} noteId Screen note id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreensApi
     */

  }, {
    key: "deleteScreenNote",
    value: function () {
      var _deleteScreenNote2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee48(projectId, screenId, noteId, options) {
        var screensApiFp, request, response;
        return regeneratorRuntime.wrap(function _callee48$(_context48) {
          while (1) {
            switch (_context48.prev = _context48.next) {
              case 0:
                screensApiFp = ScreensApiFp(this.configuration);
                _context48.next = 3;
                return screensApiFp.deleteScreenNote(projectId, screenId, noteId, options);

              case 3:
                request = _context48.sent;
                _context48.next = 6;
                return request(this.axios, this.basePath);

              case 6:
                response = _context48.sent;
                return _context48.abrupt("return", response);

              case 8:
              case "end":
                return _context48.stop();
            }
          }
        }, _callee48, this);
      }));

      function deleteScreenNote(_x100, _x101, _x102, _x103) {
        return _deleteScreenNote2.apply(this, arguments);
      }

      return deleteScreenNote;
    }()
    /**
     * Get details of the latest version
     * @summary Get the latest screen version
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreensApi
     */

  }, {
    key: "getLatestScreenVersion",
    value: function () {
      var _getLatestScreenVersion2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee49(projectId, screenId, options) {
        var screensApiFp, request, response;
        return regeneratorRuntime.wrap(function _callee49$(_context49) {
          while (1) {
            switch (_context49.prev = _context49.next) {
              case 0:
                screensApiFp = ScreensApiFp(this.configuration);
                _context49.next = 3;
                return screensApiFp.getLatestScreenVersion(projectId, screenId, options);

              case 3:
                request = _context49.sent;
                _context49.next = 6;
                return request(this.axios, this.basePath);

              case 6:
                response = _context49.sent;
                return _context49.abrupt("return", _objectSpread(_objectSpread({}, response), {}, {
                  data: (0, _models.transformJSONToScreenVersion)(response.data)
                }));

              case 8:
              case "end":
                return _context49.stop();
            }
          }
        }, _callee49, this);
      }));

      function getLatestScreenVersion(_x104, _x105, _x106) {
        return _getLatestScreenVersion2.apply(this, arguments);
      }

      return getLatestScreenVersion;
    }()
    /**
     * List all screens of the project
     * @summary Get project screens
     * @param {string} projectId Project id
     * @param {ScreensApiGetProjectScreensSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreensApi
     */

  }, {
    key: "getProjectScreens",
    value: function () {
      var _getProjectScreens2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee50(projectId) {
        var searchParams,
            options,
            screensApiFp,
            request,
            response,
            _args50 = arguments;
        return regeneratorRuntime.wrap(function _callee50$(_context50) {
          while (1) {
            switch (_context50.prev = _context50.next) {
              case 0:
                searchParams = _args50.length > 1 && _args50[1] !== undefined ? _args50[1] : {};
                options = _args50.length > 2 ? _args50[2] : undefined;
                screensApiFp = ScreensApiFp(this.configuration);
                _context50.next = 5;
                return screensApiFp.getProjectScreens(projectId, searchParams.sectionId, searchParams.sort, searchParams.limit, searchParams.offset, options);

              case 5:
                request = _context50.sent;
                _context50.next = 8;
                return request(this.axios, this.basePath);

              case 8:
                response = _context50.sent;
                return _context50.abrupt("return", _objectSpread(_objectSpread({}, response), {}, {
                  data: response.data.map(_models.transformJSONToScreen)
                }));

              case 10:
              case "end":
                return _context50.stop();
            }
          }
        }, _callee50, this);
      }));

      function getProjectScreens(_x107) {
        return _getProjectScreens2.apply(this, arguments);
      }

      return getProjectScreens;
    }()
    /**
     * Get a single screen by id
     * @summary Get a single screen
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreensApi
     */

  }, {
    key: "getScreen",
    value: function () {
      var _getScreen2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee51(projectId, screenId, options) {
        var screensApiFp, request, response;
        return regeneratorRuntime.wrap(function _callee51$(_context51) {
          while (1) {
            switch (_context51.prev = _context51.next) {
              case 0:
                screensApiFp = ScreensApiFp(this.configuration);
                _context51.next = 3;
                return screensApiFp.getScreen(projectId, screenId, options);

              case 3:
                request = _context51.sent;
                _context51.next = 6;
                return request(this.axios, this.basePath);

              case 6:
                response = _context51.sent;
                return _context51.abrupt("return", _objectSpread(_objectSpread({}, response), {}, {
                  data: (0, _models.transformJSONToScreen)(response.data)
                }));

              case 8:
              case "end":
                return _context51.stop();
            }
          }
        }, _callee51, this);
      }));

      function getScreen(_x108, _x109, _x110) {
        return _getScreen2.apply(this, arguments);
      }

      return getScreen;
    }()
    /**
     * List all components in the screen
     * @summary Get screen components
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {ScreensApiGetScreenComponentsSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreensApi
     */

  }, {
    key: "getScreenComponents",
    value: function () {
      var _getScreenComponents2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee52(projectId, screenId) {
        var searchParams,
            options,
            screensApiFp,
            request,
            response,
            _args52 = arguments;
        return regeneratorRuntime.wrap(function _callee52$(_context52) {
          while (1) {
            switch (_context52.prev = _context52.next) {
              case 0:
                searchParams = _args52.length > 2 && _args52[2] !== undefined ? _args52[2] : {};
                options = _args52.length > 3 ? _args52[3] : undefined;
                screensApiFp = ScreensApiFp(this.configuration);
                _context52.next = 5;
                return screensApiFp.getScreenComponents(projectId, screenId, searchParams.limit, searchParams.offset, searchParams.includeLatestVersion, searchParams.includeLinkedStyleguides, options);

              case 5:
                request = _context52.sent;
                _context52.next = 8;
                return request(this.axios, this.basePath);

              case 8:
                response = _context52.sent;
                return _context52.abrupt("return", _objectSpread(_objectSpread({}, response), {}, {
                  data: response.data.map(_models.transformJSONToComponent)
                }));

              case 10:
              case "end":
                return _context52.stop();
            }
          }
        }, _callee52, this);
      }));

      function getScreenComponents(_x111, _x112) {
        return _getScreenComponents2.apply(this, arguments);
      }

      return getScreenComponents;
    }()
    /**
     * Get a screen note by id
     * @summary Get a single screen note
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {string} noteId Screen note id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreensApi
     */

  }, {
    key: "getScreenNote",
    value: function () {
      var _getScreenNote2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee53(projectId, screenId, noteId, options) {
        var screensApiFp, request, response;
        return regeneratorRuntime.wrap(function _callee53$(_context53) {
          while (1) {
            switch (_context53.prev = _context53.next) {
              case 0:
                screensApiFp = ScreensApiFp(this.configuration);
                _context53.next = 3;
                return screensApiFp.getScreenNote(projectId, screenId, noteId, options);

              case 3:
                request = _context53.sent;
                _context53.next = 6;
                return request(this.axios, this.basePath);

              case 6:
                response = _context53.sent;
                return _context53.abrupt("return", _objectSpread(_objectSpread({}, response), {}, {
                  data: (0, _models.transformJSONToScreenNote)(response.data)
                }));

              case 8:
              case "end":
                return _context53.stop();
            }
          }
        }, _callee53, this);
      }));

      function getScreenNote(_x113, _x114, _x115, _x116) {
        return _getScreenNote2.apply(this, arguments);
      }

      return getScreenNote;
    }()
    /**
     * List all notes in the screen
     * @summary Get screen notes
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {ScreensApiGetScreenNotesSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreensApi
     */

  }, {
    key: "getScreenNotes",
    value: function () {
      var _getScreenNotes2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee54(projectId, screenId) {
        var searchParams,
            options,
            screensApiFp,
            request,
            response,
            _args54 = arguments;
        return regeneratorRuntime.wrap(function _callee54$(_context54) {
          while (1) {
            switch (_context54.prev = _context54.next) {
              case 0:
                searchParams = _args54.length > 2 && _args54[2] !== undefined ? _args54[2] : {};
                options = _args54.length > 3 ? _args54[3] : undefined;
                screensApiFp = ScreensApiFp(this.configuration);
                _context54.next = 5;
                return screensApiFp.getScreenNotes(projectId, screenId, searchParams.limit, searchParams.offset, options);

              case 5:
                request = _context54.sent;
                _context54.next = 8;
                return request(this.axios, this.basePath);

              case 8:
                response = _context54.sent;
                return _context54.abrupt("return", _objectSpread(_objectSpread({}, response), {}, {
                  data: response.data.map(_models.transformJSONToScreenNote)
                }));

              case 10:
              case "end":
                return _context54.stop();
            }
          }
        }, _callee54, this);
      }));

      function getScreenNotes(_x117, _x118) {
        return _getScreenNotes2.apply(this, arguments);
      }

      return getScreenNotes;
    }()
    /**
     * Get a screen section by id
     * @summary Get a single screen section
     * @param {string} projectId Project id
     * @param {string} sectionId Screen section id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreensApi
     */

  }, {
    key: "getScreenSection",
    value: function () {
      var _getScreenSection2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee55(projectId, sectionId, options) {
        var screensApiFp, request, response;
        return regeneratorRuntime.wrap(function _callee55$(_context55) {
          while (1) {
            switch (_context55.prev = _context55.next) {
              case 0:
                screensApiFp = ScreensApiFp(this.configuration);
                _context55.next = 3;
                return screensApiFp.getScreenSection(projectId, sectionId, options);

              case 3:
                request = _context55.sent;
                _context55.next = 6;
                return request(this.axios, this.basePath);

              case 6:
                response = _context55.sent;
                return _context55.abrupt("return", _objectSpread(_objectSpread({}, response), {}, {
                  data: (0, _models.transformJSONToScreenSection)(response.data)
                }));

              case 8:
              case "end":
                return _context55.stop();
            }
          }
        }, _callee55, this);
      }));

      function getScreenSection(_x119, _x120, _x121) {
        return _getScreenSection2.apply(this, arguments);
      }

      return getScreenSection;
    }()
    /**
     * List all screen sections of the project
     * @summary Get screen sections
     * @param {string} projectId Project id
     * @param {ScreensApiGetScreenSectionsSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreensApi
     */

  }, {
    key: "getScreenSections",
    value: function () {
      var _getScreenSections2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee56(projectId) {
        var searchParams,
            options,
            screensApiFp,
            request,
            response,
            _args56 = arguments;
        return regeneratorRuntime.wrap(function _callee56$(_context56) {
          while (1) {
            switch (_context56.prev = _context56.next) {
              case 0:
                searchParams = _args56.length > 1 && _args56[1] !== undefined ? _args56[1] : {};
                options = _args56.length > 2 ? _args56[2] : undefined;
                screensApiFp = ScreensApiFp(this.configuration);
                _context56.next = 5;
                return screensApiFp.getScreenSections(projectId, searchParams.limit, searchParams.offset, options);

              case 5:
                request = _context56.sent;
                _context56.next = 8;
                return request(this.axios, this.basePath);

              case 8:
                response = _context56.sent;
                return _context56.abrupt("return", _objectSpread(_objectSpread({}, response), {}, {
                  data: response.data.map(_models.transformJSONToScreenSection)
                }));

              case 10:
              case "end":
                return _context56.stop();
            }
          }
        }, _callee56, this);
      }));

      function getScreenSections(_x122) {
        return _getScreenSections2.apply(this, arguments);
      }

      return getScreenSections;
    }()
    /**
     * Get a screen variant by id
     * @summary Get a single screen variant
     * @param {string} projectId Project id
     * @param {string} variantId Screen variant id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreensApi
     */

  }, {
    key: "getScreenVariant",
    value: function () {
      var _getScreenVariant2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee57(projectId, variantId, options) {
        var screensApiFp, request, response;
        return regeneratorRuntime.wrap(function _callee57$(_context57) {
          while (1) {
            switch (_context57.prev = _context57.next) {
              case 0:
                screensApiFp = ScreensApiFp(this.configuration);
                _context57.next = 3;
                return screensApiFp.getScreenVariant(projectId, variantId, options);

              case 3:
                request = _context57.sent;
                _context57.next = 6;
                return request(this.axios, this.basePath);

              case 6:
                response = _context57.sent;
                return _context57.abrupt("return", _objectSpread(_objectSpread({}, response), {}, {
                  data: (0, _models.transformJSONToScreenVariantGroup)(response.data)
                }));

              case 8:
              case "end":
                return _context57.stop();
            }
          }
        }, _callee57, this);
      }));

      function getScreenVariant(_x123, _x124, _x125) {
        return _getScreenVariant2.apply(this, arguments);
      }

      return getScreenVariant;
    }()
    /**
     * List all screen variants of the project
     * @summary Get screen variants
     * @param {string} projectId Project id
     * @param {ScreensApiGetScreenVariantsSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreensApi
     */

  }, {
    key: "getScreenVariants",
    value: function () {
      var _getScreenVariants2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee58(projectId) {
        var searchParams,
            options,
            screensApiFp,
            request,
            response,
            _args58 = arguments;
        return regeneratorRuntime.wrap(function _callee58$(_context58) {
          while (1) {
            switch (_context58.prev = _context58.next) {
              case 0:
                searchParams = _args58.length > 1 && _args58[1] !== undefined ? _args58[1] : {};
                options = _args58.length > 2 ? _args58[2] : undefined;
                screensApiFp = ScreensApiFp(this.configuration);
                _context58.next = 5;
                return screensApiFp.getScreenVariants(projectId, searchParams.limit, searchParams.offset, options);

              case 5:
                request = _context58.sent;
                _context58.next = 8;
                return request(this.axios, this.basePath);

              case 8:
                response = _context58.sent;
                return _context58.abrupt("return", _objectSpread(_objectSpread({}, response), {}, {
                  data: response.data.map(_models.transformJSONToScreenVariantGroup)
                }));

              case 10:
              case "end":
                return _context58.stop();
            }
          }
        }, _callee58, this);
      }));

      function getScreenVariants(_x126) {
        return _getScreenVariants2.apply(this, arguments);
      }

      return getScreenVariants;
    }()
    /**
     * Get details of the screen version
     * @summary Get a single screen version
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {string} versionId Screen version id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreensApi
     */

  }, {
    key: "getScreenVersion",
    value: function () {
      var _getScreenVersion2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee59(projectId, screenId, versionId, options) {
        var screensApiFp, request, response;
        return regeneratorRuntime.wrap(function _callee59$(_context59) {
          while (1) {
            switch (_context59.prev = _context59.next) {
              case 0:
                screensApiFp = ScreensApiFp(this.configuration);
                _context59.next = 3;
                return screensApiFp.getScreenVersion(projectId, screenId, versionId, options);

              case 3:
                request = _context59.sent;
                _context59.next = 6;
                return request(this.axios, this.basePath);

              case 6:
                response = _context59.sent;
                return _context59.abrupt("return", _objectSpread(_objectSpread({}, response), {}, {
                  data: (0, _models.transformJSONToScreenVersion)(response.data)
                }));

              case 8:
              case "end":
                return _context59.stop();
            }
          }
        }, _callee59, this);
      }));

      function getScreenVersion(_x127, _x128, _x129, _x130) {
        return _getScreenVersion2.apply(this, arguments);
      }

      return getScreenVersion;
    }()
    /**
     * List all versions of the screen in a project
     * @summary Get screen versions
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {ScreensApiGetScreenVersionsSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreensApi
     */

  }, {
    key: "getScreenVersions",
    value: function () {
      var _getScreenVersions2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee60(projectId, screenId) {
        var searchParams,
            options,
            screensApiFp,
            request,
            response,
            _args60 = arguments;
        return regeneratorRuntime.wrap(function _callee60$(_context60) {
          while (1) {
            switch (_context60.prev = _context60.next) {
              case 0:
                searchParams = _args60.length > 2 && _args60[2] !== undefined ? _args60[2] : {};
                options = _args60.length > 3 ? _args60[3] : undefined;
                screensApiFp = ScreensApiFp(this.configuration);
                _context60.next = 5;
                return screensApiFp.getScreenVersions(projectId, screenId, searchParams.limit, searchParams.offset, options);

              case 5:
                request = _context60.sent;
                _context60.next = 8;
                return request(this.axios, this.basePath);

              case 8:
                response = _context60.sent;
                return _context60.abrupt("return", _objectSpread(_objectSpread({}, response), {}, {
                  data: response.data.map(_models.transformJSONToScreenVersionSummary)
                }));

              case 10:
              case "end":
                return _context60.stop();
            }
          }
        }, _callee60, this);
      }));

      function getScreenVersions(_x131, _x132) {
        return _getScreenVersions2.apply(this, arguments);
      }

      return getScreenVersions;
    }()
    /**
     * Update a screen\'s description
     * @summary Update a screen
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {ScreenUpdateBody} screenUpdateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreensApi
     */

  }, {
    key: "updateScreen",
    value: function () {
      var _updateScreen2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee61(projectId, screenId, screenUpdateBody, options) {
        var screensApiFp, request, response;
        return regeneratorRuntime.wrap(function _callee61$(_context61) {
          while (1) {
            switch (_context61.prev = _context61.next) {
              case 0:
                screensApiFp = ScreensApiFp(this.configuration);
                _context61.next = 3;
                return screensApiFp.updateScreen(projectId, screenId, screenUpdateBody, options);

              case 3:
                request = _context61.sent;
                _context61.next = 6;
                return request(this.axios, this.basePath);

              case 6:
                response = _context61.sent;
                return _context61.abrupt("return", response);

              case 8:
              case "end":
                return _context61.stop();
            }
          }
        }, _callee61, this);
      }));

      function updateScreen(_x133, _x134, _x135, _x136) {
        return _updateScreen2.apply(this, arguments);
      }

      return updateScreen;
    }()
    /**
     * Update comments on the screen note
     * @summary Update comment
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {string} noteId Screen note id
     * @param {string} commentId Screen comment id
     * @param {CommentUpdateBody} commentUpdateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreensApi
     */

  }, {
    key: "updateScreenComment",
    value: function () {
      var _updateScreenComment2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee62(projectId, screenId, noteId, commentId, commentUpdateBody, options) {
        var screensApiFp, request, response;
        return regeneratorRuntime.wrap(function _callee62$(_context62) {
          while (1) {
            switch (_context62.prev = _context62.next) {
              case 0:
                screensApiFp = ScreensApiFp(this.configuration);
                _context62.next = 3;
                return screensApiFp.updateScreenComment(projectId, screenId, noteId, commentId, commentUpdateBody, options);

              case 3:
                request = _context62.sent;
                _context62.next = 6;
                return request(this.axios, this.basePath);

              case 6:
                response = _context62.sent;
                return _context62.abrupt("return", response);

              case 8:
              case "end":
                return _context62.stop();
            }
          }
        }, _callee62, this);
      }));

      function updateScreenComment(_x137, _x138, _x139, _x140, _x141, _x142) {
        return _updateScreenComment2.apply(this, arguments);
      }

      return updateScreenComment;
    }()
    /**
     * Update a note on the screen
     * @summary Update a note
     * @param {string} projectId Project id
     * @param {string} screenId Screen id
     * @param {string} noteId Screen note id
     * @param {ScreenNoteUpdateBody} screenNoteUpdateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreensApi
     */

  }, {
    key: "updateScreenNote",
    value: function () {
      var _updateScreenNote2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee63(projectId, screenId, noteId, screenNoteUpdateBody, options) {
        var screensApiFp, request, response;
        return regeneratorRuntime.wrap(function _callee63$(_context63) {
          while (1) {
            switch (_context63.prev = _context63.next) {
              case 0:
                screensApiFp = ScreensApiFp(this.configuration);
                _context63.next = 3;
                return screensApiFp.updateScreenNote(projectId, screenId, noteId, screenNoteUpdateBody, options);

              case 3:
                request = _context63.sent;
                _context63.next = 6;
                return request(this.axios, this.basePath);

              case 6:
                response = _context63.sent;
                return _context63.abrupt("return", response);

              case 8:
              case "end":
                return _context63.stop();
            }
          }
        }, _callee63, this);
      }));

      function updateScreenNote(_x143, _x144, _x145, _x146, _x147) {
        return _updateScreenNote2.apply(this, arguments);
      }

      return updateScreenNote;
    }()
  }]);

  return ScreensApi;
}(_base.BaseAPI);

exports.ScreensApi = ScreensApi;