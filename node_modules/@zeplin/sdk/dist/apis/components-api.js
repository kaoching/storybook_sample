"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

require("core-js/modules/es.object.define-property.js");

require("core-js/modules/es.object.keys.js");

require("core-js/modules/es.symbol.js");

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptor.js");

require("core-js/modules/es.array.for-each.js");

require("core-js/modules/web.dom-collections.for-each.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

require("core-js/modules/es.object.define-properties.js");

require("core-js/modules/es.object.set-prototype-of.js");

require("core-js/modules/es.object.get-prototype-of.js");

require("core-js/modules/es.reflect.construct.js");

require("core-js/modules/es.object.create.js");

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.symbol.iterator.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ComponentsApiFp = exports.ComponentsApiAxiosParamCreator = exports.ComponentsApi = void 0;

require("regenerator-runtime/runtime.js");

require("core-js/modules/es.regexp.exec.js");

require("core-js/modules/es.string.replace.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.object.to-string.js");

require("core-js/modules/es.string.iterator.js");

require("core-js/modules/web.dom-collections.iterator.js");

require("core-js/modules/web.url.js");

require("core-js/modules/es.array.sort.js");

require("core-js/modules/es.array.map.js");

require("core-js/modules/es.promise.js");

var _axios = _interopRequireDefault(require("axios"));

var _common = require("../common");

var _base = require("../base");

var _models = require("../models");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/**
 * ComponentsApi - axios parameter creator
 * @export
 */
var ComponentsApiAxiosParamCreator = function ComponentsApiAxiosParamCreator(configuration) {
  return {
    /**
     * Get a project component by id
     * @summary Get a single project component
     * @param {string} projectId Project id
     * @param {string} componentId Component id
     * @param {boolean} [includeLatestVersion] Whether to include the latest version data in the Component object
     * @param {boolean} [includeLinkedStyleguides] Whether to include linked styleguides or not
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectComponent: function () {
      var _getProjectComponent = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(projectId, componentId, includeLatestVersion, includeLinkedStyleguides) {
        var options,
            localVarPath,
            localVarUrlObj,
            baseOptions,
            localVarRequestOptions,
            localVarHeaderParameter,
            localVarQueryParameter,
            headersFromBaseOptions,
            _args = arguments;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                options = _args.length > 4 && _args[4] !== undefined ? _args[4] : {};
                // verify required parameter 'projectId' is not null or undefined
                (0, _common.assertParamExists)('getProjectComponent', 'projectId', projectId); // verify required parameter 'componentId' is not null or undefined

                (0, _common.assertParamExists)('getProjectComponent', 'componentId', componentId);
                localVarPath = "/v1/projects/{project_id}/components/{component_id}".replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId))).replace("{".concat("component_id", "}"), encodeURIComponent(String(componentId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

                localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);

                if (configuration) {
                  baseOptions = configuration.baseOptions;
                }

                localVarRequestOptions = _objectSpread(_objectSpread({
                  method: 'GET'
                }, baseOptions), options);
                localVarHeaderParameter = {};
                localVarQueryParameter = {}; // authentication OAuth2 required
                // oauth required

                _context.next = 11;
                return (0, _common.setOAuthToObject)(localVarHeaderParameter, "OAuth2", [], configuration);

              case 11:
                _context.next = 13;
                return (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);

              case 13:
                if (includeLatestVersion !== undefined) {
                  localVarQueryParameter['include_latest_version'] = includeLatestVersion;
                }

                if (includeLinkedStyleguides !== undefined) {
                  localVarQueryParameter['include_linked_styleguides'] = includeLinkedStyleguides;
                }

                (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                return _context.abrupt("return", {
                  url: (0, _common.toPathString)(localVarUrlObj),
                  options: localVarRequestOptions
                });

              case 19:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function getProjectComponent(_x, _x2, _x3, _x4) {
        return _getProjectComponent.apply(this, arguments);
      }

      return getProjectComponent;
    }(),

    /**
     * Get latest version of the component in a project
     * @summary Get latest project component version
     * @param {string} projectId Project id
     * @param {string} componentId Component id
     * @param {boolean} [includeLinkedStyleguides] Whether to include linked styleguides or not
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectComponentLatestVersion: function () {
      var _getProjectComponentLatestVersion = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(projectId, componentId, includeLinkedStyleguides) {
        var options,
            localVarPath,
            localVarUrlObj,
            baseOptions,
            localVarRequestOptions,
            localVarHeaderParameter,
            localVarQueryParameter,
            headersFromBaseOptions,
            _args2 = arguments;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                options = _args2.length > 3 && _args2[3] !== undefined ? _args2[3] : {};
                // verify required parameter 'projectId' is not null or undefined
                (0, _common.assertParamExists)('getProjectComponentLatestVersion', 'projectId', projectId); // verify required parameter 'componentId' is not null or undefined

                (0, _common.assertParamExists)('getProjectComponentLatestVersion', 'componentId', componentId);
                localVarPath = "/v1/projects/{project_id}/components/{component_id}/versions/latest".replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId))).replace("{".concat("component_id", "}"), encodeURIComponent(String(componentId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

                localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);

                if (configuration) {
                  baseOptions = configuration.baseOptions;
                }

                localVarRequestOptions = _objectSpread(_objectSpread({
                  method: 'GET'
                }, baseOptions), options);
                localVarHeaderParameter = {};
                localVarQueryParameter = {}; // authentication OAuth2 required
                // oauth required

                _context2.next = 11;
                return (0, _common.setOAuthToObject)(localVarHeaderParameter, "OAuth2", [], configuration);

              case 11:
                _context2.next = 13;
                return (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);

              case 13:
                if (includeLinkedStyleguides !== undefined) {
                  localVarQueryParameter['include_linked_styleguides'] = includeLinkedStyleguides;
                }

                (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                return _context2.abrupt("return", {
                  url: (0, _common.toPathString)(localVarUrlObj),
                  options: localVarRequestOptions
                });

              case 18:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      function getProjectComponentLatestVersion(_x5, _x6, _x7) {
        return _getProjectComponentLatestVersion.apply(this, arguments);
      }

      return getProjectComponentLatestVersion;
    }(),

    /**
     * List all component sections of the project
     * @summary Get project component sections
     * @param {string} projectId Project id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectComponentSections: function () {
      var _getProjectComponentSections = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(projectId, limit, offset) {
        var options,
            localVarPath,
            localVarUrlObj,
            baseOptions,
            localVarRequestOptions,
            localVarHeaderParameter,
            localVarQueryParameter,
            headersFromBaseOptions,
            _args3 = arguments;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                options = _args3.length > 3 && _args3[3] !== undefined ? _args3[3] : {};
                // verify required parameter 'projectId' is not null or undefined
                (0, _common.assertParamExists)('getProjectComponentSections', 'projectId', projectId);
                localVarPath = "/v1/projects/{project_id}/component_sections".replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

                localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);

                if (configuration) {
                  baseOptions = configuration.baseOptions;
                }

                localVarRequestOptions = _objectSpread(_objectSpread({
                  method: 'GET'
                }, baseOptions), options);
                localVarHeaderParameter = {};
                localVarQueryParameter = {}; // authentication OAuth2 required
                // oauth required

                _context3.next = 10;
                return (0, _common.setOAuthToObject)(localVarHeaderParameter, "OAuth2", [], configuration);

              case 10:
                _context3.next = 12;
                return (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);

              case 12:
                if (limit !== undefined) {
                  localVarQueryParameter['limit'] = limit;
                }

                if (offset !== undefined) {
                  localVarQueryParameter['offset'] = offset;
                }

                (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                return _context3.abrupt("return", {
                  url: (0, _common.toPathString)(localVarUrlObj),
                  options: localVarRequestOptions
                });

              case 18:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      function getProjectComponentSections(_x8, _x9, _x10) {
        return _getProjectComponentSections.apply(this, arguments);
      }

      return getProjectComponentSections;
    }(),

    /**
     * List all components of a project
     * @summary Get project components
     * @param {string} projectId Project id
     * @param {string} [sectionId] Filter by section id
     * @param {'section' | 'created'} [sort] Sort components by their &#x60;section&#x60; or their &#x60;created&#x60; date
     * @param {boolean} [includeLatestVersion] Whether to include the latest version data in the Component object
     * @param {boolean} [includeLinkedStyleguides] Whether to include linked styleguides or not
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectComponents: function () {
      var _getProjectComponents = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(projectId, sectionId, sort, includeLatestVersion, includeLinkedStyleguides, limit, offset) {
        var options,
            localVarPath,
            localVarUrlObj,
            baseOptions,
            localVarRequestOptions,
            localVarHeaderParameter,
            localVarQueryParameter,
            headersFromBaseOptions,
            _args4 = arguments;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                options = _args4.length > 7 && _args4[7] !== undefined ? _args4[7] : {};
                // verify required parameter 'projectId' is not null or undefined
                (0, _common.assertParamExists)('getProjectComponents', 'projectId', projectId);
                localVarPath = "/v1/projects/{project_id}/components".replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

                localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);

                if (configuration) {
                  baseOptions = configuration.baseOptions;
                }

                localVarRequestOptions = _objectSpread(_objectSpread({
                  method: 'GET'
                }, baseOptions), options);
                localVarHeaderParameter = {};
                localVarQueryParameter = {}; // authentication OAuth2 required
                // oauth required

                _context4.next = 10;
                return (0, _common.setOAuthToObject)(localVarHeaderParameter, "OAuth2", [], configuration);

              case 10:
                _context4.next = 12;
                return (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);

              case 12:
                if (sectionId !== undefined) {
                  localVarQueryParameter['section_id'] = sectionId;
                }

                if (sort !== undefined) {
                  localVarQueryParameter['sort'] = sort;
                }

                if (includeLatestVersion !== undefined) {
                  localVarQueryParameter['include_latest_version'] = includeLatestVersion;
                }

                if (includeLinkedStyleguides !== undefined) {
                  localVarQueryParameter['include_linked_styleguides'] = includeLinkedStyleguides;
                }

                if (limit !== undefined) {
                  localVarQueryParameter['limit'] = limit;
                }

                if (offset !== undefined) {
                  localVarQueryParameter['offset'] = offset;
                }

                (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                return _context4.abrupt("return", {
                  url: (0, _common.toPathString)(localVarUrlObj),
                  options: localVarRequestOptions
                });

              case 22:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      function getProjectComponents(_x11, _x12, _x13, _x14, _x15, _x16, _x17) {
        return _getProjectComponents.apply(this, arguments);
      }

      return getProjectComponents;
    }(),

    /**
     * Returns the component in a styleguide that user has access.  See [Styleguide docs](#getstyleguide) for more details about how `linked_project` and `linked_styleguide` parameters can be used to retrieve resources from styleguides that user is eligible to access. 
     * @summary Get a single styleguide component
     * @param {string} styleguideId Styleguide id
     * @param {string} componentId Component id
     * @param {string} [linkedProject] Reference project id
     * @param {string} [linkedStyleguide] Reference styleguide id
     * @param {boolean} [includeLatestVersion] Whether to include the latest version data in the Component object
     * @param {boolean} [includeLinkedStyleguides] Whether to include linked styleguides or not
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStyleguideComponent: function () {
      var _getStyleguideComponent = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(styleguideId, componentId, linkedProject, linkedStyleguide, includeLatestVersion, includeLinkedStyleguides) {
        var options,
            localVarPath,
            localVarUrlObj,
            baseOptions,
            localVarRequestOptions,
            localVarHeaderParameter,
            localVarQueryParameter,
            headersFromBaseOptions,
            _args5 = arguments;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                options = _args5.length > 6 && _args5[6] !== undefined ? _args5[6] : {};
                // verify required parameter 'styleguideId' is not null or undefined
                (0, _common.assertParamExists)('getStyleguideComponent', 'styleguideId', styleguideId); // verify required parameter 'componentId' is not null or undefined

                (0, _common.assertParamExists)('getStyleguideComponent', 'componentId', componentId);
                localVarPath = "/v1/styleguides/{styleguide_id}/components/{component_id}".replace("{".concat("styleguide_id", "}"), encodeURIComponent(String(styleguideId))).replace("{".concat("component_id", "}"), encodeURIComponent(String(componentId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

                localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);

                if (configuration) {
                  baseOptions = configuration.baseOptions;
                }

                localVarRequestOptions = _objectSpread(_objectSpread({
                  method: 'GET'
                }, baseOptions), options);
                localVarHeaderParameter = {};
                localVarQueryParameter = {}; // authentication OAuth2 required
                // oauth required

                _context5.next = 11;
                return (0, _common.setOAuthToObject)(localVarHeaderParameter, "OAuth2", [], configuration);

              case 11:
                _context5.next = 13;
                return (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);

              case 13:
                if (linkedProject !== undefined) {
                  localVarQueryParameter['linked_project'] = linkedProject;
                }

                if (linkedStyleguide !== undefined) {
                  localVarQueryParameter['linked_styleguide'] = linkedStyleguide;
                }

                if (includeLatestVersion !== undefined) {
                  localVarQueryParameter['include_latest_version'] = includeLatestVersion;
                }

                if (includeLinkedStyleguides !== undefined) {
                  localVarQueryParameter['include_linked_styleguides'] = includeLinkedStyleguides;
                }

                (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                return _context5.abrupt("return", {
                  url: (0, _common.toPathString)(localVarUrlObj),
                  options: localVarRequestOptions
                });

              case 21:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }));

      function getStyleguideComponent(_x18, _x19, _x20, _x21, _x22, _x23) {
        return _getStyleguideComponent.apply(this, arguments);
      }

      return getStyleguideComponent;
    }(),

    /**
     * Returns the latest version of the component in a styleguide that user has access.  See [Styleguide docs](#getstyleguide) for more details about how `linked_project` and `linked_styleguide` parameters can be used to retrieve resources from styleguides that user is eligible to access. 
     * @summary Get latest styleguide component version
     * @param {string} styleguideId Styleguide id
     * @param {string} componentId Component id
     * @param {string} [linkedProject] Reference project id
     * @param {string} [linkedStyleguide] Reference styleguide id
     * @param {boolean} [includeLinkedStyleguides] Whether to include linked styleguides or not
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStyleguideComponentLatestVersion: function () {
      var _getStyleguideComponentLatestVersion = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(styleguideId, componentId, linkedProject, linkedStyleguide, includeLinkedStyleguides) {
        var options,
            localVarPath,
            localVarUrlObj,
            baseOptions,
            localVarRequestOptions,
            localVarHeaderParameter,
            localVarQueryParameter,
            headersFromBaseOptions,
            _args6 = arguments;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                options = _args6.length > 5 && _args6[5] !== undefined ? _args6[5] : {};
                // verify required parameter 'styleguideId' is not null or undefined
                (0, _common.assertParamExists)('getStyleguideComponentLatestVersion', 'styleguideId', styleguideId); // verify required parameter 'componentId' is not null or undefined

                (0, _common.assertParamExists)('getStyleguideComponentLatestVersion', 'componentId', componentId);
                localVarPath = "/v1/styleguides/{styleguide_id}/components/{component_id}/versions/latest".replace("{".concat("styleguide_id", "}"), encodeURIComponent(String(styleguideId))).replace("{".concat("component_id", "}"), encodeURIComponent(String(componentId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

                localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);

                if (configuration) {
                  baseOptions = configuration.baseOptions;
                }

                localVarRequestOptions = _objectSpread(_objectSpread({
                  method: 'GET'
                }, baseOptions), options);
                localVarHeaderParameter = {};
                localVarQueryParameter = {}; // authentication OAuth2 required
                // oauth required

                _context6.next = 11;
                return (0, _common.setOAuthToObject)(localVarHeaderParameter, "OAuth2", [], configuration);

              case 11:
                _context6.next = 13;
                return (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);

              case 13:
                if (linkedProject !== undefined) {
                  localVarQueryParameter['linked_project'] = linkedProject;
                }

                if (linkedStyleguide !== undefined) {
                  localVarQueryParameter['linked_styleguide'] = linkedStyleguide;
                }

                if (includeLinkedStyleguides !== undefined) {
                  localVarQueryParameter['include_linked_styleguides'] = includeLinkedStyleguides;
                }

                (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                return _context6.abrupt("return", {
                  url: (0, _common.toPathString)(localVarUrlObj),
                  options: localVarRequestOptions
                });

              case 20:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }));

      function getStyleguideComponentLatestVersion(_x24, _x25, _x26, _x27, _x28) {
        return _getStyleguideComponentLatestVersion.apply(this, arguments);
      }

      return getStyleguideComponentLatestVersion;
    }(),

    /**
     * Returns the component sections of a styleguide that user has access.  See [Styleguide docs](#getstyleguide) for more details about how `linked_project` and `linked_styleguide` parameters can be used to retrieve resources from styleguides that user is eligible to access. 
     * @summary Get styleguide component sections
     * @param {string} styleguideId Styleguide id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {string} [linkedProject] Reference project id
     * @param {string} [linkedStyleguide] Reference styleguide id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStyleguideComponentSections: function () {
      var _getStyleguideComponentSections = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(styleguideId, limit, offset, linkedProject, linkedStyleguide) {
        var options,
            localVarPath,
            localVarUrlObj,
            baseOptions,
            localVarRequestOptions,
            localVarHeaderParameter,
            localVarQueryParameter,
            headersFromBaseOptions,
            _args7 = arguments;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                options = _args7.length > 5 && _args7[5] !== undefined ? _args7[5] : {};
                // verify required parameter 'styleguideId' is not null or undefined
                (0, _common.assertParamExists)('getStyleguideComponentSections', 'styleguideId', styleguideId);
                localVarPath = "/v1/styleguides/{styleguide_id}/component_sections".replace("{".concat("styleguide_id", "}"), encodeURIComponent(String(styleguideId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

                localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);

                if (configuration) {
                  baseOptions = configuration.baseOptions;
                }

                localVarRequestOptions = _objectSpread(_objectSpread({
                  method: 'GET'
                }, baseOptions), options);
                localVarHeaderParameter = {};
                localVarQueryParameter = {}; // authentication OAuth2 required
                // oauth required

                _context7.next = 10;
                return (0, _common.setOAuthToObject)(localVarHeaderParameter, "OAuth2", [], configuration);

              case 10:
                _context7.next = 12;
                return (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);

              case 12:
                if (limit !== undefined) {
                  localVarQueryParameter['limit'] = limit;
                }

                if (offset !== undefined) {
                  localVarQueryParameter['offset'] = offset;
                }

                if (linkedProject !== undefined) {
                  localVarQueryParameter['linked_project'] = linkedProject;
                }

                if (linkedStyleguide !== undefined) {
                  localVarQueryParameter['linked_styleguide'] = linkedStyleguide;
                }

                (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                return _context7.abrupt("return", {
                  url: (0, _common.toPathString)(localVarUrlObj),
                  options: localVarRequestOptions
                });

              case 20:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7);
      }));

      function getStyleguideComponentSections(_x29, _x30, _x31, _x32, _x33) {
        return _getStyleguideComponentSections.apply(this, arguments);
      }

      return getStyleguideComponentSections;
    }(),

    /**
     * Returns components in a styleguide that user has access.  See [Styleguide docs](#getstyleguide) for more details about how `linked_project` and `linked_styleguide` parameters can be used to retrieve resources from styleguides that user is eligible to access. 
     * @summary Get styleguide components
     * @param {string} styleguideId Styleguide id
     * @param {string} [sectionId] Filter by section id
     * @param {'section' | 'created'} [sort] Sort components by their &#x60;section&#x60; or their &#x60;created&#x60; date
     * @param {string} [linkedProject] Reference project id
     * @param {string} [linkedStyleguide] Reference styleguide id
     * @param {boolean} [includeLinkedStyleguides] Whether to include linked styleguides or not
     * @param {boolean} [includeLatestVersion] Whether to include the latest version data in the Component object
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStyleguideComponents: function () {
      var _getStyleguideComponents = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(styleguideId, sectionId, sort, linkedProject, linkedStyleguide, includeLinkedStyleguides, includeLatestVersion, limit, offset) {
        var options,
            localVarPath,
            localVarUrlObj,
            baseOptions,
            localVarRequestOptions,
            localVarHeaderParameter,
            localVarQueryParameter,
            headersFromBaseOptions,
            _args8 = arguments;
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                options = _args8.length > 9 && _args8[9] !== undefined ? _args8[9] : {};
                // verify required parameter 'styleguideId' is not null or undefined
                (0, _common.assertParamExists)('getStyleguideComponents', 'styleguideId', styleguideId);
                localVarPath = "/v1/styleguides/{styleguide_id}/components".replace("{".concat("styleguide_id", "}"), encodeURIComponent(String(styleguideId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

                localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);

                if (configuration) {
                  baseOptions = configuration.baseOptions;
                }

                localVarRequestOptions = _objectSpread(_objectSpread({
                  method: 'GET'
                }, baseOptions), options);
                localVarHeaderParameter = {};
                localVarQueryParameter = {}; // authentication OAuth2 required
                // oauth required

                _context8.next = 10;
                return (0, _common.setOAuthToObject)(localVarHeaderParameter, "OAuth2", [], configuration);

              case 10:
                _context8.next = 12;
                return (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);

              case 12:
                if (sectionId !== undefined) {
                  localVarQueryParameter['section_id'] = sectionId;
                }

                if (sort !== undefined) {
                  localVarQueryParameter['sort'] = sort;
                }

                if (linkedProject !== undefined) {
                  localVarQueryParameter['linked_project'] = linkedProject;
                }

                if (linkedStyleguide !== undefined) {
                  localVarQueryParameter['linked_styleguide'] = linkedStyleguide;
                }

                if (includeLinkedStyleguides !== undefined) {
                  localVarQueryParameter['include_linked_styleguides'] = includeLinkedStyleguides;
                }

                if (includeLatestVersion !== undefined) {
                  localVarQueryParameter['include_latest_version'] = includeLatestVersion;
                }

                if (limit !== undefined) {
                  localVarQueryParameter['limit'] = limit;
                }

                if (offset !== undefined) {
                  localVarQueryParameter['offset'] = offset;
                }

                (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                return _context8.abrupt("return", {
                  url: (0, _common.toPathString)(localVarUrlObj),
                  options: localVarRequestOptions
                });

              case 24:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8);
      }));

      function getStyleguideComponents(_x34, _x35, _x36, _x37, _x38, _x39, _x40, _x41, _x42) {
        return _getStyleguideComponents.apply(this, arguments);
      }

      return getStyleguideComponents;
    }(),

    /**
     * Update a component\'s description in a project
     * @summary Update a project component
     * @param {string} projectId Project id
     * @param {string} componentId Component id
     * @param {ComponentUpdateBody} componentUpdateBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProjectComponent: function () {
      var _updateProjectComponent = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(projectId, componentId, componentUpdateBody) {
        var options,
            localVarPath,
            localVarUrlObj,
            baseOptions,
            localVarRequestOptions,
            localVarHeaderParameter,
            localVarQueryParameter,
            headersFromBaseOptions,
            _args9 = arguments;
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                options = _args9.length > 3 && _args9[3] !== undefined ? _args9[3] : {};
                // verify required parameter 'projectId' is not null or undefined
                (0, _common.assertParamExists)('updateProjectComponent', 'projectId', projectId); // verify required parameter 'componentId' is not null or undefined

                (0, _common.assertParamExists)('updateProjectComponent', 'componentId', componentId); // verify required parameter 'componentUpdateBody' is not null or undefined

                (0, _common.assertParamExists)('updateProjectComponent', 'componentUpdateBody', componentUpdateBody);
                localVarPath = "/v1/projects/{project_id}/components/{component_id}".replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId))).replace("{".concat("component_id", "}"), encodeURIComponent(String(componentId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

                localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);

                if (configuration) {
                  baseOptions = configuration.baseOptions;
                }

                localVarRequestOptions = _objectSpread(_objectSpread({
                  method: 'PATCH'
                }, baseOptions), options);
                localVarHeaderParameter = {};
                localVarQueryParameter = {}; // authentication OAuth2 required
                // oauth required

                _context9.next = 12;
                return (0, _common.setOAuthToObject)(localVarHeaderParameter, "OAuth2", [], configuration);

              case 12:
                _context9.next = 14;
                return (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);

              case 14:
                localVarHeaderParameter['Content-Type'] = 'application/json';
                (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                localVarRequestOptions.data = (0, _common.serializeDataIfNeeded)((0, _models.transformComponentUpdateBodyToJSON)(componentUpdateBody), localVarRequestOptions, configuration);
                return _context9.abrupt("return", {
                  url: (0, _common.toPathString)(localVarUrlObj),
                  options: localVarRequestOptions
                });

              case 20:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9);
      }));

      function updateProjectComponent(_x43, _x44, _x45) {
        return _updateProjectComponent.apply(this, arguments);
      }

      return updateProjectComponent;
    }(),

    /**
     * Update a component\'s description in a styleguide
     * @summary Update a styleguide component
     * @param {string} styleguideId Styleguide id
     * @param {string} componentId Component id
     * @param {ComponentUpdateBody} componentUpdateBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateStyleguideComponent: function () {
      var _updateStyleguideComponent = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(styleguideId, componentId, componentUpdateBody) {
        var options,
            localVarPath,
            localVarUrlObj,
            baseOptions,
            localVarRequestOptions,
            localVarHeaderParameter,
            localVarQueryParameter,
            headersFromBaseOptions,
            _args10 = arguments;
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                options = _args10.length > 3 && _args10[3] !== undefined ? _args10[3] : {};
                // verify required parameter 'styleguideId' is not null or undefined
                (0, _common.assertParamExists)('updateStyleguideComponent', 'styleguideId', styleguideId); // verify required parameter 'componentId' is not null or undefined

                (0, _common.assertParamExists)('updateStyleguideComponent', 'componentId', componentId); // verify required parameter 'componentUpdateBody' is not null or undefined

                (0, _common.assertParamExists)('updateStyleguideComponent', 'componentUpdateBody', componentUpdateBody);
                localVarPath = "/v1/styleguides/{styleguide_id}/components/{component_id}".replace("{".concat("styleguide_id", "}"), encodeURIComponent(String(styleguideId))).replace("{".concat("component_id", "}"), encodeURIComponent(String(componentId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

                localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);

                if (configuration) {
                  baseOptions = configuration.baseOptions;
                }

                localVarRequestOptions = _objectSpread(_objectSpread({
                  method: 'PATCH'
                }, baseOptions), options);
                localVarHeaderParameter = {};
                localVarQueryParameter = {}; // authentication OAuth2 required
                // oauth required

                _context10.next = 12;
                return (0, _common.setOAuthToObject)(localVarHeaderParameter, "OAuth2", [], configuration);

              case 12:
                _context10.next = 14;
                return (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);

              case 14:
                localVarHeaderParameter['Content-Type'] = 'application/json';
                (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                localVarRequestOptions.data = (0, _common.serializeDataIfNeeded)((0, _models.transformComponentUpdateBodyToJSON)(componentUpdateBody), localVarRequestOptions, configuration);
                return _context10.abrupt("return", {
                  url: (0, _common.toPathString)(localVarUrlObj),
                  options: localVarRequestOptions
                });

              case 20:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10);
      }));

      function updateStyleguideComponent(_x46, _x47, _x48) {
        return _updateStyleguideComponent.apply(this, arguments);
      }

      return updateStyleguideComponent;
    }()
  };
};
/**
 * ComponentsApi - functional programming interface
 * @export
 */


exports.ComponentsApiAxiosParamCreator = ComponentsApiAxiosParamCreator;

var ComponentsApiFp = function ComponentsApiFp(configuration) {
  var localVarAxiosParamCreator = ComponentsApiAxiosParamCreator(configuration);
  return {
    /**
     * Get a project component by id
     * @summary Get a single project component
     * @param {string} projectId Project id
     * @param {string} componentId Component id
     * @param {boolean} [includeLatestVersion] Whether to include the latest version data in the Component object
     * @param {boolean} [includeLinkedStyleguides] Whether to include linked styleguides or not
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectComponent: function getProjectComponent(projectId, componentId, includeLatestVersion, includeLinkedStyleguides, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                _context11.next = 2;
                return localVarAxiosParamCreator.getProjectComponent(projectId, componentId, includeLatestVersion, includeLinkedStyleguides, options);

              case 2:
                localVarAxiosArgs = _context11.sent;
                return _context11.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11);
      }))();
    },

    /**
     * Get latest version of the component in a project
     * @summary Get latest project component version
     * @param {string} projectId Project id
     * @param {string} componentId Component id
     * @param {boolean} [includeLinkedStyleguides] Whether to include linked styleguides or not
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectComponentLatestVersion: function getProjectComponentLatestVersion(projectId, componentId, includeLinkedStyleguides, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                _context12.next = 2;
                return localVarAxiosParamCreator.getProjectComponentLatestVersion(projectId, componentId, includeLinkedStyleguides, options);

              case 2:
                localVarAxiosArgs = _context12.sent;
                return _context12.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12);
      }))();
    },

    /**
     * List all component sections of the project
     * @summary Get project component sections
     * @param {string} projectId Project id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectComponentSections: function getProjectComponentSections(projectId, limit, offset, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                _context13.next = 2;
                return localVarAxiosParamCreator.getProjectComponentSections(projectId, limit, offset, options);

              case 2:
                localVarAxiosArgs = _context13.sent;
                return _context13.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13);
      }))();
    },

    /**
     * List all components of a project
     * @summary Get project components
     * @param {string} projectId Project id
     * @param {string} [sectionId] Filter by section id
     * @param {'section' | 'created'} [sort] Sort components by their &#x60;section&#x60; or their &#x60;created&#x60; date
     * @param {boolean} [includeLatestVersion] Whether to include the latest version data in the Component object
     * @param {boolean} [includeLinkedStyleguides] Whether to include linked styleguides or not
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectComponents: function getProjectComponents(projectId, sectionId, sort, includeLatestVersion, includeLinkedStyleguides, limit, offset, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                _context14.next = 2;
                return localVarAxiosParamCreator.getProjectComponents(projectId, sectionId, sort, includeLatestVersion, includeLinkedStyleguides, limit, offset, options);

              case 2:
                localVarAxiosArgs = _context14.sent;
                return _context14.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14);
      }))();
    },

    /**
     * Returns the component in a styleguide that user has access.  See [Styleguide docs](#getstyleguide) for more details about how `linked_project` and `linked_styleguide` parameters can be used to retrieve resources from styleguides that user is eligible to access. 
     * @summary Get a single styleguide component
     * @param {string} styleguideId Styleguide id
     * @param {string} componentId Component id
     * @param {string} [linkedProject] Reference project id
     * @param {string} [linkedStyleguide] Reference styleguide id
     * @param {boolean} [includeLatestVersion] Whether to include the latest version data in the Component object
     * @param {boolean} [includeLinkedStyleguides] Whether to include linked styleguides or not
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStyleguideComponent: function getStyleguideComponent(styleguideId, componentId, linkedProject, linkedStyleguide, includeLatestVersion, includeLinkedStyleguides, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                _context15.next = 2;
                return localVarAxiosParamCreator.getStyleguideComponent(styleguideId, componentId, linkedProject, linkedStyleguide, includeLatestVersion, includeLinkedStyleguides, options);

              case 2:
                localVarAxiosArgs = _context15.sent;
                return _context15.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15);
      }))();
    },

    /**
     * Returns the latest version of the component in a styleguide that user has access.  See [Styleguide docs](#getstyleguide) for more details about how `linked_project` and `linked_styleguide` parameters can be used to retrieve resources from styleguides that user is eligible to access. 
     * @summary Get latest styleguide component version
     * @param {string} styleguideId Styleguide id
     * @param {string} componentId Component id
     * @param {string} [linkedProject] Reference project id
     * @param {string} [linkedStyleguide] Reference styleguide id
     * @param {boolean} [includeLinkedStyleguides] Whether to include linked styleguides or not
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStyleguideComponentLatestVersion: function getStyleguideComponentLatestVersion(styleguideId, componentId, linkedProject, linkedStyleguide, includeLinkedStyleguides, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                _context16.next = 2;
                return localVarAxiosParamCreator.getStyleguideComponentLatestVersion(styleguideId, componentId, linkedProject, linkedStyleguide, includeLinkedStyleguides, options);

              case 2:
                localVarAxiosArgs = _context16.sent;
                return _context16.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16);
      }))();
    },

    /**
     * Returns the component sections of a styleguide that user has access.  See [Styleguide docs](#getstyleguide) for more details about how `linked_project` and `linked_styleguide` parameters can be used to retrieve resources from styleguides that user is eligible to access. 
     * @summary Get styleguide component sections
     * @param {string} styleguideId Styleguide id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {string} [linkedProject] Reference project id
     * @param {string} [linkedStyleguide] Reference styleguide id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStyleguideComponentSections: function getStyleguideComponentSections(styleguideId, limit, offset, linkedProject, linkedStyleguide, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                _context17.next = 2;
                return localVarAxiosParamCreator.getStyleguideComponentSections(styleguideId, limit, offset, linkedProject, linkedStyleguide, options);

              case 2:
                localVarAxiosArgs = _context17.sent;
                return _context17.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee17);
      }))();
    },

    /**
     * Returns components in a styleguide that user has access.  See [Styleguide docs](#getstyleguide) for more details about how `linked_project` and `linked_styleguide` parameters can be used to retrieve resources from styleguides that user is eligible to access. 
     * @summary Get styleguide components
     * @param {string} styleguideId Styleguide id
     * @param {string} [sectionId] Filter by section id
     * @param {'section' | 'created'} [sort] Sort components by their &#x60;section&#x60; or their &#x60;created&#x60; date
     * @param {string} [linkedProject] Reference project id
     * @param {string} [linkedStyleguide] Reference styleguide id
     * @param {boolean} [includeLinkedStyleguides] Whether to include linked styleguides or not
     * @param {boolean} [includeLatestVersion] Whether to include the latest version data in the Component object
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStyleguideComponents: function getStyleguideComponents(styleguideId, sectionId, sort, linkedProject, linkedStyleguide, includeLinkedStyleguides, includeLatestVersion, limit, offset, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee18$(_context18) {
          while (1) {
            switch (_context18.prev = _context18.next) {
              case 0:
                _context18.next = 2;
                return localVarAxiosParamCreator.getStyleguideComponents(styleguideId, sectionId, sort, linkedProject, linkedStyleguide, includeLinkedStyleguides, includeLatestVersion, limit, offset, options);

              case 2:
                localVarAxiosArgs = _context18.sent;
                return _context18.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context18.stop();
            }
          }
        }, _callee18);
      }))();
    },

    /**
     * Update a component\'s description in a project
     * @summary Update a project component
     * @param {string} projectId Project id
     * @param {string} componentId Component id
     * @param {ComponentUpdateBody} componentUpdateBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProjectComponent: function updateProjectComponent(projectId, componentId, componentUpdateBody, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee19() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee19$(_context19) {
          while (1) {
            switch (_context19.prev = _context19.next) {
              case 0:
                _context19.next = 2;
                return localVarAxiosParamCreator.updateProjectComponent(projectId, componentId, componentUpdateBody, options);

              case 2:
                localVarAxiosArgs = _context19.sent;
                return _context19.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context19.stop();
            }
          }
        }, _callee19);
      }))();
    },

    /**
     * Update a component\'s description in a styleguide
     * @summary Update a styleguide component
     * @param {string} styleguideId Styleguide id
     * @param {string} componentId Component id
     * @param {ComponentUpdateBody} componentUpdateBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateStyleguideComponent: function updateStyleguideComponent(styleguideId, componentId, componentUpdateBody, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee20() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee20$(_context20) {
          while (1) {
            switch (_context20.prev = _context20.next) {
              case 0:
                _context20.next = 2;
                return localVarAxiosParamCreator.updateStyleguideComponent(styleguideId, componentId, componentUpdateBody, options);

              case 2:
                localVarAxiosArgs = _context20.sent;
                return _context20.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context20.stop();
            }
          }
        }, _callee20);
      }))();
    }
  };
};
/**
 * Search parameters for getProjectComponent operation in ComponentsApi.
 * @export
 * @interface ComponentsApiGetProjectComponentSearchParams
 */


exports.ComponentsApiFp = ComponentsApiFp;

/**
 * ComponentsApi - object-oriented interface
 * @export
 * @class ComponentsApi
 * @extends {BaseAPI}
 */
var ComponentsApi = /*#__PURE__*/function (_BaseAPI) {
  _inherits(ComponentsApi, _BaseAPI);

  var _super = _createSuper(ComponentsApi);

  function ComponentsApi() {
    _classCallCheck(this, ComponentsApi);

    return _super.apply(this, arguments);
  }

  _createClass(ComponentsApi, [{
    key: "getProjectComponent",
    value:
    /**
     * Get a project component by id
     * @summary Get a single project component
     * @param {string} projectId Project id
     * @param {string} componentId Component id
     * @param {ComponentsApiGetProjectComponentSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComponentsApi
     */
    function () {
      var _getProjectComponent2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee21(projectId, componentId) {
        var searchParams,
            options,
            componentsApiFp,
            request,
            response,
            _args21 = arguments;
        return regeneratorRuntime.wrap(function _callee21$(_context21) {
          while (1) {
            switch (_context21.prev = _context21.next) {
              case 0:
                searchParams = _args21.length > 2 && _args21[2] !== undefined ? _args21[2] : {};
                options = _args21.length > 3 ? _args21[3] : undefined;
                componentsApiFp = ComponentsApiFp(this.configuration);
                _context21.next = 5;
                return componentsApiFp.getProjectComponent(projectId, componentId, searchParams.includeLatestVersion, searchParams.includeLinkedStyleguides, options);

              case 5:
                request = _context21.sent;
                _context21.next = 8;
                return request(this.axios, this.basePath);

              case 8:
                response = _context21.sent;
                return _context21.abrupt("return", _objectSpread(_objectSpread({}, response), {}, {
                  data: (0, _models.transformJSONToComponent)(response.data)
                }));

              case 10:
              case "end":
                return _context21.stop();
            }
          }
        }, _callee21, this);
      }));

      function getProjectComponent(_x49, _x50) {
        return _getProjectComponent2.apply(this, arguments);
      }

      return getProjectComponent;
    }()
    /**
     * Get latest version of the component in a project
     * @summary Get latest project component version
     * @param {string} projectId Project id
     * @param {string} componentId Component id
     * @param {ComponentsApiGetProjectComponentLatestVersionSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComponentsApi
     */

  }, {
    key: "getProjectComponentLatestVersion",
    value: function () {
      var _getProjectComponentLatestVersion2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee22(projectId, componentId) {
        var searchParams,
            options,
            componentsApiFp,
            request,
            response,
            _args22 = arguments;
        return regeneratorRuntime.wrap(function _callee22$(_context22) {
          while (1) {
            switch (_context22.prev = _context22.next) {
              case 0:
                searchParams = _args22.length > 2 && _args22[2] !== undefined ? _args22[2] : {};
                options = _args22.length > 3 ? _args22[3] : undefined;
                componentsApiFp = ComponentsApiFp(this.configuration);
                _context22.next = 5;
                return componentsApiFp.getProjectComponentLatestVersion(projectId, componentId, searchParams.includeLinkedStyleguides, options);

              case 5:
                request = _context22.sent;
                _context22.next = 8;
                return request(this.axios, this.basePath);

              case 8:
                response = _context22.sent;
                return _context22.abrupt("return", _objectSpread(_objectSpread({}, response), {}, {
                  data: (0, _models.transformJSONToComponentVersion)(response.data)
                }));

              case 10:
              case "end":
                return _context22.stop();
            }
          }
        }, _callee22, this);
      }));

      function getProjectComponentLatestVersion(_x51, _x52) {
        return _getProjectComponentLatestVersion2.apply(this, arguments);
      }

      return getProjectComponentLatestVersion;
    }()
    /**
     * List all component sections of the project
     * @summary Get project component sections
     * @param {string} projectId Project id
     * @param {ComponentsApiGetProjectComponentSectionsSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComponentsApi
     */

  }, {
    key: "getProjectComponentSections",
    value: function () {
      var _getProjectComponentSections2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee23(projectId) {
        var searchParams,
            options,
            componentsApiFp,
            request,
            response,
            _args23 = arguments;
        return regeneratorRuntime.wrap(function _callee23$(_context23) {
          while (1) {
            switch (_context23.prev = _context23.next) {
              case 0:
                searchParams = _args23.length > 1 && _args23[1] !== undefined ? _args23[1] : {};
                options = _args23.length > 2 ? _args23[2] : undefined;
                componentsApiFp = ComponentsApiFp(this.configuration);
                _context23.next = 5;
                return componentsApiFp.getProjectComponentSections(projectId, searchParams.limit, searchParams.offset, options);

              case 5:
                request = _context23.sent;
                _context23.next = 8;
                return request(this.axios, this.basePath);

              case 8:
                response = _context23.sent;
                return _context23.abrupt("return", _objectSpread(_objectSpread({}, response), {}, {
                  data: response.data.map(_models.transformJSONToComponentSection)
                }));

              case 10:
              case "end":
                return _context23.stop();
            }
          }
        }, _callee23, this);
      }));

      function getProjectComponentSections(_x53) {
        return _getProjectComponentSections2.apply(this, arguments);
      }

      return getProjectComponentSections;
    }()
    /**
     * List all components of a project
     * @summary Get project components
     * @param {string} projectId Project id
     * @param {ComponentsApiGetProjectComponentsSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComponentsApi
     */

  }, {
    key: "getProjectComponents",
    value: function () {
      var _getProjectComponents2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee24(projectId) {
        var searchParams,
            options,
            componentsApiFp,
            request,
            response,
            _args24 = arguments;
        return regeneratorRuntime.wrap(function _callee24$(_context24) {
          while (1) {
            switch (_context24.prev = _context24.next) {
              case 0:
                searchParams = _args24.length > 1 && _args24[1] !== undefined ? _args24[1] : {};
                options = _args24.length > 2 ? _args24[2] : undefined;
                componentsApiFp = ComponentsApiFp(this.configuration);
                _context24.next = 5;
                return componentsApiFp.getProjectComponents(projectId, searchParams.sectionId, searchParams.sort, searchParams.includeLatestVersion, searchParams.includeLinkedStyleguides, searchParams.limit, searchParams.offset, options);

              case 5:
                request = _context24.sent;
                _context24.next = 8;
                return request(this.axios, this.basePath);

              case 8:
                response = _context24.sent;
                return _context24.abrupt("return", _objectSpread(_objectSpread({}, response), {}, {
                  data: response.data.map(_models.transformJSONToComponent)
                }));

              case 10:
              case "end":
                return _context24.stop();
            }
          }
        }, _callee24, this);
      }));

      function getProjectComponents(_x54) {
        return _getProjectComponents2.apply(this, arguments);
      }

      return getProjectComponents;
    }()
    /**
     * Returns the component in a styleguide that user has access.  See [Styleguide docs](#getstyleguide) for more details about how `linked_project` and `linked_styleguide` parameters can be used to retrieve resources from styleguides that user is eligible to access. 
     * @summary Get a single styleguide component
     * @param {string} styleguideId Styleguide id
     * @param {string} componentId Component id
     * @param {ComponentsApiGetStyleguideComponentSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComponentsApi
     */

  }, {
    key: "getStyleguideComponent",
    value: function () {
      var _getStyleguideComponent2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee25(styleguideId, componentId) {
        var searchParams,
            options,
            componentsApiFp,
            request,
            response,
            _args25 = arguments;
        return regeneratorRuntime.wrap(function _callee25$(_context25) {
          while (1) {
            switch (_context25.prev = _context25.next) {
              case 0:
                searchParams = _args25.length > 2 && _args25[2] !== undefined ? _args25[2] : {};
                options = _args25.length > 3 ? _args25[3] : undefined;
                componentsApiFp = ComponentsApiFp(this.configuration);
                _context25.next = 5;
                return componentsApiFp.getStyleguideComponent(styleguideId, componentId, searchParams.linkedProject, searchParams.linkedStyleguide, searchParams.includeLatestVersion, searchParams.includeLinkedStyleguides, options);

              case 5:
                request = _context25.sent;
                _context25.next = 8;
                return request(this.axios, this.basePath);

              case 8:
                response = _context25.sent;
                return _context25.abrupt("return", _objectSpread(_objectSpread({}, response), {}, {
                  data: (0, _models.transformJSONToComponent)(response.data)
                }));

              case 10:
              case "end":
                return _context25.stop();
            }
          }
        }, _callee25, this);
      }));

      function getStyleguideComponent(_x55, _x56) {
        return _getStyleguideComponent2.apply(this, arguments);
      }

      return getStyleguideComponent;
    }()
    /**
     * Returns the latest version of the component in a styleguide that user has access.  See [Styleguide docs](#getstyleguide) for more details about how `linked_project` and `linked_styleguide` parameters can be used to retrieve resources from styleguides that user is eligible to access. 
     * @summary Get latest styleguide component version
     * @param {string} styleguideId Styleguide id
     * @param {string} componentId Component id
     * @param {ComponentsApiGetStyleguideComponentLatestVersionSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComponentsApi
     */

  }, {
    key: "getStyleguideComponentLatestVersion",
    value: function () {
      var _getStyleguideComponentLatestVersion2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee26(styleguideId, componentId) {
        var searchParams,
            options,
            componentsApiFp,
            request,
            response,
            _args26 = arguments;
        return regeneratorRuntime.wrap(function _callee26$(_context26) {
          while (1) {
            switch (_context26.prev = _context26.next) {
              case 0:
                searchParams = _args26.length > 2 && _args26[2] !== undefined ? _args26[2] : {};
                options = _args26.length > 3 ? _args26[3] : undefined;
                componentsApiFp = ComponentsApiFp(this.configuration);
                _context26.next = 5;
                return componentsApiFp.getStyleguideComponentLatestVersion(styleguideId, componentId, searchParams.linkedProject, searchParams.linkedStyleguide, searchParams.includeLinkedStyleguides, options);

              case 5:
                request = _context26.sent;
                _context26.next = 8;
                return request(this.axios, this.basePath);

              case 8:
                response = _context26.sent;
                return _context26.abrupt("return", _objectSpread(_objectSpread({}, response), {}, {
                  data: (0, _models.transformJSONToComponentVersion)(response.data)
                }));

              case 10:
              case "end":
                return _context26.stop();
            }
          }
        }, _callee26, this);
      }));

      function getStyleguideComponentLatestVersion(_x57, _x58) {
        return _getStyleguideComponentLatestVersion2.apply(this, arguments);
      }

      return getStyleguideComponentLatestVersion;
    }()
    /**
     * Returns the component sections of a styleguide that user has access.  See [Styleguide docs](#getstyleguide) for more details about how `linked_project` and `linked_styleguide` parameters can be used to retrieve resources from styleguides that user is eligible to access. 
     * @summary Get styleguide component sections
     * @param {string} styleguideId Styleguide id
     * @param {ComponentsApiGetStyleguideComponentSectionsSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComponentsApi
     */

  }, {
    key: "getStyleguideComponentSections",
    value: function () {
      var _getStyleguideComponentSections2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee27(styleguideId) {
        var searchParams,
            options,
            componentsApiFp,
            request,
            response,
            _args27 = arguments;
        return regeneratorRuntime.wrap(function _callee27$(_context27) {
          while (1) {
            switch (_context27.prev = _context27.next) {
              case 0:
                searchParams = _args27.length > 1 && _args27[1] !== undefined ? _args27[1] : {};
                options = _args27.length > 2 ? _args27[2] : undefined;
                componentsApiFp = ComponentsApiFp(this.configuration);
                _context27.next = 5;
                return componentsApiFp.getStyleguideComponentSections(styleguideId, searchParams.limit, searchParams.offset, searchParams.linkedProject, searchParams.linkedStyleguide, options);

              case 5:
                request = _context27.sent;
                _context27.next = 8;
                return request(this.axios, this.basePath);

              case 8:
                response = _context27.sent;
                return _context27.abrupt("return", _objectSpread(_objectSpread({}, response), {}, {
                  data: response.data.map(_models.transformJSONToComponentSection)
                }));

              case 10:
              case "end":
                return _context27.stop();
            }
          }
        }, _callee27, this);
      }));

      function getStyleguideComponentSections(_x59) {
        return _getStyleguideComponentSections2.apply(this, arguments);
      }

      return getStyleguideComponentSections;
    }()
    /**
     * Returns components in a styleguide that user has access.  See [Styleguide docs](#getstyleguide) for more details about how `linked_project` and `linked_styleguide` parameters can be used to retrieve resources from styleguides that user is eligible to access. 
     * @summary Get styleguide components
     * @param {string} styleguideId Styleguide id
     * @param {ComponentsApiGetStyleguideComponentsSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComponentsApi
     */

  }, {
    key: "getStyleguideComponents",
    value: function () {
      var _getStyleguideComponents2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee28(styleguideId) {
        var searchParams,
            options,
            componentsApiFp,
            request,
            response,
            _args28 = arguments;
        return regeneratorRuntime.wrap(function _callee28$(_context28) {
          while (1) {
            switch (_context28.prev = _context28.next) {
              case 0:
                searchParams = _args28.length > 1 && _args28[1] !== undefined ? _args28[1] : {};
                options = _args28.length > 2 ? _args28[2] : undefined;
                componentsApiFp = ComponentsApiFp(this.configuration);
                _context28.next = 5;
                return componentsApiFp.getStyleguideComponents(styleguideId, searchParams.sectionId, searchParams.sort, searchParams.linkedProject, searchParams.linkedStyleguide, searchParams.includeLinkedStyleguides, searchParams.includeLatestVersion, searchParams.limit, searchParams.offset, options);

              case 5:
                request = _context28.sent;
                _context28.next = 8;
                return request(this.axios, this.basePath);

              case 8:
                response = _context28.sent;
                return _context28.abrupt("return", _objectSpread(_objectSpread({}, response), {}, {
                  data: response.data.map(_models.transformJSONToComponent)
                }));

              case 10:
              case "end":
                return _context28.stop();
            }
          }
        }, _callee28, this);
      }));

      function getStyleguideComponents(_x60) {
        return _getStyleguideComponents2.apply(this, arguments);
      }

      return getStyleguideComponents;
    }()
    /**
     * Update a component\'s description in a project
     * @summary Update a project component
     * @param {string} projectId Project id
     * @param {string} componentId Component id
     * @param {ComponentUpdateBody} componentUpdateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComponentsApi
     */

  }, {
    key: "updateProjectComponent",
    value: function () {
      var _updateProjectComponent2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee29(projectId, componentId, componentUpdateBody, options) {
        var componentsApiFp, request, response;
        return regeneratorRuntime.wrap(function _callee29$(_context29) {
          while (1) {
            switch (_context29.prev = _context29.next) {
              case 0:
                componentsApiFp = ComponentsApiFp(this.configuration);
                _context29.next = 3;
                return componentsApiFp.updateProjectComponent(projectId, componentId, componentUpdateBody, options);

              case 3:
                request = _context29.sent;
                _context29.next = 6;
                return request(this.axios, this.basePath);

              case 6:
                response = _context29.sent;
                return _context29.abrupt("return", response);

              case 8:
              case "end":
                return _context29.stop();
            }
          }
        }, _callee29, this);
      }));

      function updateProjectComponent(_x61, _x62, _x63, _x64) {
        return _updateProjectComponent2.apply(this, arguments);
      }

      return updateProjectComponent;
    }()
    /**
     * Update a component\'s description in a styleguide
     * @summary Update a styleguide component
     * @param {string} styleguideId Styleguide id
     * @param {string} componentId Component id
     * @param {ComponentUpdateBody} componentUpdateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComponentsApi
     */

  }, {
    key: "updateStyleguideComponent",
    value: function () {
      var _updateStyleguideComponent2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee30(styleguideId, componentId, componentUpdateBody, options) {
        var componentsApiFp, request, response;
        return regeneratorRuntime.wrap(function _callee30$(_context30) {
          while (1) {
            switch (_context30.prev = _context30.next) {
              case 0:
                componentsApiFp = ComponentsApiFp(this.configuration);
                _context30.next = 3;
                return componentsApiFp.updateStyleguideComponent(styleguideId, componentId, componentUpdateBody, options);

              case 3:
                request = _context30.sent;
                _context30.next = 6;
                return request(this.axios, this.basePath);

              case 6:
                response = _context30.sent;
                return _context30.abrupt("return", response);

              case 8:
              case "end":
                return _context30.stop();
            }
          }
        }, _callee30, this);
      }));

      function updateStyleguideComponent(_x65, _x66, _x67, _x68) {
        return _updateStyleguideComponent2.apply(this, arguments);
      }

      return updateStyleguideComponent;
    }()
  }]);

  return ComponentsApi;
}(_base.BaseAPI);

exports.ComponentsApi = ComponentsApi;