"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

require("core-js/modules/es.object.define-property.js");

require("core-js/modules/es.object.keys.js");

require("core-js/modules/es.symbol.js");

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptor.js");

require("core-js/modules/es.array.for-each.js");

require("core-js/modules/web.dom-collections.for-each.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

require("core-js/modules/es.object.define-properties.js");

require("core-js/modules/es.object.set-prototype-of.js");

require("core-js/modules/es.object.get-prototype-of.js");

require("core-js/modules/es.reflect.construct.js");

require("core-js/modules/es.object.create.js");

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.symbol.iterator.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SpacingApiFp = exports.SpacingApiAxiosParamCreator = exports.SpacingApi = void 0;

require("regenerator-runtime/runtime.js");

require("core-js/modules/es.regexp.exec.js");

require("core-js/modules/es.string.replace.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.object.to-string.js");

require("core-js/modules/es.string.iterator.js");

require("core-js/modules/web.dom-collections.iterator.js");

require("core-js/modules/web.url.js");

require("core-js/modules/es.array.map.js");

require("core-js/modules/es.promise.js");

var _axios = _interopRequireDefault(require("axios"));

var _common = require("../common");

var _base = require("../base");

var _models = require("../models");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/**
 * SpacingApi - axios parameter creator
 * @export
 */
var SpacingApiAxiosParamCreator = function SpacingApiAxiosParamCreator(configuration) {
  return {
    /**
     * List all spacing sections of the project
     * @summary Get spacing sections of the project
     * @param {string} projectId Project id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectSpacingSections: function () {
      var _getProjectSpacingSections = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(projectId, limit, offset) {
        var options,
            localVarPath,
            localVarUrlObj,
            baseOptions,
            localVarRequestOptions,
            localVarHeaderParameter,
            localVarQueryParameter,
            headersFromBaseOptions,
            _args = arguments;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                options = _args.length > 3 && _args[3] !== undefined ? _args[3] : {};
                // verify required parameter 'projectId' is not null or undefined
                (0, _common.assertParamExists)('getProjectSpacingSections', 'projectId', projectId);
                localVarPath = "/v1/projects/{project_id}/spacing_sections".replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

                localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);

                if (configuration) {
                  baseOptions = configuration.baseOptions;
                }

                localVarRequestOptions = _objectSpread(_objectSpread({
                  method: 'GET'
                }, baseOptions), options);
                localVarHeaderParameter = {};
                localVarQueryParameter = {}; // authentication OAuth2 required
                // oauth required

                _context.next = 10;
                return (0, _common.setOAuthToObject)(localVarHeaderParameter, "OAuth2", [], configuration);

              case 10:
                _context.next = 12;
                return (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);

              case 12:
                if (limit !== undefined) {
                  localVarQueryParameter['limit'] = limit;
                }

                if (offset !== undefined) {
                  localVarQueryParameter['offset'] = offset;
                }

                (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                return _context.abrupt("return", {
                  url: (0, _common.toPathString)(localVarUrlObj),
                  options: localVarRequestOptions
                });

              case 18:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function getProjectSpacingSections(_x, _x2, _x3) {
        return _getProjectSpacingSections.apply(this, arguments);
      }

      return getProjectSpacingSections;
    }(),

    /**
     * List all spacing tokens of the project
     * @summary Get spacing tokens of the project
     * @param {string} projectId Project id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {boolean} [includeLinkedStyleguides] Whether to include linked styleguides or not
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectSpacingTokens: function () {
      var _getProjectSpacingTokens = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(projectId, limit, offset, includeLinkedStyleguides) {
        var options,
            localVarPath,
            localVarUrlObj,
            baseOptions,
            localVarRequestOptions,
            localVarHeaderParameter,
            localVarQueryParameter,
            headersFromBaseOptions,
            _args2 = arguments;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                options = _args2.length > 4 && _args2[4] !== undefined ? _args2[4] : {};
                // verify required parameter 'projectId' is not null or undefined
                (0, _common.assertParamExists)('getProjectSpacingTokens', 'projectId', projectId);
                localVarPath = "/v1/projects/{project_id}/spacing_tokens".replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

                localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);

                if (configuration) {
                  baseOptions = configuration.baseOptions;
                }

                localVarRequestOptions = _objectSpread(_objectSpread({
                  method: 'GET'
                }, baseOptions), options);
                localVarHeaderParameter = {};
                localVarQueryParameter = {}; // authentication OAuth2 required
                // oauth required

                _context2.next = 10;
                return (0, _common.setOAuthToObject)(localVarHeaderParameter, "OAuth2", [], configuration);

              case 10:
                _context2.next = 12;
                return (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);

              case 12:
                if (limit !== undefined) {
                  localVarQueryParameter['limit'] = limit;
                }

                if (offset !== undefined) {
                  localVarQueryParameter['offset'] = offset;
                }

                if (includeLinkedStyleguides !== undefined) {
                  localVarQueryParameter['include_linked_styleguides'] = includeLinkedStyleguides;
                }

                (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                return _context2.abrupt("return", {
                  url: (0, _common.toPathString)(localVarUrlObj),
                  options: localVarRequestOptions
                });

              case 19:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      function getProjectSpacingTokens(_x4, _x5, _x6, _x7) {
        return _getProjectSpacingTokens.apply(this, arguments);
      }

      return getProjectSpacingTokens;
    }(),

    /**
     * List all spacing sections of the styleguide that user has access.  See [Styleguide docs](#getstyleguide) for more details about how `linked_project` and `linked_styleguide` parameters can be used to retrieve resources from styleguides that user is eligible to access. 
     * @summary Get spacing sections of the styleguide
     * @param {string} styleguideId Styleguide id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {string} [linkedProject] Reference project id
     * @param {string} [linkedStyleguide] Reference styleguide id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStyleguideSpacingSections: function () {
      var _getStyleguideSpacingSections = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(styleguideId, limit, offset, linkedProject, linkedStyleguide) {
        var options,
            localVarPath,
            localVarUrlObj,
            baseOptions,
            localVarRequestOptions,
            localVarHeaderParameter,
            localVarQueryParameter,
            headersFromBaseOptions,
            _args3 = arguments;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                options = _args3.length > 5 && _args3[5] !== undefined ? _args3[5] : {};
                // verify required parameter 'styleguideId' is not null or undefined
                (0, _common.assertParamExists)('getStyleguideSpacingSections', 'styleguideId', styleguideId);
                localVarPath = "/v1/styleguides/{styleguide_id}/spacing_sections".replace("{".concat("styleguide_id", "}"), encodeURIComponent(String(styleguideId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

                localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);

                if (configuration) {
                  baseOptions = configuration.baseOptions;
                }

                localVarRequestOptions = _objectSpread(_objectSpread({
                  method: 'GET'
                }, baseOptions), options);
                localVarHeaderParameter = {};
                localVarQueryParameter = {}; // authentication OAuth2 required
                // oauth required

                _context3.next = 10;
                return (0, _common.setOAuthToObject)(localVarHeaderParameter, "OAuth2", [], configuration);

              case 10:
                _context3.next = 12;
                return (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);

              case 12:
                if (limit !== undefined) {
                  localVarQueryParameter['limit'] = limit;
                }

                if (offset !== undefined) {
                  localVarQueryParameter['offset'] = offset;
                }

                if (linkedProject !== undefined) {
                  localVarQueryParameter['linked_project'] = linkedProject;
                }

                if (linkedStyleguide !== undefined) {
                  localVarQueryParameter['linked_styleguide'] = linkedStyleguide;
                }

                (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                return _context3.abrupt("return", {
                  url: (0, _common.toPathString)(localVarUrlObj),
                  options: localVarRequestOptions
                });

              case 20:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      function getStyleguideSpacingSections(_x8, _x9, _x10, _x11, _x12) {
        return _getStyleguideSpacingSections.apply(this, arguments);
      }

      return getStyleguideSpacingSections;
    }(),

    /**
     * List all spacing tokens of the styleguide that user has access.  See [Styleguide docs](#getstyleguide) for more details about how `linked_project` and `linked_styleguide` parameters can be used to retrieve resources from styleguides that user is eligible to access. 
     * @summary Get spacing tokens of the styleguide
     * @param {string} styleguideId Styleguide id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {string} [linkedProject] Reference project id
     * @param {string} [linkedStyleguide] Reference styleguide id
     * @param {boolean} [includeLinkedStyleguides] Whether to include linked styleguides or not
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStyleguideSpacingTokens: function () {
      var _getStyleguideSpacingTokens = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(styleguideId, limit, offset, linkedProject, linkedStyleguide, includeLinkedStyleguides) {
        var options,
            localVarPath,
            localVarUrlObj,
            baseOptions,
            localVarRequestOptions,
            localVarHeaderParameter,
            localVarQueryParameter,
            headersFromBaseOptions,
            _args4 = arguments;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                options = _args4.length > 6 && _args4[6] !== undefined ? _args4[6] : {};
                // verify required parameter 'styleguideId' is not null or undefined
                (0, _common.assertParamExists)('getStyleguideSpacingTokens', 'styleguideId', styleguideId);
                localVarPath = "/v1/styleguides/{styleguide_id}/spacing_tokens".replace("{".concat("styleguide_id", "}"), encodeURIComponent(String(styleguideId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

                localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);

                if (configuration) {
                  baseOptions = configuration.baseOptions;
                }

                localVarRequestOptions = _objectSpread(_objectSpread({
                  method: 'GET'
                }, baseOptions), options);
                localVarHeaderParameter = {};
                localVarQueryParameter = {}; // authentication OAuth2 required
                // oauth required

                _context4.next = 10;
                return (0, _common.setOAuthToObject)(localVarHeaderParameter, "OAuth2", [], configuration);

              case 10:
                _context4.next = 12;
                return (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);

              case 12:
                if (limit !== undefined) {
                  localVarQueryParameter['limit'] = limit;
                }

                if (offset !== undefined) {
                  localVarQueryParameter['offset'] = offset;
                }

                if (linkedProject !== undefined) {
                  localVarQueryParameter['linked_project'] = linkedProject;
                }

                if (linkedStyleguide !== undefined) {
                  localVarQueryParameter['linked_styleguide'] = linkedStyleguide;
                }

                if (includeLinkedStyleguides !== undefined) {
                  localVarQueryParameter['include_linked_styleguides'] = includeLinkedStyleguides;
                }

                (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                return _context4.abrupt("return", {
                  url: (0, _common.toPathString)(localVarUrlObj),
                  options: localVarRequestOptions
                });

              case 21:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      function getStyleguideSpacingTokens(_x13, _x14, _x15, _x16, _x17, _x18) {
        return _getStyleguideSpacingTokens.apply(this, arguments);
      }

      return getStyleguideSpacingTokens;
    }(),

    /**
     * Update a spacing token in the project\'s local styleguide
     * @summary Update project spacing token
     * @param {string} projectId Project id
     * @param {string} spacingTokenId Spacing token id
     * @param {SpacingTokenUpdateBody} spacingTokenUpdateBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProjectSpacingToken: function () {
      var _updateProjectSpacingToken = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(projectId, spacingTokenId, spacingTokenUpdateBody) {
        var options,
            localVarPath,
            localVarUrlObj,
            baseOptions,
            localVarRequestOptions,
            localVarHeaderParameter,
            localVarQueryParameter,
            headersFromBaseOptions,
            _args5 = arguments;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                options = _args5.length > 3 && _args5[3] !== undefined ? _args5[3] : {};
                // verify required parameter 'projectId' is not null or undefined
                (0, _common.assertParamExists)('updateProjectSpacingToken', 'projectId', projectId); // verify required parameter 'spacingTokenId' is not null or undefined

                (0, _common.assertParamExists)('updateProjectSpacingToken', 'spacingTokenId', spacingTokenId); // verify required parameter 'spacingTokenUpdateBody' is not null or undefined

                (0, _common.assertParamExists)('updateProjectSpacingToken', 'spacingTokenUpdateBody', spacingTokenUpdateBody);
                localVarPath = "/v1/projects/{project_id}/spacing_tokens/{spacing_token_id}".replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId))).replace("{".concat("spacing_token_id", "}"), encodeURIComponent(String(spacingTokenId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

                localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);

                if (configuration) {
                  baseOptions = configuration.baseOptions;
                }

                localVarRequestOptions = _objectSpread(_objectSpread({
                  method: 'PATCH'
                }, baseOptions), options);
                localVarHeaderParameter = {};
                localVarQueryParameter = {}; // authentication OAuth2 required
                // oauth required

                _context5.next = 12;
                return (0, _common.setOAuthToObject)(localVarHeaderParameter, "OAuth2", [], configuration);

              case 12:
                localVarHeaderParameter['Content-Type'] = 'application/json';
                (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                localVarRequestOptions.data = (0, _common.serializeDataIfNeeded)((0, _models.transformSpacingTokenUpdateBodyToJSON)(spacingTokenUpdateBody), localVarRequestOptions, configuration);
                return _context5.abrupt("return", {
                  url: (0, _common.toPathString)(localVarUrlObj),
                  options: localVarRequestOptions
                });

              case 18:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }));

      function updateProjectSpacingToken(_x19, _x20, _x21) {
        return _updateProjectSpacingToken.apply(this, arguments);
      }

      return updateProjectSpacingToken;
    }(),

    /**
     * Update a spacing token in the styleguide
     * @summary Update styleguide spacing token
     * @param {string} styleguideId Styleguide id
     * @param {string} spacingTokenId Spacing token id
     * @param {SpacingTokenUpdateBody} spacingTokenUpdateBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateStyleguideSpacingToken: function () {
      var _updateStyleguideSpacingToken = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(styleguideId, spacingTokenId, spacingTokenUpdateBody) {
        var options,
            localVarPath,
            localVarUrlObj,
            baseOptions,
            localVarRequestOptions,
            localVarHeaderParameter,
            localVarQueryParameter,
            headersFromBaseOptions,
            _args6 = arguments;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                options = _args6.length > 3 && _args6[3] !== undefined ? _args6[3] : {};
                // verify required parameter 'styleguideId' is not null or undefined
                (0, _common.assertParamExists)('updateStyleguideSpacingToken', 'styleguideId', styleguideId); // verify required parameter 'spacingTokenId' is not null or undefined

                (0, _common.assertParamExists)('updateStyleguideSpacingToken', 'spacingTokenId', spacingTokenId); // verify required parameter 'spacingTokenUpdateBody' is not null or undefined

                (0, _common.assertParamExists)('updateStyleguideSpacingToken', 'spacingTokenUpdateBody', spacingTokenUpdateBody);
                localVarPath = "/v1/styleguides/{styleguide_id}/spacing_tokens/{spacing_token_id}".replace("{".concat("styleguide_id", "}"), encodeURIComponent(String(styleguideId))).replace("{".concat("spacing_token_id", "}"), encodeURIComponent(String(spacingTokenId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.

                localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);

                if (configuration) {
                  baseOptions = configuration.baseOptions;
                }

                localVarRequestOptions = _objectSpread(_objectSpread({
                  method: 'PATCH'
                }, baseOptions), options);
                localVarHeaderParameter = {};
                localVarQueryParameter = {}; // authentication OAuth2 required
                // oauth required

                _context6.next = 12;
                return (0, _common.setOAuthToObject)(localVarHeaderParameter, "OAuth2", [], configuration);

              case 12:
                localVarHeaderParameter['Content-Type'] = 'application/json';
                (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
                headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                localVarRequestOptions.data = (0, _common.serializeDataIfNeeded)((0, _models.transformSpacingTokenUpdateBodyToJSON)(spacingTokenUpdateBody), localVarRequestOptions, configuration);
                return _context6.abrupt("return", {
                  url: (0, _common.toPathString)(localVarUrlObj),
                  options: localVarRequestOptions
                });

              case 18:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }));

      function updateStyleguideSpacingToken(_x22, _x23, _x24) {
        return _updateStyleguideSpacingToken.apply(this, arguments);
      }

      return updateStyleguideSpacingToken;
    }()
  };
};
/**
 * SpacingApi - functional programming interface
 * @export
 */


exports.SpacingApiAxiosParamCreator = SpacingApiAxiosParamCreator;

var SpacingApiFp = function SpacingApiFp(configuration) {
  var localVarAxiosParamCreator = SpacingApiAxiosParamCreator(configuration);
  return {
    /**
     * List all spacing sections of the project
     * @summary Get spacing sections of the project
     * @param {string} projectId Project id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectSpacingSections: function getProjectSpacingSections(projectId, limit, offset, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.next = 2;
                return localVarAxiosParamCreator.getProjectSpacingSections(projectId, limit, offset, options);

              case 2:
                localVarAxiosArgs = _context7.sent;
                return _context7.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7);
      }))();
    },

    /**
     * List all spacing tokens of the project
     * @summary Get spacing tokens of the project
     * @param {string} projectId Project id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {boolean} [includeLinkedStyleguides] Whether to include linked styleguides or not
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectSpacingTokens: function getProjectSpacingTokens(projectId, limit, offset, includeLinkedStyleguides, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.next = 2;
                return localVarAxiosParamCreator.getProjectSpacingTokens(projectId, limit, offset, includeLinkedStyleguides, options);

              case 2:
                localVarAxiosArgs = _context8.sent;
                return _context8.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8);
      }))();
    },

    /**
     * List all spacing sections of the styleguide that user has access.  See [Styleguide docs](#getstyleguide) for more details about how `linked_project` and `linked_styleguide` parameters can be used to retrieve resources from styleguides that user is eligible to access. 
     * @summary Get spacing sections of the styleguide
     * @param {string} styleguideId Styleguide id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {string} [linkedProject] Reference project id
     * @param {string} [linkedStyleguide] Reference styleguide id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStyleguideSpacingSections: function getStyleguideSpacingSections(styleguideId, limit, offset, linkedProject, linkedStyleguide, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                _context9.next = 2;
                return localVarAxiosParamCreator.getStyleguideSpacingSections(styleguideId, limit, offset, linkedProject, linkedStyleguide, options);

              case 2:
                localVarAxiosArgs = _context9.sent;
                return _context9.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9);
      }))();
    },

    /**
     * List all spacing tokens of the styleguide that user has access.  See [Styleguide docs](#getstyleguide) for more details about how `linked_project` and `linked_styleguide` parameters can be used to retrieve resources from styleguides that user is eligible to access. 
     * @summary Get spacing tokens of the styleguide
     * @param {string} styleguideId Styleguide id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {string} [linkedProject] Reference project id
     * @param {string} [linkedStyleguide] Reference styleguide id
     * @param {boolean} [includeLinkedStyleguides] Whether to include linked styleguides or not
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStyleguideSpacingTokens: function getStyleguideSpacingTokens(styleguideId, limit, offset, linkedProject, linkedStyleguide, includeLinkedStyleguides, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                _context10.next = 2;
                return localVarAxiosParamCreator.getStyleguideSpacingTokens(styleguideId, limit, offset, linkedProject, linkedStyleguide, includeLinkedStyleguides, options);

              case 2:
                localVarAxiosArgs = _context10.sent;
                return _context10.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10);
      }))();
    },

    /**
     * Update a spacing token in the project\'s local styleguide
     * @summary Update project spacing token
     * @param {string} projectId Project id
     * @param {string} spacingTokenId Spacing token id
     * @param {SpacingTokenUpdateBody} spacingTokenUpdateBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProjectSpacingToken: function updateProjectSpacingToken(projectId, spacingTokenId, spacingTokenUpdateBody, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                _context11.next = 2;
                return localVarAxiosParamCreator.updateProjectSpacingToken(projectId, spacingTokenId, spacingTokenUpdateBody, options);

              case 2:
                localVarAxiosArgs = _context11.sent;
                return _context11.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11);
      }))();
    },

    /**
     * Update a spacing token in the styleguide
     * @summary Update styleguide spacing token
     * @param {string} styleguideId Styleguide id
     * @param {string} spacingTokenId Spacing token id
     * @param {SpacingTokenUpdateBody} spacingTokenUpdateBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateStyleguideSpacingToken: function updateStyleguideSpacingToken(styleguideId, spacingTokenId, spacingTokenUpdateBody, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                _context12.next = 2;
                return localVarAxiosParamCreator.updateStyleguideSpacingToken(styleguideId, spacingTokenId, spacingTokenUpdateBody, options);

              case 2:
                localVarAxiosArgs = _context12.sent;
                return _context12.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12);
      }))();
    }
  };
};
/**
 * Search parameters for getProjectSpacingSections operation in SpacingApi.
 * @export
 * @interface SpacingApiGetProjectSpacingSectionsSearchParams
 */


exports.SpacingApiFp = SpacingApiFp;

/**
 * SpacingApi - object-oriented interface
 * @export
 * @class SpacingApi
 * @extends {BaseAPI}
 */
var SpacingApi = /*#__PURE__*/function (_BaseAPI) {
  _inherits(SpacingApi, _BaseAPI);

  var _super = _createSuper(SpacingApi);

  function SpacingApi() {
    _classCallCheck(this, SpacingApi);

    return _super.apply(this, arguments);
  }

  _createClass(SpacingApi, [{
    key: "getProjectSpacingSections",
    value:
    /**
     * List all spacing sections of the project
     * @summary Get spacing sections of the project
     * @param {string} projectId Project id
     * @param {SpacingApiGetProjectSpacingSectionsSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpacingApi
     */
    function () {
      var _getProjectSpacingSections2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(projectId) {
        var searchParams,
            options,
            spacingApiFp,
            request,
            response,
            _args13 = arguments;
        return regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                searchParams = _args13.length > 1 && _args13[1] !== undefined ? _args13[1] : {};
                options = _args13.length > 2 ? _args13[2] : undefined;
                spacingApiFp = SpacingApiFp(this.configuration);
                _context13.next = 5;
                return spacingApiFp.getProjectSpacingSections(projectId, searchParams.limit, searchParams.offset, options);

              case 5:
                request = _context13.sent;
                _context13.next = 8;
                return request(this.axios, this.basePath);

              case 8:
                response = _context13.sent;
                return _context13.abrupt("return", _objectSpread(_objectSpread({}, response), {}, {
                  data: response.data.map(_models.transformJSONToSpacingSection)
                }));

              case 10:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      function getProjectSpacingSections(_x25) {
        return _getProjectSpacingSections2.apply(this, arguments);
      }

      return getProjectSpacingSections;
    }()
    /**
     * List all spacing tokens of the project
     * @summary Get spacing tokens of the project
     * @param {string} projectId Project id
     * @param {SpacingApiGetProjectSpacingTokensSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpacingApi
     */

  }, {
    key: "getProjectSpacingTokens",
    value: function () {
      var _getProjectSpacingTokens2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(projectId) {
        var searchParams,
            options,
            spacingApiFp,
            request,
            response,
            _args14 = arguments;
        return regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                searchParams = _args14.length > 1 && _args14[1] !== undefined ? _args14[1] : {};
                options = _args14.length > 2 ? _args14[2] : undefined;
                spacingApiFp = SpacingApiFp(this.configuration);
                _context14.next = 5;
                return spacingApiFp.getProjectSpacingTokens(projectId, searchParams.limit, searchParams.offset, searchParams.includeLinkedStyleguides, options);

              case 5:
                request = _context14.sent;
                _context14.next = 8;
                return request(this.axios, this.basePath);

              case 8:
                response = _context14.sent;
                return _context14.abrupt("return", _objectSpread(_objectSpread({}, response), {}, {
                  data: response.data.map(_models.transformJSONToSpacingToken)
                }));

              case 10:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14, this);
      }));

      function getProjectSpacingTokens(_x26) {
        return _getProjectSpacingTokens2.apply(this, arguments);
      }

      return getProjectSpacingTokens;
    }()
    /**
     * List all spacing sections of the styleguide that user has access.  See [Styleguide docs](#getstyleguide) for more details about how `linked_project` and `linked_styleguide` parameters can be used to retrieve resources from styleguides that user is eligible to access. 
     * @summary Get spacing sections of the styleguide
     * @param {string} styleguideId Styleguide id
     * @param {SpacingApiGetStyleguideSpacingSectionsSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpacingApi
     */

  }, {
    key: "getStyleguideSpacingSections",
    value: function () {
      var _getStyleguideSpacingSections2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(styleguideId) {
        var searchParams,
            options,
            spacingApiFp,
            request,
            response,
            _args15 = arguments;
        return regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                searchParams = _args15.length > 1 && _args15[1] !== undefined ? _args15[1] : {};
                options = _args15.length > 2 ? _args15[2] : undefined;
                spacingApiFp = SpacingApiFp(this.configuration);
                _context15.next = 5;
                return spacingApiFp.getStyleguideSpacingSections(styleguideId, searchParams.limit, searchParams.offset, searchParams.linkedProject, searchParams.linkedStyleguide, options);

              case 5:
                request = _context15.sent;
                _context15.next = 8;
                return request(this.axios, this.basePath);

              case 8:
                response = _context15.sent;
                return _context15.abrupt("return", _objectSpread(_objectSpread({}, response), {}, {
                  data: response.data.map(_models.transformJSONToSpacingSection)
                }));

              case 10:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15, this);
      }));

      function getStyleguideSpacingSections(_x27) {
        return _getStyleguideSpacingSections2.apply(this, arguments);
      }

      return getStyleguideSpacingSections;
    }()
    /**
     * List all spacing tokens of the styleguide that user has access.  See [Styleguide docs](#getstyleguide) for more details about how `linked_project` and `linked_styleguide` parameters can be used to retrieve resources from styleguides that user is eligible to access. 
     * @summary Get spacing tokens of the styleguide
     * @param {string} styleguideId Styleguide id
     * @param {SpacingApiGetStyleguideSpacingTokensSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpacingApi
     */

  }, {
    key: "getStyleguideSpacingTokens",
    value: function () {
      var _getStyleguideSpacingTokens2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16(styleguideId) {
        var searchParams,
            options,
            spacingApiFp,
            request,
            response,
            _args16 = arguments;
        return regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                searchParams = _args16.length > 1 && _args16[1] !== undefined ? _args16[1] : {};
                options = _args16.length > 2 ? _args16[2] : undefined;
                spacingApiFp = SpacingApiFp(this.configuration);
                _context16.next = 5;
                return spacingApiFp.getStyleguideSpacingTokens(styleguideId, searchParams.limit, searchParams.offset, searchParams.linkedProject, searchParams.linkedStyleguide, searchParams.includeLinkedStyleguides, options);

              case 5:
                request = _context16.sent;
                _context16.next = 8;
                return request(this.axios, this.basePath);

              case 8:
                response = _context16.sent;
                return _context16.abrupt("return", _objectSpread(_objectSpread({}, response), {}, {
                  data: response.data.map(_models.transformJSONToSpacingToken)
                }));

              case 10:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16, this);
      }));

      function getStyleguideSpacingTokens(_x28) {
        return _getStyleguideSpacingTokens2.apply(this, arguments);
      }

      return getStyleguideSpacingTokens;
    }()
    /**
     * Update a spacing token in the project\'s local styleguide
     * @summary Update project spacing token
     * @param {string} projectId Project id
     * @param {string} spacingTokenId Spacing token id
     * @param {SpacingTokenUpdateBody} spacingTokenUpdateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpacingApi
     */

  }, {
    key: "updateProjectSpacingToken",
    value: function () {
      var _updateProjectSpacingToken2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17(projectId, spacingTokenId, spacingTokenUpdateBody, options) {
        var spacingApiFp, request, response;
        return regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                spacingApiFp = SpacingApiFp(this.configuration);
                _context17.next = 3;
                return spacingApiFp.updateProjectSpacingToken(projectId, spacingTokenId, spacingTokenUpdateBody, options);

              case 3:
                request = _context17.sent;
                _context17.next = 6;
                return request(this.axios, this.basePath);

              case 6:
                response = _context17.sent;
                return _context17.abrupt("return", response);

              case 8:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee17, this);
      }));

      function updateProjectSpacingToken(_x29, _x30, _x31, _x32) {
        return _updateProjectSpacingToken2.apply(this, arguments);
      }

      return updateProjectSpacingToken;
    }()
    /**
     * Update a spacing token in the styleguide
     * @summary Update styleguide spacing token
     * @param {string} styleguideId Styleguide id
     * @param {string} spacingTokenId Spacing token id
     * @param {SpacingTokenUpdateBody} spacingTokenUpdateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpacingApi
     */

  }, {
    key: "updateStyleguideSpacingToken",
    value: function () {
      var _updateStyleguideSpacingToken2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18(styleguideId, spacingTokenId, spacingTokenUpdateBody, options) {
        var spacingApiFp, request, response;
        return regeneratorRuntime.wrap(function _callee18$(_context18) {
          while (1) {
            switch (_context18.prev = _context18.next) {
              case 0:
                spacingApiFp = SpacingApiFp(this.configuration);
                _context18.next = 3;
                return spacingApiFp.updateStyleguideSpacingToken(styleguideId, spacingTokenId, spacingTokenUpdateBody, options);

              case 3:
                request = _context18.sent;
                _context18.next = 6;
                return request(this.axios, this.basePath);

              case 6:
                response = _context18.sent;
                return _context18.abrupt("return", response);

              case 8:
              case "end":
                return _context18.stop();
            }
          }
        }, _callee18, this);
      }));

      function updateStyleguideSpacingToken(_x33, _x34, _x35, _x36) {
        return _updateStyleguideSpacingToken2.apply(this, arguments);
      }

      return updateStyleguideSpacingToken;
    }()
  }]);

  return SpacingApi;
}(_base.BaseAPI);

exports.SpacingApi = SpacingApi;