/**
 * Zeplin API
 * Access your resources in Zeplin
 *
 * Contact: support@zeplin.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosResponse } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { EntityReference } from '../models';
import { OrganizationWebhook } from '../models';
import { OrganizationWebhookCreateBody } from '../models';
import { OrganizationWebhookUpdateBody } from '../models';
import { ProjectWebhook } from '../models';
import { ProjectWebhookCreateBody } from '../models';
import { ProjectWebhookUpdateBody } from '../models';
import { StyleguideWebhook } from '../models';
import { StyleguideWebhookCreateBody } from '../models';
import { StyleguideWebhookUpdateBody } from '../models';
import { UserWebhook } from '../models';
import { UserWebhookCreateBody } from '../models';
import { UserWebhookUpdateBody } from '../models';
import { WebhookHealthEnum } from '../models';
import { WebhookStatusEnum } from '../models';
/**
 * WebhooksApi - axios parameter creator
 * @export
 */
export declare const WebhooksApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Create a webhook for the organization  Wildcard `\"*\"` can be used for `project_ids` and `styleguide_ids` to receive events for all projects and styleguides that you own. You\'ll also automatically subscribe to the new ones you create in the future.  Note: Users that have authorized the app before webhooks release must re-authorize the app to create webhooks.
     * @summary Create organization webhooks
     * @param {string} organizationId Organization id
     * @param {OrganizationWebhookCreateBody} organizationWebhookCreateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrganizationWebhooks: (organizationId: string, organizationWebhookCreateBody: OrganizationWebhookCreateBody, options?: any) => Promise<RequestArgs>;
    /**
     * Create a webhook for the project  Note: Users that have authorized the app before webhooks release must re-authorize the app to create webhooks.
     * @summary Create project webhooks
     * @param {string} projectId Project id
     * @param {ProjectWebhookCreateBody} projectWebhookCreateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProjectWebhooks: (projectId: string, projectWebhookCreateBody: ProjectWebhookCreateBody, options?: any) => Promise<RequestArgs>;
    /**
     * Create a webhook for the styleguide  Note: Users that have authorized the app before webhooks release must re-authorize the app to create webhooks.
     * @summary Create styleguide webhooks
     * @param {string} styleguideId Styleguide id
     * @param {StyleguideWebhookCreateBody} styleguideWebhookCreateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createStyleguideWebhooks: (styleguideId: string, styleguideWebhookCreateBody: StyleguideWebhookCreateBody, options?: any) => Promise<RequestArgs>;
    /**
     * Create a webhook for the user  Wildcard `\"*\"` can be used for `project_ids` and `styleguide_ids` to receive events for all projects and styleguides that you own. You\'ll also automatically subscribe to the new ones you create in the future.  Note: Users that have authorized the app before webhooks release must re-authorize the app to create webhooks.
     * @summary Create user webhooks
     * @param {UserWebhookCreateBody} userWebhookCreateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserWebhooks: (userWebhookCreateBody: UserWebhookCreateBody, options?: any) => Promise<RequestArgs>;
    /**
     * Delete a webhook by id
     * @summary Delete a webhook of an organization
     * @param {string} organizationId Organization id
     * @param {string} webhookId Webhook id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrganizationWebhook: (organizationId: string, webhookId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Delete a webhook by id
     * @summary Delete a webhook of a project
     * @param {string} projectId Project id
     * @param {string} webhookId Webhook id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProjectWebhook: (projectId: string, webhookId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Delete a webhook by id
     * @summary Delete a webhook of a styleguide
     * @param {string} styleguideId Styleguide id
     * @param {string} webhookId Webhook id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteStyleguideWebhook: (styleguideId: string, webhookId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Delete a webhook by id
     * @summary Delete a webhook of a user
     * @param {string} webhookId Webhook id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserWebhook: (webhookId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get a webhook by id
     * @summary Get a webhook of organization
     * @param {string} organizationId Organization id
     * @param {string} webhookId Webhook id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationWebhook: (organizationId: string, webhookId: string, options?: any) => Promise<RequestArgs>;
    /**
     * List all webhooks of organization  Note: Zeplin apps can only list the webhook that are created by them. To list all webhooks created by any app or without app, personal access token is needed.
     * @summary Get organization webhooks
     * @param {string} organizationId Organization id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {WebhookStatusEnum} [status] Filter by webhook status
     * @param {WebhookHealthEnum} [urlHealth] Filter by health of webhook\&#39;s URL
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationWebhooks: (organizationId: string, limit?: number | undefined, offset?: number | undefined, status?: WebhookStatusEnum | undefined, urlHealth?: WebhookHealthEnum | undefined, options?: any) => Promise<RequestArgs>;
    /**
     * Get a webhook by id
     * @summary Get a webhook of project
     * @param {string} projectId Project id
     * @param {string} webhookId Webhook id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectWebhook: (projectId: string, webhookId: string, options?: any) => Promise<RequestArgs>;
    /**
     * List all webhooks of the project  Note: Zeplin apps can only list the webhook that are created by them. To list all webhooks created by any app or without app, personal access token is needed.
     * @summary Get project webhooks
     * @param {string} projectId Project id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {WebhookStatusEnum} [status] Filter by webhook status
     * @param {WebhookHealthEnum} [urlHealth] Filter by health of webhook\&#39;s URL
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectWebhooks: (projectId: string, limit?: number | undefined, offset?: number | undefined, status?: WebhookStatusEnum | undefined, urlHealth?: WebhookHealthEnum | undefined, options?: any) => Promise<RequestArgs>;
    /**
     * Get a webhook by id
     * @summary Get a webhook of styleguide
     * @param {string} styleguideId Styleguide id
     * @param {string} webhookId Webhook id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStyleguideWebhook: (styleguideId: string, webhookId: string, options?: any) => Promise<RequestArgs>;
    /**
     * List all webhooks of the styleguide  Note: Zeplin apps can only list the webhook that are created by them. To list all webhooks created by any app or without app, personal access token is needed.
     * @summary Get styleguide webhooks
     * @param {string} styleguideId Styleguide id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {WebhookStatusEnum} [status] Filter by webhook status
     * @param {WebhookHealthEnum} [urlHealth] Filter by health of webhook\&#39;s URL
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStyleguideWebhooks: (styleguideId: string, limit?: number | undefined, offset?: number | undefined, status?: WebhookStatusEnum | undefined, urlHealth?: WebhookHealthEnum | undefined, options?: any) => Promise<RequestArgs>;
    /**
     * Get a webhook by id
     * @summary Get a webhook of user
     * @param {string} webhookId Webhook id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserWebhook: (webhookId: string, options?: any) => Promise<RequestArgs>;
    /**
     * List all webhooks of the user  Note: Zeplin apps can only list the webhook that are created by them. To list all webhooks created by any app or without app, personal access token is needed.
     * @summary Get user webhooks
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {WebhookStatusEnum} [status] Filter by webhook status
     * @param {WebhookHealthEnum} [urlHealth] Filter by health of webhook\&#39;s URL
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserWebhooks: (limit?: number | undefined, offset?: number | undefined, status?: WebhookStatusEnum | undefined, urlHealth?: WebhookHealthEnum | undefined, options?: any) => Promise<RequestArgs>;
    /**
     * Update a webhook for the organization
     * @summary Update organization webhooks
     * @param {string} organizationId Organization id
     * @param {string} webhookId Webhook id
     * @param {OrganizationWebhookUpdateBody} organizationWebhookUpdateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrganizationWebhooks: (organizationId: string, webhookId: string, organizationWebhookUpdateBody: OrganizationWebhookUpdateBody, options?: any) => Promise<RequestArgs>;
    /**
     * Update a webhook for the project
     * @summary Update project webhooks
     * @param {string} projectId Project id
     * @param {string} webhookId Webhook id
     * @param {ProjectWebhookUpdateBody} projectWebhookUpdateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProjectWebhooks: (projectId: string, webhookId: string, projectWebhookUpdateBody: ProjectWebhookUpdateBody, options?: any) => Promise<RequestArgs>;
    /**
     * Update a webhook for the styleguide
     * @summary Update styleguide webhooks
     * @param {string} styleguideId Styleguide id
     * @param {string} webhookId Webhook id
     * @param {StyleguideWebhookUpdateBody} styleguideWebhookUpdateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateStyleguideWebhooks: (styleguideId: string, webhookId: string, styleguideWebhookUpdateBody: StyleguideWebhookUpdateBody, options?: any) => Promise<RequestArgs>;
    /**
     * Update a webhook for the user
     * @summary Update user webhooks
     * @param {string} webhookId Webhook id
     * @param {UserWebhookUpdateBody} userWebhookUpdateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserWebhooks: (webhookId: string, userWebhookUpdateBody: UserWebhookUpdateBody, options?: any) => Promise<RequestArgs>;
};
/**
 * WebhooksApi - functional programming interface
 * @export
 */
export declare const WebhooksApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Create a webhook for the organization  Wildcard `\"*\"` can be used for `project_ids` and `styleguide_ids` to receive events for all projects and styleguides that you own. You\'ll also automatically subscribe to the new ones you create in the future.  Note: Users that have authorized the app before webhooks release must re-authorize the app to create webhooks.
     * @summary Create organization webhooks
     * @param {string} organizationId Organization id
     * @param {OrganizationWebhookCreateBody} organizationWebhookCreateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrganizationWebhooks(organizationId: string, organizationWebhookCreateBody: OrganizationWebhookCreateBody, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * Create a webhook for the project  Note: Users that have authorized the app before webhooks release must re-authorize the app to create webhooks.
     * @summary Create project webhooks
     * @param {string} projectId Project id
     * @param {ProjectWebhookCreateBody} projectWebhookCreateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProjectWebhooks(projectId: string, projectWebhookCreateBody: ProjectWebhookCreateBody, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * Create a webhook for the styleguide  Note: Users that have authorized the app before webhooks release must re-authorize the app to create webhooks.
     * @summary Create styleguide webhooks
     * @param {string} styleguideId Styleguide id
     * @param {StyleguideWebhookCreateBody} styleguideWebhookCreateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createStyleguideWebhooks(styleguideId: string, styleguideWebhookCreateBody: StyleguideWebhookCreateBody, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * Create a webhook for the user  Wildcard `\"*\"` can be used for `project_ids` and `styleguide_ids` to receive events for all projects and styleguides that you own. You\'ll also automatically subscribe to the new ones you create in the future.  Note: Users that have authorized the app before webhooks release must re-authorize the app to create webhooks.
     * @summary Create user webhooks
     * @param {UserWebhookCreateBody} userWebhookCreateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserWebhooks(userWebhookCreateBody: UserWebhookCreateBody, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * Delete a webhook by id
     * @summary Delete a webhook of an organization
     * @param {string} organizationId Organization id
     * @param {string} webhookId Webhook id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrganizationWebhook(organizationId: string, webhookId: string, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * Delete a webhook by id
     * @summary Delete a webhook of a project
     * @param {string} projectId Project id
     * @param {string} webhookId Webhook id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProjectWebhook(projectId: string, webhookId: string, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * Delete a webhook by id
     * @summary Delete a webhook of a styleguide
     * @param {string} styleguideId Styleguide id
     * @param {string} webhookId Webhook id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteStyleguideWebhook(styleguideId: string, webhookId: string, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * Delete a webhook by id
     * @summary Delete a webhook of a user
     * @param {string} webhookId Webhook id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserWebhook(webhookId: string, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * Get a webhook by id
     * @summary Get a webhook of organization
     * @param {string} organizationId Organization id
     * @param {string} webhookId Webhook id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationWebhook(organizationId: string, webhookId: string, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * List all webhooks of organization  Note: Zeplin apps can only list the webhook that are created by them. To list all webhooks created by any app or without app, personal access token is needed.
     * @summary Get organization webhooks
     * @param {string} organizationId Organization id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {WebhookStatusEnum} [status] Filter by webhook status
     * @param {WebhookHealthEnum} [urlHealth] Filter by health of webhook\&#39;s URL
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationWebhooks(organizationId: string, limit?: number | undefined, offset?: number | undefined, status?: WebhookStatusEnum | undefined, urlHealth?: WebhookHealthEnum | undefined, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * Get a webhook by id
     * @summary Get a webhook of project
     * @param {string} projectId Project id
     * @param {string} webhookId Webhook id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectWebhook(projectId: string, webhookId: string, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * List all webhooks of the project  Note: Zeplin apps can only list the webhook that are created by them. To list all webhooks created by any app or without app, personal access token is needed.
     * @summary Get project webhooks
     * @param {string} projectId Project id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {WebhookStatusEnum} [status] Filter by webhook status
     * @param {WebhookHealthEnum} [urlHealth] Filter by health of webhook\&#39;s URL
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectWebhooks(projectId: string, limit?: number | undefined, offset?: number | undefined, status?: WebhookStatusEnum | undefined, urlHealth?: WebhookHealthEnum | undefined, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * Get a webhook by id
     * @summary Get a webhook of styleguide
     * @param {string} styleguideId Styleguide id
     * @param {string} webhookId Webhook id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStyleguideWebhook(styleguideId: string, webhookId: string, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * List all webhooks of the styleguide  Note: Zeplin apps can only list the webhook that are created by them. To list all webhooks created by any app or without app, personal access token is needed.
     * @summary Get styleguide webhooks
     * @param {string} styleguideId Styleguide id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {WebhookStatusEnum} [status] Filter by webhook status
     * @param {WebhookHealthEnum} [urlHealth] Filter by health of webhook\&#39;s URL
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStyleguideWebhooks(styleguideId: string, limit?: number | undefined, offset?: number | undefined, status?: WebhookStatusEnum | undefined, urlHealth?: WebhookHealthEnum | undefined, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * Get a webhook by id
     * @summary Get a webhook of user
     * @param {string} webhookId Webhook id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserWebhook(webhookId: string, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * List all webhooks of the user  Note: Zeplin apps can only list the webhook that are created by them. To list all webhooks created by any app or without app, personal access token is needed.
     * @summary Get user webhooks
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {WebhookStatusEnum} [status] Filter by webhook status
     * @param {WebhookHealthEnum} [urlHealth] Filter by health of webhook\&#39;s URL
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserWebhooks(limit?: number | undefined, offset?: number | undefined, status?: WebhookStatusEnum | undefined, urlHealth?: WebhookHealthEnum | undefined, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * Update a webhook for the organization
     * @summary Update organization webhooks
     * @param {string} organizationId Organization id
     * @param {string} webhookId Webhook id
     * @param {OrganizationWebhookUpdateBody} organizationWebhookUpdateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrganizationWebhooks(organizationId: string, webhookId: string, organizationWebhookUpdateBody: OrganizationWebhookUpdateBody, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * Update a webhook for the project
     * @summary Update project webhooks
     * @param {string} projectId Project id
     * @param {string} webhookId Webhook id
     * @param {ProjectWebhookUpdateBody} projectWebhookUpdateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProjectWebhooks(projectId: string, webhookId: string, projectWebhookUpdateBody: ProjectWebhookUpdateBody, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * Update a webhook for the styleguide
     * @summary Update styleguide webhooks
     * @param {string} styleguideId Styleguide id
     * @param {string} webhookId Webhook id
     * @param {StyleguideWebhookUpdateBody} styleguideWebhookUpdateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateStyleguideWebhooks(styleguideId: string, webhookId: string, styleguideWebhookUpdateBody: StyleguideWebhookUpdateBody, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * Update a webhook for the user
     * @summary Update user webhooks
     * @param {string} webhookId Webhook id
     * @param {UserWebhookUpdateBody} userWebhookUpdateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserWebhooks(webhookId: string, userWebhookUpdateBody: UserWebhookUpdateBody, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
};
/**
 * Search parameters for getOrganizationWebhooks operation in WebhooksApi.
 * @export
 * @interface WebhooksApiGetOrganizationWebhooksSearchParams
 */
export interface WebhooksApiGetOrganizationWebhooksSearchParams {
    /**
     * Pagination limit
     * @type {number}
     * @memberof WebhooksApiGetOrganizationWebhooksSearchParams
     */
    readonly limit?: number;
    /**
     * Pagination offset
     * @type {number}
     * @memberof WebhooksApiGetOrganizationWebhooksSearchParams
     */
    readonly offset?: number;
    /**
     * Filter by webhook status
     * @type {WebhookStatusEnum}
     * @memberof WebhooksApiGetOrganizationWebhooksSearchParams
     */
    readonly status?: WebhookStatusEnum;
    /**
     * Filter by health of webhook\&#39;s URL
     * @type {WebhookHealthEnum}
     * @memberof WebhooksApiGetOrganizationWebhooksSearchParams
     */
    readonly urlHealth?: WebhookHealthEnum;
}
/**
 * Search parameters for getProjectWebhooks operation in WebhooksApi.
 * @export
 * @interface WebhooksApiGetProjectWebhooksSearchParams
 */
export interface WebhooksApiGetProjectWebhooksSearchParams {
    /**
     * Pagination limit
     * @type {number}
     * @memberof WebhooksApiGetProjectWebhooksSearchParams
     */
    readonly limit?: number;
    /**
     * Pagination offset
     * @type {number}
     * @memberof WebhooksApiGetProjectWebhooksSearchParams
     */
    readonly offset?: number;
    /**
     * Filter by webhook status
     * @type {WebhookStatusEnum}
     * @memberof WebhooksApiGetProjectWebhooksSearchParams
     */
    readonly status?: WebhookStatusEnum;
    /**
     * Filter by health of webhook\&#39;s URL
     * @type {WebhookHealthEnum}
     * @memberof WebhooksApiGetProjectWebhooksSearchParams
     */
    readonly urlHealth?: WebhookHealthEnum;
}
/**
 * Search parameters for getStyleguideWebhooks operation in WebhooksApi.
 * @export
 * @interface WebhooksApiGetStyleguideWebhooksSearchParams
 */
export interface WebhooksApiGetStyleguideWebhooksSearchParams {
    /**
     * Pagination limit
     * @type {number}
     * @memberof WebhooksApiGetStyleguideWebhooksSearchParams
     */
    readonly limit?: number;
    /**
     * Pagination offset
     * @type {number}
     * @memberof WebhooksApiGetStyleguideWebhooksSearchParams
     */
    readonly offset?: number;
    /**
     * Filter by webhook status
     * @type {WebhookStatusEnum}
     * @memberof WebhooksApiGetStyleguideWebhooksSearchParams
     */
    readonly status?: WebhookStatusEnum;
    /**
     * Filter by health of webhook\&#39;s URL
     * @type {WebhookHealthEnum}
     * @memberof WebhooksApiGetStyleguideWebhooksSearchParams
     */
    readonly urlHealth?: WebhookHealthEnum;
}
/**
 * Search parameters for getUserWebhooks operation in WebhooksApi.
 * @export
 * @interface WebhooksApiGetUserWebhooksSearchParams
 */
export interface WebhooksApiGetUserWebhooksSearchParams {
    /**
     * Pagination limit
     * @type {number}
     * @memberof WebhooksApiGetUserWebhooksSearchParams
     */
    readonly limit?: number;
    /**
     * Pagination offset
     * @type {number}
     * @memberof WebhooksApiGetUserWebhooksSearchParams
     */
    readonly offset?: number;
    /**
     * Filter by webhook status
     * @type {WebhookStatusEnum}
     * @memberof WebhooksApiGetUserWebhooksSearchParams
     */
    readonly status?: WebhookStatusEnum;
    /**
     * Filter by health of webhook\&#39;s URL
     * @type {WebhookHealthEnum}
     * @memberof WebhooksApiGetUserWebhooksSearchParams
     */
    readonly urlHealth?: WebhookHealthEnum;
}
/**
 * WebhooksApi - object-oriented interface
 * @export
 * @class WebhooksApi
 * @extends {BaseAPI}
 */
export declare class WebhooksApi extends BaseAPI {
    /**
     * Create a webhook for the organization  Wildcard `\"*\"` can be used for `project_ids` and `styleguide_ids` to receive events for all projects and styleguides that you own. You\'ll also automatically subscribe to the new ones you create in the future.  Note: Users that have authorized the app before webhooks release must re-authorize the app to create webhooks.
     * @summary Create organization webhooks
     * @param {string} organizationId Organization id
     * @param {OrganizationWebhookCreateBody} organizationWebhookCreateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    createOrganizationWebhooks(organizationId: string, organizationWebhookCreateBody: OrganizationWebhookCreateBody, options?: any): Promise<AxiosResponse<EntityReference>>;
    /**
     * Create a webhook for the project  Note: Users that have authorized the app before webhooks release must re-authorize the app to create webhooks.
     * @summary Create project webhooks
     * @param {string} projectId Project id
     * @param {ProjectWebhookCreateBody} projectWebhookCreateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    createProjectWebhooks(projectId: string, projectWebhookCreateBody: ProjectWebhookCreateBody, options?: any): Promise<AxiosResponse<EntityReference>>;
    /**
     * Create a webhook for the styleguide  Note: Users that have authorized the app before webhooks release must re-authorize the app to create webhooks.
     * @summary Create styleguide webhooks
     * @param {string} styleguideId Styleguide id
     * @param {StyleguideWebhookCreateBody} styleguideWebhookCreateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    createStyleguideWebhooks(styleguideId: string, styleguideWebhookCreateBody: StyleguideWebhookCreateBody, options?: any): Promise<AxiosResponse<EntityReference>>;
    /**
     * Create a webhook for the user  Wildcard `\"*\"` can be used for `project_ids` and `styleguide_ids` to receive events for all projects and styleguides that you own. You\'ll also automatically subscribe to the new ones you create in the future.  Note: Users that have authorized the app before webhooks release must re-authorize the app to create webhooks.
     * @summary Create user webhooks
     * @param {UserWebhookCreateBody} userWebhookCreateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    createUserWebhooks(userWebhookCreateBody: UserWebhookCreateBody, options?: any): Promise<AxiosResponse<EntityReference>>;
    /**
     * Delete a webhook by id
     * @summary Delete a webhook of an organization
     * @param {string} organizationId Organization id
     * @param {string} webhookId Webhook id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    deleteOrganizationWebhook(organizationId: string, webhookId: string, options?: any): Promise<AxiosResponse<void>>;
    /**
     * Delete a webhook by id
     * @summary Delete a webhook of a project
     * @param {string} projectId Project id
     * @param {string} webhookId Webhook id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    deleteProjectWebhook(projectId: string, webhookId: string, options?: any): Promise<AxiosResponse<void>>;
    /**
     * Delete a webhook by id
     * @summary Delete a webhook of a styleguide
     * @param {string} styleguideId Styleguide id
     * @param {string} webhookId Webhook id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    deleteStyleguideWebhook(styleguideId: string, webhookId: string, options?: any): Promise<AxiosResponse<void>>;
    /**
     * Delete a webhook by id
     * @summary Delete a webhook of a user
     * @param {string} webhookId Webhook id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    deleteUserWebhook(webhookId: string, options?: any): Promise<AxiosResponse<void>>;
    /**
     * Get a webhook by id
     * @summary Get a webhook of organization
     * @param {string} organizationId Organization id
     * @param {string} webhookId Webhook id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    getOrganizationWebhook(organizationId: string, webhookId: string, options?: any): Promise<AxiosResponse<OrganizationWebhook>>;
    /**
     * List all webhooks of organization  Note: Zeplin apps can only list the webhook that are created by them. To list all webhooks created by any app or without app, personal access token is needed.
     * @summary Get organization webhooks
     * @param {string} organizationId Organization id
     * @param {WebhooksApiGetOrganizationWebhooksSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    getOrganizationWebhooks(organizationId: string, searchParams?: WebhooksApiGetOrganizationWebhooksSearchParams, options?: any): Promise<AxiosResponse<Array<OrganizationWebhook>>>;
    /**
     * Get a webhook by id
     * @summary Get a webhook of project
     * @param {string} projectId Project id
     * @param {string} webhookId Webhook id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    getProjectWebhook(projectId: string, webhookId: string, options?: any): Promise<AxiosResponse<ProjectWebhook>>;
    /**
     * List all webhooks of the project  Note: Zeplin apps can only list the webhook that are created by them. To list all webhooks created by any app or without app, personal access token is needed.
     * @summary Get project webhooks
     * @param {string} projectId Project id
     * @param {WebhooksApiGetProjectWebhooksSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    getProjectWebhooks(projectId: string, searchParams?: WebhooksApiGetProjectWebhooksSearchParams, options?: any): Promise<AxiosResponse<Array<ProjectWebhook>>>;
    /**
     * Get a webhook by id
     * @summary Get a webhook of styleguide
     * @param {string} styleguideId Styleguide id
     * @param {string} webhookId Webhook id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    getStyleguideWebhook(styleguideId: string, webhookId: string, options?: any): Promise<AxiosResponse<StyleguideWebhook>>;
    /**
     * List all webhooks of the styleguide  Note: Zeplin apps can only list the webhook that are created by them. To list all webhooks created by any app or without app, personal access token is needed.
     * @summary Get styleguide webhooks
     * @param {string} styleguideId Styleguide id
     * @param {WebhooksApiGetStyleguideWebhooksSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    getStyleguideWebhooks(styleguideId: string, searchParams?: WebhooksApiGetStyleguideWebhooksSearchParams, options?: any): Promise<AxiosResponse<Array<StyleguideWebhook>>>;
    /**
     * Get a webhook by id
     * @summary Get a webhook of user
     * @param {string} webhookId Webhook id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    getUserWebhook(webhookId: string, options?: any): Promise<AxiosResponse<UserWebhook>>;
    /**
     * List all webhooks of the user  Note: Zeplin apps can only list the webhook that are created by them. To list all webhooks created by any app or without app, personal access token is needed.
     * @summary Get user webhooks
     * @param {WebhooksApiGetUserWebhooksSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    getUserWebhooks(searchParams?: WebhooksApiGetUserWebhooksSearchParams, options?: any): Promise<AxiosResponse<Array<UserWebhook>>>;
    /**
     * Update a webhook for the organization
     * @summary Update organization webhooks
     * @param {string} organizationId Organization id
     * @param {string} webhookId Webhook id
     * @param {OrganizationWebhookUpdateBody} organizationWebhookUpdateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    updateOrganizationWebhooks(organizationId: string, webhookId: string, organizationWebhookUpdateBody: OrganizationWebhookUpdateBody, options?: any): Promise<AxiosResponse<void>>;
    /**
     * Update a webhook for the project
     * @summary Update project webhooks
     * @param {string} projectId Project id
     * @param {string} webhookId Webhook id
     * @param {ProjectWebhookUpdateBody} projectWebhookUpdateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    updateProjectWebhooks(projectId: string, webhookId: string, projectWebhookUpdateBody: ProjectWebhookUpdateBody, options?: any): Promise<AxiosResponse<void>>;
    /**
     * Update a webhook for the styleguide
     * @summary Update styleguide webhooks
     * @param {string} styleguideId Styleguide id
     * @param {string} webhookId Webhook id
     * @param {StyleguideWebhookUpdateBody} styleguideWebhookUpdateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    updateStyleguideWebhooks(styleguideId: string, webhookId: string, styleguideWebhookUpdateBody: StyleguideWebhookUpdateBody, options?: any): Promise<AxiosResponse<void>>;
    /**
     * Update a webhook for the user
     * @summary Update user webhooks
     * @param {string} webhookId Webhook id
     * @param {UserWebhookUpdateBody} userWebhookUpdateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    updateUserWebhooks(webhookId: string, userWebhookUpdateBody: UserWebhookUpdateBody, options?: any): Promise<AxiosResponse<void>>;
}
