/**
 * Zeplin API
 * Access your resources in Zeplin
 *
 * Contact: support@zeplin.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosResponse } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { FlowBoard } from '../models';
import { FlowBoardConnector } from '../models';
import { FlowBoardGroup } from '../models';
import { FlowBoardNode } from '../models';
/**
 * FlowsApi - axios parameter creator
 * @export
 */
export declare const FlowsApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Get flow board details related to a project
     * @summary Get a single project flow board
     * @param {string} projectId Project id
     * @param {string} flowBoardId Flow Board id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectFlowBoard: (projectId: string, flowBoardId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get details of the project flow board connector
     * @summary Get a single project flow board connector
     * @param {string} projectId Project id
     * @param {string} flowBoardId Flow Board id
     * @param {string} connectorId Board connector id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectFlowBoardConnector: (projectId: string, flowBoardId: string, connectorId: string, options?: any) => Promise<RequestArgs>;
    /**
     * List all connectors of the flow board in a project
     * @summary Get project flow board connectors
     * @param {string} projectId Project id
     * @param {string} flowBoardId Flow Board id
     * @param {string} [startingNodeId] Starting node id
     * @param {string} [endingNodeId] Ending node id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectFlowBoardConnectors: (projectId: string, flowBoardId: string, startingNodeId?: string | undefined, endingNodeId?: string | undefined, limit?: number | undefined, offset?: number | undefined, options?: any) => Promise<RequestArgs>;
    /**
     * List all flow board groups in a project.
     * @summary Get project flow board groups
     * @param {string} projectId Project id
     * @param {string} flowBoardId Flow Board id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectFlowBoardGroups: (projectId: string, flowBoardId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get details of the project flow board node
     * @summary Get a single project flow board node
     * @param {string} projectId Project id
     * @param {string} flowBoardId Flow Board id
     * @param {string} nodeId Board node id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectFlowBoardNode: (projectId: string, flowBoardId: string, nodeId: string, options?: any) => Promise<RequestArgs>;
    /**
     * List all nodes of the flow board in a project
     * @summary Get project flow board nodes
     * @param {string} projectId Project id
     * @param {string} flowBoardId Flow Board id
     * @param {string} [groupId] Group id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectFlowBoardNodes: (projectId: string, flowBoardId: string, groupId?: string | undefined, limit?: number | undefined, offset?: number | undefined, options?: any) => Promise<RequestArgs>;
    /**
     * List all flow boards in a project.
     * @summary Get project flow boards
     * @param {string} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectFlowBoards: (projectId: string, options?: any) => Promise<RequestArgs>;
};
/**
 * FlowsApi - functional programming interface
 * @export
 */
export declare const FlowsApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Get flow board details related to a project
     * @summary Get a single project flow board
     * @param {string} projectId Project id
     * @param {string} flowBoardId Flow Board id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectFlowBoard(projectId: string, flowBoardId: string, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * Get details of the project flow board connector
     * @summary Get a single project flow board connector
     * @param {string} projectId Project id
     * @param {string} flowBoardId Flow Board id
     * @param {string} connectorId Board connector id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectFlowBoardConnector(projectId: string, flowBoardId: string, connectorId: string, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * List all connectors of the flow board in a project
     * @summary Get project flow board connectors
     * @param {string} projectId Project id
     * @param {string} flowBoardId Flow Board id
     * @param {string} [startingNodeId] Starting node id
     * @param {string} [endingNodeId] Ending node id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectFlowBoardConnectors(projectId: string, flowBoardId: string, startingNodeId?: string | undefined, endingNodeId?: string | undefined, limit?: number | undefined, offset?: number | undefined, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * List all flow board groups in a project.
     * @summary Get project flow board groups
     * @param {string} projectId Project id
     * @param {string} flowBoardId Flow Board id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectFlowBoardGroups(projectId: string, flowBoardId: string, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * Get details of the project flow board node
     * @summary Get a single project flow board node
     * @param {string} projectId Project id
     * @param {string} flowBoardId Flow Board id
     * @param {string} nodeId Board node id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectFlowBoardNode(projectId: string, flowBoardId: string, nodeId: string, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * List all nodes of the flow board in a project
     * @summary Get project flow board nodes
     * @param {string} projectId Project id
     * @param {string} flowBoardId Flow Board id
     * @param {string} [groupId] Group id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectFlowBoardNodes(projectId: string, flowBoardId: string, groupId?: string | undefined, limit?: number | undefined, offset?: number | undefined, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * List all flow boards in a project.
     * @summary Get project flow boards
     * @param {string} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectFlowBoards(projectId: string, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
};
/**
 * Search parameters for getProjectFlowBoardConnectors operation in FlowsApi.
 * @export
 * @interface FlowsApiGetProjectFlowBoardConnectorsSearchParams
 */
export interface FlowsApiGetProjectFlowBoardConnectorsSearchParams {
    /**
     * Starting node id
     * @type {string}
     * @memberof FlowsApiGetProjectFlowBoardConnectorsSearchParams
     */
    readonly startingNodeId?: string;
    /**
     * Ending node id
     * @type {string}
     * @memberof FlowsApiGetProjectFlowBoardConnectorsSearchParams
     */
    readonly endingNodeId?: string;
    /**
     * Pagination limit
     * @type {number}
     * @memberof FlowsApiGetProjectFlowBoardConnectorsSearchParams
     */
    readonly limit?: number;
    /**
     * Pagination offset
     * @type {number}
     * @memberof FlowsApiGetProjectFlowBoardConnectorsSearchParams
     */
    readonly offset?: number;
}
/**
 * Search parameters for getProjectFlowBoardNodes operation in FlowsApi.
 * @export
 * @interface FlowsApiGetProjectFlowBoardNodesSearchParams
 */
export interface FlowsApiGetProjectFlowBoardNodesSearchParams {
    /**
     * Group id
     * @type {string}
     * @memberof FlowsApiGetProjectFlowBoardNodesSearchParams
     */
    readonly groupId?: string;
    /**
     * Pagination limit
     * @type {number}
     * @memberof FlowsApiGetProjectFlowBoardNodesSearchParams
     */
    readonly limit?: number;
    /**
     * Pagination offset
     * @type {number}
     * @memberof FlowsApiGetProjectFlowBoardNodesSearchParams
     */
    readonly offset?: number;
}
/**
 * FlowsApi - object-oriented interface
 * @export
 * @class FlowsApi
 * @extends {BaseAPI}
 */
export declare class FlowsApi extends BaseAPI {
    /**
     * Get flow board details related to a project
     * @summary Get a single project flow board
     * @param {string} projectId Project id
     * @param {string} flowBoardId Flow Board id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlowsApi
     */
    getProjectFlowBoard(projectId: string, flowBoardId: string, options?: any): Promise<AxiosResponse<FlowBoard>>;
    /**
     * Get details of the project flow board connector
     * @summary Get a single project flow board connector
     * @param {string} projectId Project id
     * @param {string} flowBoardId Flow Board id
     * @param {string} connectorId Board connector id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlowsApi
     */
    getProjectFlowBoardConnector(projectId: string, flowBoardId: string, connectorId: string, options?: any): Promise<AxiosResponse<FlowBoardConnector>>;
    /**
     * List all connectors of the flow board in a project
     * @summary Get project flow board connectors
     * @param {string} projectId Project id
     * @param {string} flowBoardId Flow Board id
     * @param {FlowsApiGetProjectFlowBoardConnectorsSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlowsApi
     */
    getProjectFlowBoardConnectors(projectId: string, flowBoardId: string, searchParams?: FlowsApiGetProjectFlowBoardConnectorsSearchParams, options?: any): Promise<AxiosResponse<Array<FlowBoardConnector>>>;
    /**
     * List all flow board groups in a project.
     * @summary Get project flow board groups
     * @param {string} projectId Project id
     * @param {string} flowBoardId Flow Board id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlowsApi
     */
    getProjectFlowBoardGroups(projectId: string, flowBoardId: string, options?: any): Promise<AxiosResponse<Array<FlowBoardGroup>>>;
    /**
     * Get details of the project flow board node
     * @summary Get a single project flow board node
     * @param {string} projectId Project id
     * @param {string} flowBoardId Flow Board id
     * @param {string} nodeId Board node id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlowsApi
     */
    getProjectFlowBoardNode(projectId: string, flowBoardId: string, nodeId: string, options?: any): Promise<AxiosResponse<FlowBoardNode>>;
    /**
     * List all nodes of the flow board in a project
     * @summary Get project flow board nodes
     * @param {string} projectId Project id
     * @param {string} flowBoardId Flow Board id
     * @param {FlowsApiGetProjectFlowBoardNodesSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlowsApi
     */
    getProjectFlowBoardNodes(projectId: string, flowBoardId: string, searchParams?: FlowsApiGetProjectFlowBoardNodesSearchParams, options?: any): Promise<AxiosResponse<Array<FlowBoardNode>>>;
    /**
     * List all flow boards in a project.
     * @summary Get project flow boards
     * @param {string} projectId Project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlowsApi
     */
    getProjectFlowBoards(projectId: string, options?: any): Promise<AxiosResponse<Array<FlowBoard>>>;
}
