/**
 * Zeplin API
 * Access your resources in Zeplin
 *
 * Contact: support@zeplin.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosResponse } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { Component } from '../models';
import { ComponentSection } from '../models';
import { ComponentUpdateBody } from '../models';
import { ComponentVersion } from '../models';
/**
 * ComponentsApi - axios parameter creator
 * @export
 */
export declare const ComponentsApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Get a project component by id
     * @summary Get a single project component
     * @param {string} projectId Project id
     * @param {string} componentId Component id
     * @param {boolean} [includeLatestVersion] Whether to include the latest version data in the Component object
     * @param {boolean} [includeLinkedStyleguides] Whether to include linked styleguides or not
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectComponent: (projectId: string, componentId: string, includeLatestVersion?: boolean | undefined, includeLinkedStyleguides?: boolean | undefined, options?: any) => Promise<RequestArgs>;
    /**
     * Get latest version of the component in a project
     * @summary Get latest project component version
     * @param {string} projectId Project id
     * @param {string} componentId Component id
     * @param {boolean} [includeLinkedStyleguides] Whether to include linked styleguides or not
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectComponentLatestVersion: (projectId: string, componentId: string, includeLinkedStyleguides?: boolean | undefined, options?: any) => Promise<RequestArgs>;
    /**
     * List all component sections of the project
     * @summary Get project component sections
     * @param {string} projectId Project id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectComponentSections: (projectId: string, limit?: number | undefined, offset?: number | undefined, options?: any) => Promise<RequestArgs>;
    /**
     * List all components of a project
     * @summary Get project components
     * @param {string} projectId Project id
     * @param {string} [sectionId] Filter by section id
     * @param {'section' | 'created'} [sort] Sort components by their &#x60;section&#x60; or their &#x60;created&#x60; date
     * @param {boolean} [includeLatestVersion] Whether to include the latest version data in the Component object
     * @param {boolean} [includeLinkedStyleguides] Whether to include linked styleguides or not
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectComponents: (projectId: string, sectionId?: string | undefined, sort?: "created" | "section" | undefined, includeLatestVersion?: boolean | undefined, includeLinkedStyleguides?: boolean | undefined, limit?: number | undefined, offset?: number | undefined, options?: any) => Promise<RequestArgs>;
    /**
     * Returns the component in a styleguide that user has access.  See [Styleguide docs](#getstyleguide) for more details about how `linked_project` and `linked_styleguide` parameters can be used to retrieve resources from styleguides that user is eligible to access.
     * @summary Get a single styleguide component
     * @param {string} styleguideId Styleguide id
     * @param {string} componentId Component id
     * @param {string} [linkedProject] Reference project id
     * @param {string} [linkedStyleguide] Reference styleguide id
     * @param {boolean} [includeLatestVersion] Whether to include the latest version data in the Component object
     * @param {boolean} [includeLinkedStyleguides] Whether to include linked styleguides or not
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStyleguideComponent: (styleguideId: string, componentId: string, linkedProject?: string | undefined, linkedStyleguide?: string | undefined, includeLatestVersion?: boolean | undefined, includeLinkedStyleguides?: boolean | undefined, options?: any) => Promise<RequestArgs>;
    /**
     * Returns the latest version of the component in a styleguide that user has access.  See [Styleguide docs](#getstyleguide) for more details about how `linked_project` and `linked_styleguide` parameters can be used to retrieve resources from styleguides that user is eligible to access.
     * @summary Get latest styleguide component version
     * @param {string} styleguideId Styleguide id
     * @param {string} componentId Component id
     * @param {string} [linkedProject] Reference project id
     * @param {string} [linkedStyleguide] Reference styleguide id
     * @param {boolean} [includeLinkedStyleguides] Whether to include linked styleguides or not
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStyleguideComponentLatestVersion: (styleguideId: string, componentId: string, linkedProject?: string | undefined, linkedStyleguide?: string | undefined, includeLinkedStyleguides?: boolean | undefined, options?: any) => Promise<RequestArgs>;
    /**
     * Returns the component sections of a styleguide that user has access.  See [Styleguide docs](#getstyleguide) for more details about how `linked_project` and `linked_styleguide` parameters can be used to retrieve resources from styleguides that user is eligible to access.
     * @summary Get styleguide component sections
     * @param {string} styleguideId Styleguide id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {string} [linkedProject] Reference project id
     * @param {string} [linkedStyleguide] Reference styleguide id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStyleguideComponentSections: (styleguideId: string, limit?: number | undefined, offset?: number | undefined, linkedProject?: string | undefined, linkedStyleguide?: string | undefined, options?: any) => Promise<RequestArgs>;
    /**
     * Returns components in a styleguide that user has access.  See [Styleguide docs](#getstyleguide) for more details about how `linked_project` and `linked_styleguide` parameters can be used to retrieve resources from styleguides that user is eligible to access.
     * @summary Get styleguide components
     * @param {string} styleguideId Styleguide id
     * @param {string} [sectionId] Filter by section id
     * @param {'section' | 'created'} [sort] Sort components by their &#x60;section&#x60; or their &#x60;created&#x60; date
     * @param {string} [linkedProject] Reference project id
     * @param {string} [linkedStyleguide] Reference styleguide id
     * @param {boolean} [includeLinkedStyleguides] Whether to include linked styleguides or not
     * @param {boolean} [includeLatestVersion] Whether to include the latest version data in the Component object
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStyleguideComponents: (styleguideId: string, sectionId?: string | undefined, sort?: "created" | "section" | undefined, linkedProject?: string | undefined, linkedStyleguide?: string | undefined, includeLinkedStyleguides?: boolean | undefined, includeLatestVersion?: boolean | undefined, limit?: number | undefined, offset?: number | undefined, options?: any) => Promise<RequestArgs>;
    /**
     * Update a component\'s description in a project
     * @summary Update a project component
     * @param {string} projectId Project id
     * @param {string} componentId Component id
     * @param {ComponentUpdateBody} componentUpdateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProjectComponent: (projectId: string, componentId: string, componentUpdateBody: ComponentUpdateBody, options?: any) => Promise<RequestArgs>;
    /**
     * Update a component\'s description in a styleguide
     * @summary Update a styleguide component
     * @param {string} styleguideId Styleguide id
     * @param {string} componentId Component id
     * @param {ComponentUpdateBody} componentUpdateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateStyleguideComponent: (styleguideId: string, componentId: string, componentUpdateBody: ComponentUpdateBody, options?: any) => Promise<RequestArgs>;
};
/**
 * ComponentsApi - functional programming interface
 * @export
 */
export declare const ComponentsApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Get a project component by id
     * @summary Get a single project component
     * @param {string} projectId Project id
     * @param {string} componentId Component id
     * @param {boolean} [includeLatestVersion] Whether to include the latest version data in the Component object
     * @param {boolean} [includeLinkedStyleguides] Whether to include linked styleguides or not
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectComponent(projectId: string, componentId: string, includeLatestVersion?: boolean | undefined, includeLinkedStyleguides?: boolean | undefined, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * Get latest version of the component in a project
     * @summary Get latest project component version
     * @param {string} projectId Project id
     * @param {string} componentId Component id
     * @param {boolean} [includeLinkedStyleguides] Whether to include linked styleguides or not
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectComponentLatestVersion(projectId: string, componentId: string, includeLinkedStyleguides?: boolean | undefined, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * List all component sections of the project
     * @summary Get project component sections
     * @param {string} projectId Project id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectComponentSections(projectId: string, limit?: number | undefined, offset?: number | undefined, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * List all components of a project
     * @summary Get project components
     * @param {string} projectId Project id
     * @param {string} [sectionId] Filter by section id
     * @param {'section' | 'created'} [sort] Sort components by their &#x60;section&#x60; or their &#x60;created&#x60; date
     * @param {boolean} [includeLatestVersion] Whether to include the latest version data in the Component object
     * @param {boolean} [includeLinkedStyleguides] Whether to include linked styleguides or not
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectComponents(projectId: string, sectionId?: string | undefined, sort?: "created" | "section" | undefined, includeLatestVersion?: boolean | undefined, includeLinkedStyleguides?: boolean | undefined, limit?: number | undefined, offset?: number | undefined, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * Returns the component in a styleguide that user has access.  See [Styleguide docs](#getstyleguide) for more details about how `linked_project` and `linked_styleguide` parameters can be used to retrieve resources from styleguides that user is eligible to access.
     * @summary Get a single styleguide component
     * @param {string} styleguideId Styleguide id
     * @param {string} componentId Component id
     * @param {string} [linkedProject] Reference project id
     * @param {string} [linkedStyleguide] Reference styleguide id
     * @param {boolean} [includeLatestVersion] Whether to include the latest version data in the Component object
     * @param {boolean} [includeLinkedStyleguides] Whether to include linked styleguides or not
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStyleguideComponent(styleguideId: string, componentId: string, linkedProject?: string | undefined, linkedStyleguide?: string | undefined, includeLatestVersion?: boolean | undefined, includeLinkedStyleguides?: boolean | undefined, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * Returns the latest version of the component in a styleguide that user has access.  See [Styleguide docs](#getstyleguide) for more details about how `linked_project` and `linked_styleguide` parameters can be used to retrieve resources from styleguides that user is eligible to access.
     * @summary Get latest styleguide component version
     * @param {string} styleguideId Styleguide id
     * @param {string} componentId Component id
     * @param {string} [linkedProject] Reference project id
     * @param {string} [linkedStyleguide] Reference styleguide id
     * @param {boolean} [includeLinkedStyleguides] Whether to include linked styleguides or not
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStyleguideComponentLatestVersion(styleguideId: string, componentId: string, linkedProject?: string | undefined, linkedStyleguide?: string | undefined, includeLinkedStyleguides?: boolean | undefined, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * Returns the component sections of a styleguide that user has access.  See [Styleguide docs](#getstyleguide) for more details about how `linked_project` and `linked_styleguide` parameters can be used to retrieve resources from styleguides that user is eligible to access.
     * @summary Get styleguide component sections
     * @param {string} styleguideId Styleguide id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {string} [linkedProject] Reference project id
     * @param {string} [linkedStyleguide] Reference styleguide id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStyleguideComponentSections(styleguideId: string, limit?: number | undefined, offset?: number | undefined, linkedProject?: string | undefined, linkedStyleguide?: string | undefined, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * Returns components in a styleguide that user has access.  See [Styleguide docs](#getstyleguide) for more details about how `linked_project` and `linked_styleguide` parameters can be used to retrieve resources from styleguides that user is eligible to access.
     * @summary Get styleguide components
     * @param {string} styleguideId Styleguide id
     * @param {string} [sectionId] Filter by section id
     * @param {'section' | 'created'} [sort] Sort components by their &#x60;section&#x60; or their &#x60;created&#x60; date
     * @param {string} [linkedProject] Reference project id
     * @param {string} [linkedStyleguide] Reference styleguide id
     * @param {boolean} [includeLinkedStyleguides] Whether to include linked styleguides or not
     * @param {boolean} [includeLatestVersion] Whether to include the latest version data in the Component object
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStyleguideComponents(styleguideId: string, sectionId?: string | undefined, sort?: "created" | "section" | undefined, linkedProject?: string | undefined, linkedStyleguide?: string | undefined, includeLinkedStyleguides?: boolean | undefined, includeLatestVersion?: boolean | undefined, limit?: number | undefined, offset?: number | undefined, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * Update a component\'s description in a project
     * @summary Update a project component
     * @param {string} projectId Project id
     * @param {string} componentId Component id
     * @param {ComponentUpdateBody} componentUpdateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProjectComponent(projectId: string, componentId: string, componentUpdateBody: ComponentUpdateBody, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * Update a component\'s description in a styleguide
     * @summary Update a styleguide component
     * @param {string} styleguideId Styleguide id
     * @param {string} componentId Component id
     * @param {ComponentUpdateBody} componentUpdateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateStyleguideComponent(styleguideId: string, componentId: string, componentUpdateBody: ComponentUpdateBody, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
};
/**
 * Search parameters for getProjectComponent operation in ComponentsApi.
 * @export
 * @interface ComponentsApiGetProjectComponentSearchParams
 */
export interface ComponentsApiGetProjectComponentSearchParams {
    /**
     * Whether to include the latest version data in the Component object
     * @type {boolean}
     * @memberof ComponentsApiGetProjectComponentSearchParams
     */
    readonly includeLatestVersion?: boolean;
    /**
     * Whether to include linked styleguides or not
     * @type {boolean}
     * @memberof ComponentsApiGetProjectComponentSearchParams
     */
    readonly includeLinkedStyleguides?: boolean;
}
/**
 * Search parameters for getProjectComponentLatestVersion operation in ComponentsApi.
 * @export
 * @interface ComponentsApiGetProjectComponentLatestVersionSearchParams
 */
export interface ComponentsApiGetProjectComponentLatestVersionSearchParams {
    /**
     * Whether to include linked styleguides or not
     * @type {boolean}
     * @memberof ComponentsApiGetProjectComponentLatestVersionSearchParams
     */
    readonly includeLinkedStyleguides?: boolean;
}
/**
 * Search parameters for getProjectComponentSections operation in ComponentsApi.
 * @export
 * @interface ComponentsApiGetProjectComponentSectionsSearchParams
 */
export interface ComponentsApiGetProjectComponentSectionsSearchParams {
    /**
     * Pagination limit
     * @type {number}
     * @memberof ComponentsApiGetProjectComponentSectionsSearchParams
     */
    readonly limit?: number;
    /**
     * Pagination offset
     * @type {number}
     * @memberof ComponentsApiGetProjectComponentSectionsSearchParams
     */
    readonly offset?: number;
}
/**
 * Search parameters for getProjectComponents operation in ComponentsApi.
 * @export
 * @interface ComponentsApiGetProjectComponentsSearchParams
 */
export interface ComponentsApiGetProjectComponentsSearchParams {
    /**
     * Filter by section id
     * @type {string}
     * @memberof ComponentsApiGetProjectComponentsSearchParams
     */
    readonly sectionId?: string;
    /**
     * Sort components by their &#x60;section&#x60; or their &#x60;created&#x60; date
     * @type {'section' | 'created'}
     * @memberof ComponentsApiGetProjectComponentsSearchParams
     */
    readonly sort?: 'section' | 'created';
    /**
     * Whether to include the latest version data in the Component object
     * @type {boolean}
     * @memberof ComponentsApiGetProjectComponentsSearchParams
     */
    readonly includeLatestVersion?: boolean;
    /**
     * Whether to include linked styleguides or not
     * @type {boolean}
     * @memberof ComponentsApiGetProjectComponentsSearchParams
     */
    readonly includeLinkedStyleguides?: boolean;
    /**
     * Pagination limit
     * @type {number}
     * @memberof ComponentsApiGetProjectComponentsSearchParams
     */
    readonly limit?: number;
    /**
     * Pagination offset
     * @type {number}
     * @memberof ComponentsApiGetProjectComponentsSearchParams
     */
    readonly offset?: number;
}
/**
 * Search parameters for getStyleguideComponent operation in ComponentsApi.
 * @export
 * @interface ComponentsApiGetStyleguideComponentSearchParams
 */
export interface ComponentsApiGetStyleguideComponentSearchParams {
    /**
     * Reference project id
     * @type {string}
     * @memberof ComponentsApiGetStyleguideComponentSearchParams
     */
    readonly linkedProject?: string;
    /**
     * Reference styleguide id
     * @type {string}
     * @memberof ComponentsApiGetStyleguideComponentSearchParams
     */
    readonly linkedStyleguide?: string;
    /**
     * Whether to include the latest version data in the Component object
     * @type {boolean}
     * @memberof ComponentsApiGetStyleguideComponentSearchParams
     */
    readonly includeLatestVersion?: boolean;
    /**
     * Whether to include linked styleguides or not
     * @type {boolean}
     * @memberof ComponentsApiGetStyleguideComponentSearchParams
     */
    readonly includeLinkedStyleguides?: boolean;
}
/**
 * Search parameters for getStyleguideComponentLatestVersion operation in ComponentsApi.
 * @export
 * @interface ComponentsApiGetStyleguideComponentLatestVersionSearchParams
 */
export interface ComponentsApiGetStyleguideComponentLatestVersionSearchParams {
    /**
     * Reference project id
     * @type {string}
     * @memberof ComponentsApiGetStyleguideComponentLatestVersionSearchParams
     */
    readonly linkedProject?: string;
    /**
     * Reference styleguide id
     * @type {string}
     * @memberof ComponentsApiGetStyleguideComponentLatestVersionSearchParams
     */
    readonly linkedStyleguide?: string;
    /**
     * Whether to include linked styleguides or not
     * @type {boolean}
     * @memberof ComponentsApiGetStyleguideComponentLatestVersionSearchParams
     */
    readonly includeLinkedStyleguides?: boolean;
}
/**
 * Search parameters for getStyleguideComponentSections operation in ComponentsApi.
 * @export
 * @interface ComponentsApiGetStyleguideComponentSectionsSearchParams
 */
export interface ComponentsApiGetStyleguideComponentSectionsSearchParams {
    /**
     * Pagination limit
     * @type {number}
     * @memberof ComponentsApiGetStyleguideComponentSectionsSearchParams
     */
    readonly limit?: number;
    /**
     * Pagination offset
     * @type {number}
     * @memberof ComponentsApiGetStyleguideComponentSectionsSearchParams
     */
    readonly offset?: number;
    /**
     * Reference project id
     * @type {string}
     * @memberof ComponentsApiGetStyleguideComponentSectionsSearchParams
     */
    readonly linkedProject?: string;
    /**
     * Reference styleguide id
     * @type {string}
     * @memberof ComponentsApiGetStyleguideComponentSectionsSearchParams
     */
    readonly linkedStyleguide?: string;
}
/**
 * Search parameters for getStyleguideComponents operation in ComponentsApi.
 * @export
 * @interface ComponentsApiGetStyleguideComponentsSearchParams
 */
export interface ComponentsApiGetStyleguideComponentsSearchParams {
    /**
     * Filter by section id
     * @type {string}
     * @memberof ComponentsApiGetStyleguideComponentsSearchParams
     */
    readonly sectionId?: string;
    /**
     * Sort components by their &#x60;section&#x60; or their &#x60;created&#x60; date
     * @type {'section' | 'created'}
     * @memberof ComponentsApiGetStyleguideComponentsSearchParams
     */
    readonly sort?: 'section' | 'created';
    /**
     * Reference project id
     * @type {string}
     * @memberof ComponentsApiGetStyleguideComponentsSearchParams
     */
    readonly linkedProject?: string;
    /**
     * Reference styleguide id
     * @type {string}
     * @memberof ComponentsApiGetStyleguideComponentsSearchParams
     */
    readonly linkedStyleguide?: string;
    /**
     * Whether to include linked styleguides or not
     * @type {boolean}
     * @memberof ComponentsApiGetStyleguideComponentsSearchParams
     */
    readonly includeLinkedStyleguides?: boolean;
    /**
     * Whether to include the latest version data in the Component object
     * @type {boolean}
     * @memberof ComponentsApiGetStyleguideComponentsSearchParams
     */
    readonly includeLatestVersion?: boolean;
    /**
     * Pagination limit
     * @type {number}
     * @memberof ComponentsApiGetStyleguideComponentsSearchParams
     */
    readonly limit?: number;
    /**
     * Pagination offset
     * @type {number}
     * @memberof ComponentsApiGetStyleguideComponentsSearchParams
     */
    readonly offset?: number;
}
/**
 * ComponentsApi - object-oriented interface
 * @export
 * @class ComponentsApi
 * @extends {BaseAPI}
 */
export declare class ComponentsApi extends BaseAPI {
    /**
     * Get a project component by id
     * @summary Get a single project component
     * @param {string} projectId Project id
     * @param {string} componentId Component id
     * @param {ComponentsApiGetProjectComponentSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComponentsApi
     */
    getProjectComponent(projectId: string, componentId: string, searchParams?: ComponentsApiGetProjectComponentSearchParams, options?: any): Promise<AxiosResponse<Component>>;
    /**
     * Get latest version of the component in a project
     * @summary Get latest project component version
     * @param {string} projectId Project id
     * @param {string} componentId Component id
     * @param {ComponentsApiGetProjectComponentLatestVersionSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComponentsApi
     */
    getProjectComponentLatestVersion(projectId: string, componentId: string, searchParams?: ComponentsApiGetProjectComponentLatestVersionSearchParams, options?: any): Promise<AxiosResponse<ComponentVersion>>;
    /**
     * List all component sections of the project
     * @summary Get project component sections
     * @param {string} projectId Project id
     * @param {ComponentsApiGetProjectComponentSectionsSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComponentsApi
     */
    getProjectComponentSections(projectId: string, searchParams?: ComponentsApiGetProjectComponentSectionsSearchParams, options?: any): Promise<AxiosResponse<Array<ComponentSection>>>;
    /**
     * List all components of a project
     * @summary Get project components
     * @param {string} projectId Project id
     * @param {ComponentsApiGetProjectComponentsSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComponentsApi
     */
    getProjectComponents(projectId: string, searchParams?: ComponentsApiGetProjectComponentsSearchParams, options?: any): Promise<AxiosResponse<Array<Component>>>;
    /**
     * Returns the component in a styleguide that user has access.  See [Styleguide docs](#getstyleguide) for more details about how `linked_project` and `linked_styleguide` parameters can be used to retrieve resources from styleguides that user is eligible to access.
     * @summary Get a single styleguide component
     * @param {string} styleguideId Styleguide id
     * @param {string} componentId Component id
     * @param {ComponentsApiGetStyleguideComponentSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComponentsApi
     */
    getStyleguideComponent(styleguideId: string, componentId: string, searchParams?: ComponentsApiGetStyleguideComponentSearchParams, options?: any): Promise<AxiosResponse<Component>>;
    /**
     * Returns the latest version of the component in a styleguide that user has access.  See [Styleguide docs](#getstyleguide) for more details about how `linked_project` and `linked_styleguide` parameters can be used to retrieve resources from styleguides that user is eligible to access.
     * @summary Get latest styleguide component version
     * @param {string} styleguideId Styleguide id
     * @param {string} componentId Component id
     * @param {ComponentsApiGetStyleguideComponentLatestVersionSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComponentsApi
     */
    getStyleguideComponentLatestVersion(styleguideId: string, componentId: string, searchParams?: ComponentsApiGetStyleguideComponentLatestVersionSearchParams, options?: any): Promise<AxiosResponse<ComponentVersion>>;
    /**
     * Returns the component sections of a styleguide that user has access.  See [Styleguide docs](#getstyleguide) for more details about how `linked_project` and `linked_styleguide` parameters can be used to retrieve resources from styleguides that user is eligible to access.
     * @summary Get styleguide component sections
     * @param {string} styleguideId Styleguide id
     * @param {ComponentsApiGetStyleguideComponentSectionsSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComponentsApi
     */
    getStyleguideComponentSections(styleguideId: string, searchParams?: ComponentsApiGetStyleguideComponentSectionsSearchParams, options?: any): Promise<AxiosResponse<Array<ComponentSection>>>;
    /**
     * Returns components in a styleguide that user has access.  See [Styleguide docs](#getstyleguide) for more details about how `linked_project` and `linked_styleguide` parameters can be used to retrieve resources from styleguides that user is eligible to access.
     * @summary Get styleguide components
     * @param {string} styleguideId Styleguide id
     * @param {ComponentsApiGetStyleguideComponentsSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComponentsApi
     */
    getStyleguideComponents(styleguideId: string, searchParams?: ComponentsApiGetStyleguideComponentsSearchParams, options?: any): Promise<AxiosResponse<Array<Component>>>;
    /**
     * Update a component\'s description in a project
     * @summary Update a project component
     * @param {string} projectId Project id
     * @param {string} componentId Component id
     * @param {ComponentUpdateBody} componentUpdateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComponentsApi
     */
    updateProjectComponent(projectId: string, componentId: string, componentUpdateBody: ComponentUpdateBody, options?: any): Promise<AxiosResponse<void>>;
    /**
     * Update a component\'s description in a styleguide
     * @summary Update a styleguide component
     * @param {string} styleguideId Styleguide id
     * @param {string} componentId Component id
     * @param {ComponentUpdateBody} componentUpdateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComponentsApi
     */
    updateStyleguideComponent(styleguideId: string, componentId: string, componentUpdateBody: ComponentUpdateBody, options?: any): Promise<AxiosResponse<void>>;
}
