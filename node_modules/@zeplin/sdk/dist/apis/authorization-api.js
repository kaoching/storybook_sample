"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

require("core-js/modules/es.object.define-property.js");

require("core-js/modules/es.object.keys.js");

require("core-js/modules/es.symbol.js");

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptor.js");

require("core-js/modules/es.array.for-each.js");

require("core-js/modules/web.dom-collections.for-each.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

require("core-js/modules/es.object.define-properties.js");

require("core-js/modules/es.promise.js");

require("core-js/modules/es.object.set-prototype-of.js");

require("core-js/modules/es.object.get-prototype-of.js");

require("core-js/modules/es.reflect.construct.js");

require("core-js/modules/es.object.create.js");

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.symbol.iterator.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AuthorizationApiFp = exports.AuthorizationApiAxiosParamCreator = exports.AuthorizationApi = void 0;

require("regenerator-runtime/runtime.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.object.to-string.js");

require("core-js/modules/es.string.iterator.js");

require("core-js/modules/web.dom-collections.iterator.js");

require("core-js/modules/web.url.js");

var _axios = _interopRequireDefault(require("axios"));

var _common = require("../common");

var _base = require("../base");

var _models = require("../models");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * AuthorizationApi - axios parameter creator
 * @export
 */
var AuthorizationApiAxiosParamCreator = function AuthorizationApiAxiosParamCreator(configuration) {
  return {
    /**
     * Users are redirected to web app to authenticate themselves and authorize the app with `client_id` to act on behalf of themselves.
     * @summary Authorization endpoint
     * @param {string} responseType Only &#x60;code&#x60; flow is supported
     * @param {string} clientId Identifier of the Zeplin app requesting user authentication
     * @param {string} redirectUri User is redirected to this endpoint after authorization
     * @param {string} [state] RECOMMENDED. An opaque value used by the client to maintain state between the request and callback.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oAuthAuthorize: function oAuthAuthorize(responseType, clientId, redirectUri, state, codeChallenge, codeChallengeMethod) {
      var options = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : {};
      // verify required parameter 'responseType' is not null or undefined
      (0, _common.assertParamExists)('oAuthAuthorize', 'responseType', responseType); // verify required parameter 'clientId' is not null or undefined

      (0, _common.assertParamExists)('oAuthAuthorize', 'clientId', clientId); // verify required parameter 'redirectUri' is not null or undefined

      (0, _common.assertParamExists)('oAuthAuthorize', 'redirectUri', redirectUri);
      var localVarPath = "/v1/oauth/authorize"; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      var localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'GET'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {};

      if (responseType !== undefined) {
        localVarQueryParameter['response_type'] = responseType;
      }

      if (clientId !== undefined) {
        localVarQueryParameter['client_id'] = clientId;
      }

      if (redirectUri !== undefined) {
        localVarQueryParameter['redirect_uri'] = redirectUri;
      }

      if (state !== undefined) {
        localVarQueryParameter['state'] = state;
      }

      if (codeChallenge !== undefined) {
        localVarQueryParameter['code_challenge'] = codeChallenge;
        localVarQueryParameter['code_challenge_method'] = 'S256';
      }

      if (codeChallengeMethod !== undefined) {
        localVarQueryParameter['code_challenge_method'] = codeChallengeMethod;
      }

      (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
      return {
        url: (0, _common.toPathString)(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * If `grant_type` is given as `authorization_code`; handles code flow. If `grant_type` is given as `refresh_token` handles refresh token flow.
     * @summary Access token endpoint
     * @param {TokenCreateBody} tokenCreateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oAuthPostToken: function oAuthPostToken(tokenCreateBody) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      // verify required parameter 'tokenCreateBody' is not null or undefined
      (0, _common.assertParamExists)('oAuthPostToken', 'tokenCreateBody', tokenCreateBody);
      var localVarPath = "/v1/oauth/token"; // use dummy base URL string because the URL constructor only accepts absolute URLs.

      var localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'POST'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {};
      localVarHeaderParameter['Content-Type'] = 'application/json';
      (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
      localVarRequestOptions.data = (0, _common.serializeDataIfNeeded)((0, _models.transformTokenCreateBodyToJSON)(tokenCreateBody), localVarRequestOptions, configuration);
      return {
        url: (0, _common.toPathString)(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
/**
 * AuthorizationApi - functional programming interface
 * @export
 */


exports.AuthorizationApiAxiosParamCreator = AuthorizationApiAxiosParamCreator;

var AuthorizationApiFp = function AuthorizationApiFp(configuration) {
  var localVarAxiosParamCreator = AuthorizationApiAxiosParamCreator(configuration);
  return {
    /**
     * If `grant_type` is given as `authorization_code`; handles code flow. If `grant_type` is given as `refresh_token` handles refresh token flow.
     * @summary Access token endpoint
     * @param {TokenCreateBody} tokenCreateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oAuthPostToken: function oAuthPostToken(tokenCreateBody, options) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var localVarAxiosArgs;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return localVarAxiosParamCreator.oAuthPostToken(tokenCreateBody, options);

              case 2:
                localVarAxiosArgs = _context.sent;
                return _context.abrupt("return", (0, _common.createRequestFunction)(localVarAxiosArgs, _axios["default"], _base.BASE_PATH, configuration));

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }))();
    }
  };
};
/**
 * Search parameters for getAuthorizeUrl operation in AuthorizationApi.
 * @export
 * @interface AuthorizationApiGetAuthorizationUrlSearchParams
 */


exports.AuthorizationApiFp = AuthorizationApiFp;

/**
 * AuthorizationApi - object-oriented interface
 * @export
 * @class AuthorizationApi
 * @extends {BaseAPI}
 */
var AuthorizationApi = /*#__PURE__*/function (_BaseAPI) {
  _inherits(AuthorizationApi, _BaseAPI);

  var _super = _createSuper(AuthorizationApi);

  function AuthorizationApi() {
    _classCallCheck(this, AuthorizationApi);

    return _super.apply(this, arguments);
  }

  _createClass(AuthorizationApi, [{
    key: "getAuthorizationUrl",
    value:
    /**
     * Users are redirected to web app to authenticate themselves and authorize the app with `client_id` to act on behalf of themselves.
     * @summary Authorization endpoint
     * @param {AuthorizationApiGetAuthorizationUrlSearchParams} searchParams Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    function getAuthorizationUrl(searchParams, options) {
      var paramCreator = AuthorizationApiAxiosParamCreator(this.configuration);
      var params = paramCreator.oAuthAuthorize("code", searchParams.clientId, searchParams.redirectUri, searchParams.state, searchParams.codeChallenge, searchParams.codeChallengeMethod, options);
      return this.axios.getUri(_objectSpread(_objectSpread({}, params.options), {}, {
        url: this.basePath + params.url
      }));
    }
    /**
     * Handles code flow
     * @summary Access token endpoint
     * @param {AuthorizationApiCreateTokenParams} params
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */

  }, {
    key: "createToken",
    value: function () {
      var _createToken = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(params, options) {
        var authorizationApiFp, request, response;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                authorizationApiFp = AuthorizationApiFp(this.configuration);
                _context2.next = 3;
                return authorizationApiFp.oAuthPostToken(_objectSpread(_objectSpread({}, params), {}, {
                  grantType: "authorization_code"
                }), options);

              case 3:
                request = _context2.sent;
                _context2.next = 6;
                return request(this.axios, this.basePath);

              case 6:
                response = _context2.sent;
                return _context2.abrupt("return", _objectSpread(_objectSpread({}, response), {}, {
                  data: (0, _models.transformJSONToTokenResponse)(response.data)
                }));

              case 8:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function createToken(_x, _x2) {
        return _createToken.apply(this, arguments);
      }

      return createToken;
    }()
    /**
     * Handles refresh token flow
     * @summary Access token endpoint
     * @param {AuthorizationApiCreateTokenParams} params
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */

  }, {
    key: "refreshToken",
    value: function () {
      var _refreshToken = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(params, options) {
        var authorizationApiFp, request, response;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                authorizationApiFp = AuthorizationApiFp(this.configuration);
                _context3.next = 3;
                return authorizationApiFp.oAuthPostToken(_objectSpread(_objectSpread({}, params), {}, {
                  grantType: "refresh_token"
                }), options);

              case 3:
                request = _context3.sent;
                _context3.next = 6;
                return request(this.axios, this.basePath);

              case 6:
                response = _context3.sent;
                return _context3.abrupt("return", _objectSpread(_objectSpread({}, response), {}, {
                  data: (0, _models.transformJSONToTokenResponse)(response.data)
                }));

              case 8:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function refreshToken(_x3, _x4) {
        return _refreshToken.apply(this, arguments);
      }

      return refreshToken;
    }()
  }]);

  return AuthorizationApi;
}(_base.BaseAPI);

exports.AuthorizationApi = AuthorizationApi;