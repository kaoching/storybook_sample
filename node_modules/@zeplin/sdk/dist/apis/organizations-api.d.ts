/**
 * Zeplin API
 * Access your resources in Zeplin
 *
 * Contact: support@zeplin.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosResponse } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { Organization } from '../models';
import { OrganizationBilling } from '../models';
import { OrganizationMember } from '../models';
import { OrganizationMemberInviteBody } from '../models';
import { OrganizationMemberUpdateBody } from '../models';
import { OrganizationSummary } from '../models';
import { Project } from '../models';
import { Styleguide } from '../models';
import { User } from '../models';
import { WorkflowStatus } from '../models';
/**
 * OrganizationsApi - axios parameter creator
 * @export
 */
export declare const OrganizationsApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Get details of the organization
     * @summary Get a single organization
     * @param {string} organizationId Organization id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganization: (organizationId: string, options?: any) => Promise<RequestArgs>;
    /**
     * List all aliens in the organization
     * @summary Get organization aliens
     * @param {string} organizationId Organization id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationAliens: (organizationId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get total and used seat count in the organization
     * @summary Get organization billing details
     * @param {string} organizationId Organization id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationBilling: (organizationId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get a list of projects that an organization member is a part of
     * @summary Get a member\'s projects
     * @param {string} organizationId Organization id
     * @param {string} memberId Member id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationMemberProjects: (organizationId: string, memberId: string, limit?: number | undefined, offset?: number | undefined, options?: any) => Promise<RequestArgs>;
    /**
     * Get a list of styleguides that an organization member is a part of
     * @summary Get a member\'s styleguides
     * @param {string} organizationId Organization id
     * @param {string} memberId Member id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationMemberStyleguides: (organizationId: string, memberId: string, limit?: number | undefined, offset?: number | undefined, options?: any) => Promise<RequestArgs>;
    /**
     * List all members in the organization
     * @summary Get organization members
     * @param {string} organizationId Organization id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {Set<string>} [handle] Filter organization members by email, username or unique identifier of the user  ☝️Note that only organization admins (or higher) can filter members using email addresses.  Example: &#x60;?handle&#x3D;zozo&amp;handle&#x3D;5d9caaecb4a3fa9bc9718686&amp;handle&#x3D;zozo%40zeplin.io&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationMembers: (organizationId: string, limit?: number | undefined, offset?: number | undefined, handle?: Set<string> | undefined, options?: any) => Promise<RequestArgs>;
    /**
     * List all projects that belong to the organization
     * @summary Get organization projects
     * @param {string} organizationId Organization id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationProjects: (organizationId: string, limit?: number | undefined, offset?: number | undefined, options?: any) => Promise<RequestArgs>;
    /**
     * List all styleguides that belong to the organization
     * @summary Get organization styleguides
     * @param {string} organizationId Organization id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationStyleguides: (organizationId: string, limit?: number | undefined, offset?: number | undefined, options?: any) => Promise<RequestArgs>;
    /**
     * List all workflow statuses that belong to the organization
     * @summary Get organization workflow statuses
     * @param {string} organizationId Organization id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationWorkflowStatuses: (organizationId: string, options?: any) => Promise<RequestArgs>;
    /**
     * List all organizations that user is a member of
     * @summary Get organizations
     * @param {Set<'owner' | 'admin' | 'editor' | 'member' | 'alien'>} [role] Filter by role  ☝️Note that the Developer role maps to &#x60;member&#x60; and the Reviewer role maps to &#x60;alien&#x60; in the API.  Example: &#x60;?role&#x3D;owner&amp;role&#x3D;admin&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizations: (role?: Set<"owner" | "admin" | "editor" | "member" | "alien"> | undefined, options?: any) => Promise<RequestArgs>;
    /**
     * Invite a new organization member.  ☝️*Only organization admins (or higher) can invite members using **personal access tokens**. OAuth applications are not allowed.*
     * @summary Invite member
     * @param {string} organizationId Organization id
     * @param {OrganizationMemberInviteBody} organizationMemberInviteBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    inviteOrganizationMember: (organizationId: string, organizationMemberInviteBody: OrganizationMemberInviteBody, options?: any) => Promise<RequestArgs>;
    /**
     * Remove a member from organization.  ☝️*Only organization admins (or higher) can remove members using **personal access tokens**. OAuth applications are not allowed.*
     * @summary Remove an organization member
     * @param {string} organizationId Organization id
     * @param {string} memberId Member id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeOrganizationMember: (organizationId: string, memberId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Update an organization member\'s role, access restriction, and tags.  ☝️*Only organization admins (or higher) can update members using **personal access tokens**. OAuth applications are not allowed.*
     * @summary Update an organization member
     * @param {string} organizationId Organization id
     * @param {string} memberId Member id
     * @param {OrganizationMemberUpdateBody} organizationMemberUpdateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrganizationMember: (organizationId: string, memberId: string, organizationMemberUpdateBody: OrganizationMemberUpdateBody, options?: any) => Promise<RequestArgs>;
};
/**
 * OrganizationsApi - functional programming interface
 * @export
 */
export declare const OrganizationsApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Get details of the organization
     * @summary Get a single organization
     * @param {string} organizationId Organization id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganization(organizationId: string, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * List all aliens in the organization
     * @summary Get organization aliens
     * @param {string} organizationId Organization id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationAliens(organizationId: string, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * Get total and used seat count in the organization
     * @summary Get organization billing details
     * @param {string} organizationId Organization id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationBilling(organizationId: string, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * Get a list of projects that an organization member is a part of
     * @summary Get a member\'s projects
     * @param {string} organizationId Organization id
     * @param {string} memberId Member id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationMemberProjects(organizationId: string, memberId: string, limit?: number | undefined, offset?: number | undefined, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * Get a list of styleguides that an organization member is a part of
     * @summary Get a member\'s styleguides
     * @param {string} organizationId Organization id
     * @param {string} memberId Member id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationMemberStyleguides(organizationId: string, memberId: string, limit?: number | undefined, offset?: number | undefined, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * List all members in the organization
     * @summary Get organization members
     * @param {string} organizationId Organization id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {Set<string>} [handle] Filter organization members by email, username or unique identifier of the user  ☝️Note that only organization admins (or higher) can filter members using email addresses.  Example: &#x60;?handle&#x3D;zozo&amp;handle&#x3D;5d9caaecb4a3fa9bc9718686&amp;handle&#x3D;zozo%40zeplin.io&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationMembers(organizationId: string, limit?: number | undefined, offset?: number | undefined, handle?: Set<string> | undefined, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * List all projects that belong to the organization
     * @summary Get organization projects
     * @param {string} organizationId Organization id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationProjects(organizationId: string, limit?: number | undefined, offset?: number | undefined, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * List all styleguides that belong to the organization
     * @summary Get organization styleguides
     * @param {string} organizationId Organization id
     * @param {number} [limit] Pagination limit
     * @param {number} [offset] Pagination offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationStyleguides(organizationId: string, limit?: number | undefined, offset?: number | undefined, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * List all workflow statuses that belong to the organization
     * @summary Get organization workflow statuses
     * @param {string} organizationId Organization id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationWorkflowStatuses(organizationId: string, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * List all organizations that user is a member of
     * @summary Get organizations
     * @param {Set<'owner' | 'admin' | 'editor' | 'member' | 'alien'>} [role] Filter by role  ☝️Note that the Developer role maps to &#x60;member&#x60; and the Reviewer role maps to &#x60;alien&#x60; in the API.  Example: &#x60;?role&#x3D;owner&amp;role&#x3D;admin&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizations(role?: Set<"owner" | "admin" | "editor" | "member" | "alien"> | undefined, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * Invite a new organization member.  ☝️*Only organization admins (or higher) can invite members using **personal access tokens**. OAuth applications are not allowed.*
     * @summary Invite member
     * @param {string} organizationId Organization id
     * @param {OrganizationMemberInviteBody} organizationMemberInviteBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    inviteOrganizationMember(organizationId: string, organizationMemberInviteBody: OrganizationMemberInviteBody, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * Remove a member from organization.  ☝️*Only organization admins (or higher) can remove members using **personal access tokens**. OAuth applications are not allowed.*
     * @summary Remove an organization member
     * @param {string} organizationId Organization id
     * @param {string} memberId Member id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeOrganizationMember(organizationId: string, memberId: string, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * Update an organization member\'s role, access restriction, and tags.  ☝️*Only organization admins (or higher) can update members using **personal access tokens**. OAuth applications are not allowed.*
     * @summary Update an organization member
     * @param {string} organizationId Organization id
     * @param {string} memberId Member id
     * @param {OrganizationMemberUpdateBody} organizationMemberUpdateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrganizationMember(organizationId: string, memberId: string, organizationMemberUpdateBody: OrganizationMemberUpdateBody, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
};
/**
 * Search parameters for getOrganizationMemberProjects operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiGetOrganizationMemberProjectsSearchParams
 */
export interface OrganizationsApiGetOrganizationMemberProjectsSearchParams {
    /**
     * Pagination limit
     * @type {number}
     * @memberof OrganizationsApiGetOrganizationMemberProjectsSearchParams
     */
    readonly limit?: number;
    /**
     * Pagination offset
     * @type {number}
     * @memberof OrganizationsApiGetOrganizationMemberProjectsSearchParams
     */
    readonly offset?: number;
}
/**
 * Search parameters for getOrganizationMemberStyleguides operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiGetOrganizationMemberStyleguidesSearchParams
 */
export interface OrganizationsApiGetOrganizationMemberStyleguidesSearchParams {
    /**
     * Pagination limit
     * @type {number}
     * @memberof OrganizationsApiGetOrganizationMemberStyleguidesSearchParams
     */
    readonly limit?: number;
    /**
     * Pagination offset
     * @type {number}
     * @memberof OrganizationsApiGetOrganizationMemberStyleguidesSearchParams
     */
    readonly offset?: number;
}
/**
 * Search parameters for getOrganizationMembers operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiGetOrganizationMembersSearchParams
 */
export interface OrganizationsApiGetOrganizationMembersSearchParams {
    /**
     * Pagination limit
     * @type {number}
     * @memberof OrganizationsApiGetOrganizationMembersSearchParams
     */
    readonly limit?: number;
    /**
     * Pagination offset
     * @type {number}
     * @memberof OrganizationsApiGetOrganizationMembersSearchParams
     */
    readonly offset?: number;
    /**
     * Filter organization members by email, username or unique identifier of the user  ☝️Note that only organization admins (or higher) can filter members using email addresses.  Example: &#x60;?handle&#x3D;zozo&amp;handle&#x3D;5d9caaecb4a3fa9bc9718686&amp;handle&#x3D;zozo%40zeplin.io&#x60;
     * @type {Set<string>}
     * @memberof OrganizationsApiGetOrganizationMembersSearchParams
     */
    readonly handle?: Set<string>;
}
/**
 * Search parameters for getOrganizationProjects operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiGetOrganizationProjectsSearchParams
 */
export interface OrganizationsApiGetOrganizationProjectsSearchParams {
    /**
     * Pagination limit
     * @type {number}
     * @memberof OrganizationsApiGetOrganizationProjectsSearchParams
     */
    readonly limit?: number;
    /**
     * Pagination offset
     * @type {number}
     * @memberof OrganizationsApiGetOrganizationProjectsSearchParams
     */
    readonly offset?: number;
}
/**
 * Search parameters for getOrganizationStyleguides operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiGetOrganizationStyleguidesSearchParams
 */
export interface OrganizationsApiGetOrganizationStyleguidesSearchParams {
    /**
     * Pagination limit
     * @type {number}
     * @memberof OrganizationsApiGetOrganizationStyleguidesSearchParams
     */
    readonly limit?: number;
    /**
     * Pagination offset
     * @type {number}
     * @memberof OrganizationsApiGetOrganizationStyleguidesSearchParams
     */
    readonly offset?: number;
}
/**
 * Search parameters for getOrganizations operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiGetOrganizationsSearchParams
 */
export interface OrganizationsApiGetOrganizationsSearchParams {
    /**
     * Filter by role  ☝️Note that the Developer role maps to &#x60;member&#x60; and the Reviewer role maps to &#x60;alien&#x60; in the API.  Example: &#x60;?role&#x3D;owner&amp;role&#x3D;admin&#x60;
     * @type {Set<'owner' | 'admin' | 'editor' | 'member' | 'alien'>}
     * @memberof OrganizationsApiGetOrganizationsSearchParams
     */
    readonly role?: Set<'owner' | 'admin' | 'editor' | 'member' | 'alien'>;
}
/**
 * OrganizationsApi - object-oriented interface
 * @export
 * @class OrganizationsApi
 * @extends {BaseAPI}
 */
export declare class OrganizationsApi extends BaseAPI {
    /**
     * Get details of the organization
     * @summary Get a single organization
     * @param {string} organizationId Organization id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    getOrganization(organizationId: string, options?: any): Promise<AxiosResponse<Organization>>;
    /**
     * List all aliens in the organization
     * @summary Get organization aliens
     * @param {string} organizationId Organization id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    getOrganizationAliens(organizationId: string, options?: any): Promise<AxiosResponse<Array<User>>>;
    /**
     * Get total and used seat count in the organization
     * @summary Get organization billing details
     * @param {string} organizationId Organization id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    getOrganizationBilling(organizationId: string, options?: any): Promise<AxiosResponse<OrganizationBilling>>;
    /**
     * Get a list of projects that an organization member is a part of
     * @summary Get a member\'s projects
     * @param {string} organizationId Organization id
     * @param {string} memberId Member id
     * @param {OrganizationsApiGetOrganizationMemberProjectsSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    getOrganizationMemberProjects(organizationId: string, memberId: string, searchParams?: OrganizationsApiGetOrganizationMemberProjectsSearchParams, options?: any): Promise<AxiosResponse<Array<Project>>>;
    /**
     * Get a list of styleguides that an organization member is a part of
     * @summary Get a member\'s styleguides
     * @param {string} organizationId Organization id
     * @param {string} memberId Member id
     * @param {OrganizationsApiGetOrganizationMemberStyleguidesSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    getOrganizationMemberStyleguides(organizationId: string, memberId: string, searchParams?: OrganizationsApiGetOrganizationMemberStyleguidesSearchParams, options?: any): Promise<AxiosResponse<Array<Styleguide>>>;
    /**
     * List all members in the organization
     * @summary Get organization members
     * @param {string} organizationId Organization id
     * @param {OrganizationsApiGetOrganizationMembersSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    getOrganizationMembers(organizationId: string, searchParams?: OrganizationsApiGetOrganizationMembersSearchParams, options?: any): Promise<AxiosResponse<Array<OrganizationMember>>>;
    /**
     * List all projects that belong to the organization
     * @summary Get organization projects
     * @param {string} organizationId Organization id
     * @param {OrganizationsApiGetOrganizationProjectsSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    getOrganizationProjects(organizationId: string, searchParams?: OrganizationsApiGetOrganizationProjectsSearchParams, options?: any): Promise<AxiosResponse<Array<Project>>>;
    /**
     * List all styleguides that belong to the organization
     * @summary Get organization styleguides
     * @param {string} organizationId Organization id
     * @param {OrganizationsApiGetOrganizationStyleguidesSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    getOrganizationStyleguides(organizationId: string, searchParams?: OrganizationsApiGetOrganizationStyleguidesSearchParams, options?: any): Promise<AxiosResponse<Array<Styleguide>>>;
    /**
     * List all workflow statuses that belong to the organization
     * @summary Get organization workflow statuses
     * @param {string} organizationId Organization id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    getOrganizationWorkflowStatuses(organizationId: string, options?: any): Promise<AxiosResponse<Array<WorkflowStatus>>>;
    /**
     * List all organizations that user is a member of
     * @summary Get organizations
     * @param {OrganizationsApiGetOrganizationsSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    getOrganizations(searchParams?: OrganizationsApiGetOrganizationsSearchParams, options?: any): Promise<AxiosResponse<Array<OrganizationSummary>>>;
    /**
     * Invite a new organization member.  ☝️*Only organization admins (or higher) can invite members using **personal access tokens**. OAuth applications are not allowed.*
     * @summary Invite member
     * @param {string} organizationId Organization id
     * @param {OrganizationMemberInviteBody} organizationMemberInviteBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    inviteOrganizationMember(organizationId: string, organizationMemberInviteBody: OrganizationMemberInviteBody, options?: any): Promise<AxiosResponse<OrganizationMember>>;
    /**
     * Remove a member from organization.  ☝️*Only organization admins (or higher) can remove members using **personal access tokens**. OAuth applications are not allowed.*
     * @summary Remove an organization member
     * @param {string} organizationId Organization id
     * @param {string} memberId Member id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    removeOrganizationMember(organizationId: string, memberId: string, options?: any): Promise<AxiosResponse<void>>;
    /**
     * Update an organization member\'s role, access restriction, and tags.  ☝️*Only organization admins (or higher) can update members using **personal access tokens**. OAuth applications are not allowed.*
     * @summary Update an organization member
     * @param {string} organizationId Organization id
     * @param {string} memberId Member id
     * @param {OrganizationMemberUpdateBody} organizationMemberUpdateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    updateOrganizationMember(organizationId: string, memberId: string, organizationMemberUpdateBody: OrganizationMemberUpdateBody, options?: any): Promise<AxiosResponse<void>>;
}
