/**
 * Zeplin API
 * Access your resources in Zeplin
 *
 * Contact: support@zeplin.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosResponse } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { DesignTokens } from '../models';
/**
 * DesignTokensApi - axios parameter creator
 * @export
 */
export declare const DesignTokensApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Fetch all design tokens of the project
     * @summary Get project design tokens
     * @param {string} projectId Project id
     * @param {boolean} [includeLinkedStyleguides] Whether to include linked styleguides or not
     * @param {'kebab' | 'snake' | 'camel' | 'pascal' | 'constant' | 'original'} [tokenNameCase] Case for token names
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectDesignTokens: (projectId: string, includeLinkedStyleguides?: boolean | undefined, tokenNameCase?: "kebab" | "snake" | "camel" | "pascal" | "constant" | "original" | undefined, options?: any) => Promise<RequestArgs>;
    /**
     * Fetch all design tokens of the styleguide
     * @summary Get styleguide design tokens
     * @param {string} styleguideId Styleguide id
     * @param {boolean} [includeLinkedStyleguides] Whether to include linked styleguides or not
     * @param {'kebab' | 'snake' | 'camel' | 'pascal' | 'constant' | 'original'} [tokenNameCase] Case for token names
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStyleguideDesignTokens: (styleguideId: string, includeLinkedStyleguides?: boolean | undefined, tokenNameCase?: "kebab" | "snake" | "camel" | "pascal" | "constant" | "original" | undefined, options?: any) => Promise<RequestArgs>;
};
/**
 * DesignTokensApi - functional programming interface
 * @export
 */
export declare const DesignTokensApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Fetch all design tokens of the project
     * @summary Get project design tokens
     * @param {string} projectId Project id
     * @param {boolean} [includeLinkedStyleguides] Whether to include linked styleguides or not
     * @param {'kebab' | 'snake' | 'camel' | 'pascal' | 'constant' | 'original'} [tokenNameCase] Case for token names
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectDesignTokens(projectId: string, includeLinkedStyleguides?: boolean | undefined, tokenNameCase?: "kebab" | "snake" | "camel" | "pascal" | "constant" | "original" | undefined, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * Fetch all design tokens of the styleguide
     * @summary Get styleguide design tokens
     * @param {string} styleguideId Styleguide id
     * @param {boolean} [includeLinkedStyleguides] Whether to include linked styleguides or not
     * @param {'kebab' | 'snake' | 'camel' | 'pascal' | 'constant' | 'original'} [tokenNameCase] Case for token names
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStyleguideDesignTokens(styleguideId: string, includeLinkedStyleguides?: boolean | undefined, tokenNameCase?: "kebab" | "snake" | "camel" | "pascal" | "constant" | "original" | undefined, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
};
/**
 * Search parameters for getProjectDesignTokens operation in DesignTokensApi.
 * @export
 * @interface DesignTokensApiGetProjectDesignTokensSearchParams
 */
export interface DesignTokensApiGetProjectDesignTokensSearchParams {
    /**
     * Whether to include linked styleguides or not
     * @type {boolean}
     * @memberof DesignTokensApiGetProjectDesignTokensSearchParams
     */
    readonly includeLinkedStyleguides?: boolean;
    /**
     * Case for token names
     * @type {'kebab' | 'snake' | 'camel' | 'pascal' | 'constant' | 'original'}
     * @memberof DesignTokensApiGetProjectDesignTokensSearchParams
     */
    readonly tokenNameCase?: 'kebab' | 'snake' | 'camel' | 'pascal' | 'constant' | 'original';
}
/**
 * Search parameters for getStyleguideDesignTokens operation in DesignTokensApi.
 * @export
 * @interface DesignTokensApiGetStyleguideDesignTokensSearchParams
 */
export interface DesignTokensApiGetStyleguideDesignTokensSearchParams {
    /**
     * Whether to include linked styleguides or not
     * @type {boolean}
     * @memberof DesignTokensApiGetStyleguideDesignTokensSearchParams
     */
    readonly includeLinkedStyleguides?: boolean;
    /**
     * Case for token names
     * @type {'kebab' | 'snake' | 'camel' | 'pascal' | 'constant' | 'original'}
     * @memberof DesignTokensApiGetStyleguideDesignTokensSearchParams
     */
    readonly tokenNameCase?: 'kebab' | 'snake' | 'camel' | 'pascal' | 'constant' | 'original';
}
/**
 * DesignTokensApi - object-oriented interface
 * @export
 * @class DesignTokensApi
 * @extends {BaseAPI}
 */
export declare class DesignTokensApi extends BaseAPI {
    /**
     * Fetch all design tokens of the project
     * @summary Get project design tokens
     * @param {string} projectId Project id
     * @param {DesignTokensApiGetProjectDesignTokensSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DesignTokensApi
     */
    getProjectDesignTokens(projectId: string, searchParams?: DesignTokensApiGetProjectDesignTokensSearchParams, options?: any): Promise<AxiosResponse<DesignTokens>>;
    /**
     * Fetch all design tokens of the styleguide
     * @summary Get styleguide design tokens
     * @param {string} styleguideId Styleguide id
     * @param {DesignTokensApiGetStyleguideDesignTokensSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DesignTokensApi
     */
    getStyleguideDesignTokens(styleguideId: string, searchParams?: DesignTokensApiGetStyleguideDesignTokensSearchParams, options?: any): Promise<AxiosResponse<DesignTokens>>;
}
