"use strict";

require("core-js/modules/es.array.is-array.js");

require("core-js/modules/es.symbol.js");

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.object.to-string.js");

require("core-js/modules/es.symbol.iterator.js");

require("core-js/modules/es.string.iterator.js");

require("core-js/modules/web.dom-collections.iterator.js");

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.function.name.js");

require("core-js/modules/es.array.from.js");

require("core-js/modules/es.object.define-property.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.transformJSONToDesignTokens = exports.transformDesignTokensToJSON = void 0;

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.object.from-entries.js");

require("core-js/modules/es.array.map.js");

require("core-js/modules/es.object.entries.js");

var _colorDesignToken = require("./color-design-token");

var _spacingDesignToken = require("./spacing-design-token");

var _textStyleDesignToken = require("./text-style-design-token");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var transformDesignTokensToJSON = function transformDesignTokensToJSON(value) {
  return {
    colors: Object.fromEntries(Object.entries(value.colors).map(function (_ref) {
      var _ref2 = _slicedToArray(_ref, 2),
          key = _ref2[0],
          val = _ref2[1];

      return [key, (0, _colorDesignToken.transformColorDesignTokenToJSON)(val)];
    })),
    spacing: Object.fromEntries(Object.entries(value.spacing).map(function (_ref3) {
      var _ref4 = _slicedToArray(_ref3, 2),
          key = _ref4[0],
          val = _ref4[1];

      return [key, (0, _spacingDesignToken.transformSpacingDesignTokenToJSON)(val)];
    })),
    text_styles: Object.fromEntries(Object.entries(value.textStyles).map(function (_ref5) {
      var _ref6 = _slicedToArray(_ref5, 2),
          key = _ref6[0],
          val = _ref6[1];

      return [key, (0, _textStyleDesignToken.transformTextStyleDesignTokenToJSON)(val)];
    }))
  };
};

exports.transformDesignTokensToJSON = transformDesignTokensToJSON;

var transformJSONToDesignTokens = function transformJSONToDesignTokens(value) {
  return {
    colors: Object.fromEntries(Object.entries(value.colors).map(function (_ref7) {
      var _ref8 = _slicedToArray(_ref7, 2),
          key = _ref8[0],
          val = _ref8[1];

      return [key, (0, _colorDesignToken.transformJSONToColorDesignToken)(val)];
    })),
    spacing: Object.fromEntries(Object.entries(value.spacing).map(function (_ref9) {
      var _ref10 = _slicedToArray(_ref9, 2),
          key = _ref10[0],
          val = _ref10[1];

      return [key, (0, _spacingDesignToken.transformJSONToSpacingDesignToken)(val)];
    })),
    textStyles: Object.fromEntries(Object.entries(value.text_styles).map(function (_ref11) {
      var _ref12 = _slicedToArray(_ref11, 2),
          key = _ref12[0],
          val = _ref12[1];

      return [key, (0, _textStyleDesignToken.transformJSONToTextStyleDesignToken)(val)];
    }))
  };
};
/**
 * 
 * @export
 * @interface DesignTokens
 */


exports.transformJSONToDesignTokens = transformJSONToDesignTokens;