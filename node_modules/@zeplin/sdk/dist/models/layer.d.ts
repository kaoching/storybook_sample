/**
 * Zeplin API
 * Access your resources in Zeplin
 *
 * Contact: support@zeplin.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { BlendModeEnum } from './blend-mode-enum';
import { BoundingRectangle } from './bounding-rectangle';
import { LayerBlur } from './layer-blur';
import { LayerBorder } from './layer-border';
import { LayerFill } from './layer-fill';
import { LayerShadow } from './layer-shadow';
import { LayerTextStyle } from './layer-text-style';
export declare const transformLayerToJSON: (value: Layer) => any;
export declare const transformJSONToLayer: (value: any) => Layer;
/**
 *
 * @export
 * @interface Layer
 */
export interface Layer {
    /**
     * Layer\'s unique id
     * @type {string}
     * @memberof Layer
     */
    id: string;
    /**
     * Layer\'s identifier in the design tool
     * @type {string}
     * @memberof Layer
     */
    sourceId?: string;
    /**
     * Type of the layer
     * @type {string}
     * @memberof Layer
     */
    type: 'text' | 'shape' | 'group';
    /**
     * Name of the layer
     * @type {string}
     * @memberof Layer
     */
    name?: string;
    /**
     *
     * @type {BoundingRectangle}
     * @memberof Layer
     */
    rect: BoundingRectangle;
    /**
     * Fills applied to the layer
     * @type {Array<LayerFill>}
     * @memberof Layer
     */
    fills?: Array<LayerFill>;
    /**
     * Borders of the layer
     * @type {Array<LayerBorder>}
     * @memberof Layer
     */
    borders?: Array<LayerBorder>;
    /**
     * Shadows applied to the layer
     * @type {Array<LayerShadow>}
     * @memberof Layer
     */
    shadows?: Array<LayerShadow>;
    /**
     *
     * @type {LayerBlur}
     * @memberof Layer
     */
    blur?: LayerBlur;
    /**
     * Opacity of the layer, [0, 1]
     * @type {number}
     * @memberof Layer
     */
    opacity: number;
    /**
     *
     * @type {BlendModeEnum}
     * @memberof Layer
     */
    blendMode?: BlendModeEnum;
    /**
     * Border radius of the layer
     * @type {number}
     * @memberof Layer
     */
    borderRadius?: number;
    /**
     * Rotation of the layer
     * @type {number}
     * @memberof Layer
     */
    rotation?: number;
    /**
     * Indicates whether the layer has assets or not
     * @type {boolean}
     * @memberof Layer
     */
    exportable?: boolean;
    /**
     * Text of the text layer
     * @type {string}
     * @memberof Layer
     */
    content?: string;
    /**
     *
     * @type {Array<LayerTextStyle>}
     * @memberof Layer
     */
    textStyles?: Array<LayerTextStyle>;
    /**
     *
     * @type {Array<Layer>}
     * @memberof Layer
     */
    layers?: Array<Layer>;
    /**
     * Name of the component the group layer is referencing
     * @type {string}
     * @memberof Layer
     */
    componentName?: string;
}
