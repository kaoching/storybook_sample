/**
 * Zeplin API
 * Access your resources in Zeplin
 *
 * Contact: support@zeplin.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
export declare const transformTokenCreateAuthorizationCodeBodyToJSON: (value: TokenCreateAuthorizationCodeBody) => any;
export declare const transformJSONToTokenCreateAuthorizationCodeBody: (value: any) => TokenCreateAuthorizationCodeBody;
/**
 *
 * @export
 * @interface TokenCreateAuthorizationCodeBody
 */
export interface TokenCreateAuthorizationCodeBody {
    /**
     *
     * @type {string}
     * @memberof TokenCreateAuthorizationCodeBody
     */
    grantType: 'authorization_code';
    /**
     * Applies when `grant_type` is `authorization_code`. The `code` obtained after `authorization` request
     * @type {string}
     * @memberof TokenCreateAuthorizationCodeBody
     */
    code: string;
    /**
     * The URL where users will be redirected after authorization
     * @type {string}
     * @memberof TokenCreateAuthorizationCodeBody
     */
    redirectUri: string;
    /**
     * The `client_id` of your Zeplin app
     * @type {string}
     * @memberof TokenCreateAuthorizationCodeBody
     */
    clientId: string;
    /**
     * The `client_secret` of your Zeplin app  **Note**: `client_secret` is required for `code` values obtained without using a PKCE `code_challenge` value.  **Warning**: `client_secret` property should only be used in a server-side application.  If your Zeplin app is a public client, you should use PKCE authorization flow.
     * @type {string}
     * @memberof TokenCreateAuthorizationCodeBody
     */
    clientSecret?: string;
    /**
     * A cryptographically random string that is used to correlate the authorization request to the token request
     * @type {string}
     * @memberof TokenCreateAuthorizationCodeBody
     */
    codeVerifier?: string;
}
