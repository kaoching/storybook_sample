"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.transformPlaywrightJson = void 0;

var t = _interopRequireWildcard(require("@babel/types"));

var _generator = _interopRequireDefault(require("@babel/generator"));

var _csf = require("@storybook/csf");

var _transformPlaywright = require("./transformPlaywright");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const makeTest = story => {
  const result = (0, _transformPlaywright.testPrefixer)({
    name: t.stringLiteral(story.name),
    title: t.stringLiteral(story.title),
    id: t.stringLiteral(story.id),
    // FIXME
    storyExport: t.identifier(story.id)
  });
  const stmt = result[1];
  return t.expressionStatement(t.callExpression(t.identifier('it'), [t.stringLiteral('test'), stmt.expression]));
};

const makeDescribe = (title, stmts) => {
  return t.expressionStatement(t.callExpression(t.identifier('describe'), [t.stringLiteral(title), t.arrowFunctionExpression([], t.blockStatement(stmts))]));
}; // FIXME: this should be a CSF helper


const isDocsOnly = stories => stories.length === 1 && stories[0].name === 'Page';
/**
 * Generate one test file per component so that Jest can
 * run them in parallel.
 */


const transformPlaywrightJson = src => {
  const json = JSON.parse(src);

  if (json.v !== 3) {
    throw new Error(`Unsupported version ${json.v}`);
  }

  const stories = Object.values(json.stories);
  const titleIdToStories = stories.reduce((acc, story) => {
    const titleId = (0, _csf.toId)(story.title);
    acc[titleId] = acc[titleId] || [];
    acc[titleId].push(story);
    return acc;
  }, {});
  const titleIdToTest = Object.entries(titleIdToStories).reduce((acc, [titleId, stories]) => {
    if (!isDocsOnly(stories)) {
      const storyTests = stories.map(story => makeDescribe(story.name, [makeTest(story)]));
      const program = t.program([makeDescribe(stories[0].title, storyTests)]);
      const {
        code
      } = (0, _generator.default)(program, {});
      acc[titleId] = code;
    }

    return acc;
  }, {});
  return titleIdToTest;
};

exports.transformPlaywrightJson = transformPlaywrightJson;